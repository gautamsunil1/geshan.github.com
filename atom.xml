<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Geshan&#39;s Blog</title>
	<subtitle>A blog about software engineering, devops and web development</subtitle>
	
	<link href="https://geshan.com.np/atom.xml" rel="self"/>
	<link href="https://geshan.com.np/"/>
	<updated>2024-08-14T09:45:37Z</updated>
	<id>https://geshan.com.np/</id>
	<author>
		<name>Geshan Manandhar</name>
		<email>geshan@gmail.com</email>
	</author>
	
	<entry>
		<title>How to insert multiple rows in Postgres using two useful methods</title>
		<link href="https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/"/>
		<updated>2024-08-14T09:45:37Z</updated>
		<id>https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/</id>
		<content type="html">&lt;p&gt;The PostgreSQL database, lovingly known as Postgres, is a powerful open-source database management system. Developers adore it for its robustness, reliability, and expressive SQL (Structured Query Language) capabilities. Often, when working with Postgres, you&#39;ll need to insert multiple rows into a table. While the single-row INSERT statement might be the first thing that pops into your mind, there are more efficient approaches when dealing with large amounts of data. In this blog post, you will dive deep into two powerful methods that can significantly streamline the process of inserting multiple rows in Postgres. Let&#39;s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/postgres-insert-multiple-rows/01postgres-insert-multiple-rows.jpg&quot; title=&quot;How to insert multiple rows in Postgres using two useful methods&quot; alt=&quot;How to insert multiple rows in Postgres using two useful methods&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#adding-data&quot;&gt;Adding data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#example-quote-table&quot;&gt;Example quote table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#single-insert&quot;&gt;Single Insert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#multiple-rows-with-a-single-insert&quot;&gt;Multiple rows with a single insert&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#on-conflict-and-db-transaction&quot;&gt;On Conflict and DB transaction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#insert-multiple-rows-with-copy-command&quot;&gt;Insert multiple rows with copy command&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#use-the-quotes-example-for-copy&quot;&gt;Use the quotes example for copy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;adding-data&quot; tabindex=&quot;-1&quot;&gt;Adding data &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#adding-data&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a software engineer, you should always strive to write optimally optimized and efficient code. This can be the number of requests per second the code is expected to handle, the size of data, the number of database connections, and other factors. The same goes for the data manipulation operation you perform on a database, be it MySQL, Postgres, or another database. So, you should know about the trade-offs and choose the best approach given the context.&lt;/p&gt;
&lt;p&gt;You will explore the two ways to insert multiple rows in Postgres. First, you will look at inserting multiple rows with a single INSERT statement, then delve into the powerful &lt;code&gt;COPY&lt;/code&gt; command, that can be used to insert multiple rows from an external CSV file to an existing table. By the end of this comprehensive exploration, you&#39;ll have a solid grasp of how to insert multiple rows in Postgres efficiently and effectively.&lt;/p&gt;
&lt;h2 id=&quot;example-quote-table&quot; tabindex=&quot;-1&quot;&gt;Example quote table &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#example-quote-table&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this tutorial, you will use the table called &lt;code&gt;quote&lt;/code&gt; with the schema given below to do the multiple inserts:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    id &lt;span class=&quot;token keyword&quot;&gt;SERIAL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    quote &lt;span class=&quot;token keyword&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varying&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UNIQUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    author &lt;span class=&quot;token keyword&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varying&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    created_at &lt;span class=&quot;token keyword&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;time&lt;/span&gt; zone &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    updated_at &lt;span class=&quot;token keyword&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;time&lt;/span&gt; zone &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is a simple table with an auto-increment primary key called &lt;code&gt;id&lt;/code&gt;, then there are two character fields for quote and author. The quote field is unique. After that, there are two fields for the created and updated timestamps to track when the row was created and updated. Next, you will learn how to do a single-row insert.&lt;/p&gt;
&lt;h2 id=&quot;single-insert&quot; tabindex=&quot;-1&quot;&gt;Single Insert &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#single-insert&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most common way to insert a row into a Postgres table is by using the &lt;code&gt;INSERT&lt;/code&gt; statement. The basic syntax of an &lt;code&gt;INSERT&lt;/code&gt; statement is as follows:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; table_name &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;column1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; column2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; column3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, to insert a new quote into the quote table, you would use the following SQL statement:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The only way to learn a new programming language is by writing programs in it.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dennis Ritchie&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This statement inserts a new quote into the quote table with the value &lt;code&gt;The only way to learn a new programming language is by writing programs in it.&lt;/code&gt; and &lt;code&gt;Dennis Ritchie&lt;/code&gt; as the author. The above &lt;code&gt;INSERT&lt;/code&gt; statement works well for a single row, but what if you want to insert multiple rows? For that, you would have to repeat the same &lt;code&gt;INSERT&lt;/code&gt; statement for each row which is not very efficient, for instance, to add two more quotes with other authors  you will need to execute two more INSERT statements as below:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Talk is cheap. Show me the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Linus Travolds&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Programs must be written for people to read, and only incidentally for machines to execute.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Harold Abelson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see for 3 rows you had to run 3 INSERT statements. Now, you know the single &lt;code&gt;INSERT&lt;/code&gt; statement is not very efficient for inserting multiple rows. It might involve multiple connections from your app to your database which will be slow. You will learn about a much more efficient way of doing this in the next section.&lt;/p&gt;
&lt;h2 id=&quot;multiple-rows-with-a-single-insert&quot; tabindex=&quot;-1&quot;&gt;Multiple rows with a single insert &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#multiple-rows-with-a-single-insert&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a couple of other ways to insert multiple rows in Postgres and both of them are much better than running individual &lt;code&gt;INSERT&lt;/code&gt; statements. One way to do it is to run single &lt;code&gt;INSERT&lt;/code&gt; statements to insert multiple rows with a bulk insert approach. Another way to insert multiple rows in Postgres is by using the &lt;code&gt;COPY&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Inserting multiple rows with a single insert has a similar syntax as inserting a single row, the main difference is you pass in multiple rows. Below is an example to insert 5 quotes on the above quote table:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bjarne Stroustrup&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Martin Fowler&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;First, solve the problem. Then, write the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Johnson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Java is to JavaScript what car is to Carpet.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Chris Heilmann&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Woods&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you run it with &lt;code&gt;psql&lt;/code&gt; it will look as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/postgres-insert-multiple-rows/02insert-multiple.jpg&quot; title=&quot;Inserting multiple rows with single insert query working on psql&quot; alt=&quot;Inserting multiple rows with single insert query working on psql&quot; /&gt;
&lt;p&gt;You can also use the &lt;a href=&quot;https://www.postgresql.org/docs/current/dml-returning.html&quot;&gt;RETURING keyword&lt;/a&gt; in Postgres to get the inserted data.&lt;/p&gt;
&lt;h3 id=&quot;on-conflict-and-db-transaction&quot; tabindex=&quot;-1&quot;&gt;On Conflict and DB transaction &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#on-conflict-and-db-transaction&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you do a bulk insert of multiple rows with a single insert, you can easily turn it into an upsert using the &lt;code&gt;ON CONFLICT&lt;/code&gt; &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-insert.html#SQL-ON-CONFLICT&quot;&gt;clause&lt;/a&gt;. It checks if a unique constraint or a composite key is violated, in that case, you can use the new values to replace the old ones. For instance, in the above example if an already existing quote is inserted again and you want to change the author it will look like this:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;First, solve the problem. Then, write the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Johnson1), &lt;br /&gt;    (&#39;&lt;/span&gt;Java &lt;span class=&quot;token operator&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;to&lt;/span&gt; JavaScript what car &lt;span class=&quot;token operator&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;to&lt;/span&gt; Carpet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;, &#39;&lt;/span&gt;Chris Heilmann1&#39;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; CONFLICT &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DO&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UPDATE&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;SET&lt;/span&gt; author &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; EXCLUDED&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above insert will act like an upsert and update the author to the new values provided in the insert values as the quote already exists and it has a unique constraint.&lt;/p&gt;
&lt;p&gt;Another thing to consider is if you are inserting rows with a parent-child table for example, the author is a table and the quote is another table as described in this &lt;a href=&quot;https://geshan.com.np/blog/2023/04/delete-cascade-postgres/&quot;&gt;Postgres Delete Cascade&lt;/a&gt; post, then it is best done in a database transaction. You will first add the author get the author’s id and use it in the query to insert the quote all in the same database transaction to maintain data integrity. Next, you will learn about the useful COPY command.&lt;/p&gt;
&lt;h2 id=&quot;insert-multiple-rows-with-copy-command&quot; tabindex=&quot;-1&quot;&gt;Insert multiple rows with COPY command &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#insert-multiple-rows-with-copy-command&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;COPY&lt;/code&gt; command provides a bulk insertion mechanism for inserting multiple rows from a file into a Postgres table with a single command. It can significantly improve performance compared to executing multiple individual INSERT statements. It&#39;s particularly useful when you have large datasets to import.&lt;/p&gt;
&lt;p&gt;The basic syntax for using the &lt;code&gt;COPY&lt;/code&gt; command for inserting data from a CSV file to a table is:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;COPY table_name &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;column1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; column2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; column3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; file_path&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;file_name&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DELIMITER&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;,&#39;&lt;/span&gt; CSV HEADER&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s break down the different parameters:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;table_name&lt;/code&gt;: The table name you want to insert the data into.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column1, column2, column3, ...&lt;/code&gt;: Column names you want to add data for.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FROM &#39;file_path/file_name&#39;&lt;/code&gt;: Specifies the path of the file you are inserting data from. You can use relative or absolute paths.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WITH DELIMITER &#39;,&#39; CSV HEADER;&lt;/code&gt;: Specifies the format of the file and if the file has header information or not.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;use-the-quotes-example-for-copy&quot; tabindex=&quot;-1&quot;&gt;Use the quotes example for copy &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#use-the-quotes-example-for-copy&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can create a new file named quotes.csv with the following data, similar to the quotes you added with &lt;code&gt;INSERT&lt;/code&gt; statement in the earlier example:&lt;/p&gt;
&lt;pre class=&quot;language-csv&quot;&gt;&lt;code class=&quot;language-csv&quot;&gt;&lt;span class=&quot;token value&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;author&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token value&quot;&gt;&quot;Software and cathedrals are much the same — first we build them, then we pray.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;Unknown&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token value&quot;&gt;&quot;Most good programmers do programming not because they expect to get paid or get adulation by the public, but because it is fun to program.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;Linus Torvalds&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token value&quot;&gt;Programming isn’t about what you know; it’s about what you can figure out.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;Chris Pine&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token value&quot;&gt;The function of good software is to make the complex appear to be simple.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;Grady Booch&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token value&quot;&gt;The most important property of a program is whether it accomplishes the intention of its user.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;C.A.R. Hoare&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can download the quotes.csv file from &lt;a href=&quot;https://filebin.net/8je4l43gxeueqm7j/quotes.csv&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the CSV file you have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Header:&lt;/strong&gt; The first line has the header information, which matches the column name of the quotes table.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delimiter:&lt;/strong&gt; The delimiter used in the CSV file to separate the columns is a comma.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quote:&lt;/strong&gt; Some of the quotes are wrapped in double quotes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To insert the quotes data from the CSV file into the quote table you can run the following &lt;code&gt;COPY&lt;/code&gt; command:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;COPY quote&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;quote&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/tmp/quotes.csv&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DELIMITER&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;,&#39;&lt;/span&gt; CSV HEADER&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will insert all 5 rows from the CSV file into the quote table. Below is a screenshot of it being run with psql:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/postgres-insert-multiple-rows/03postgres-copy.jpg&quot; title=&quot;Postgres copy with a CSV file working on psql&quot; alt=&quot;Postgres copy with a CSV file working on psql&quot; /&gt;
&lt;p&gt;To verify if the &lt;code&gt;COPY&lt;/code&gt; command has worked properly, you can run the following select statement:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; created_at &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; quote&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will list all 5 quotes from the CSV file and the one you inserted earlier in the single insert section. The output should look like the following on psql:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/postgres-insert-multiple-rows/04postgres-10-rows.jpg&quot; title=&quot;All 10 rows visible with select, 5 from bulk insert and 5 from the copy command&quot; alt=&quot;All 10 rows visible with select, 5 from bulk insert and 5 from the copy command&quot; /&gt;
&lt;p&gt;The &lt;code&gt;COPY&lt;/code&gt; command has efficiently inserted the data from the &lt;code&gt;quotes.csv&lt;/code&gt; file. Now, you know how to use the &lt;code&gt;COPY&lt;/code&gt; command to insert data from a CSV file. To use the copy command you will need extra permissions, below is a line from the official &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-copy.html&quot;&gt;docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;COPY naming a file or command is only allowed to database superusers or users who are granted one of the roles pg_read_server_files, pg_write_server_files, or pg_execute_server_program, since it allows reading or writing any file or running a program that the server has privileges to access.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given the user has the right permissions, the &lt;code&gt;COPY&lt;/code&gt; command is a very useful tool. I could not run it on a &lt;a href=&quot;https://neon.tech/&quot;&gt;Neon&lt;/a&gt; database but I could easily run it on a local Postgres database run with &lt;a href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/&quot;&gt;Docker compose&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/postgres-insert-multiple-rows/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this comprehensive guide, you have explored two effective methods for inserting multiple rows in Postgres. You learned the limitations of using individual &lt;code&gt;INSERT&lt;/code&gt; statements for large datasets and used the single insert to put in multiple rows at once. You then delved into the powerful &lt;code&gt;COPY&lt;/code&gt; command, discovering how to efficiently insert multiple rows from a CSV file.&lt;/p&gt;
&lt;p&gt;By mastering these techniques, you can streamline your data manipulation operations, enhance performance, and optimize your Postgresql workflows. Keep in mind to be aware of the performance considerations, and database design, and indexing when dealing with a huge data set for efficient insert operations. The next time you face the task of inserting multiple rows in a Postgres table, remember these methods and choose the most suitable approach for your needs. Happy coding!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Kubernetes Lens: the simple yet powerful K8s IDE</title>
		<link href="https://geshan.com.np/blog/2024/08/kubernetes-lens/"/>
		<updated>2024-08-08T11:40:37Z</updated>
		<id>https://geshan.com.np/blog/2024/08/kubernetes-lens/</id>
		<content type="html">&lt;p&gt;Kubernetes, the de-facto container orchestrator, has revolutionized how we deploy and&lt;br /&gt;
manage applications. With Kubernetes, you describe your desired state and it takes care of the rest, ensuring your applications run smoothly across a cluster of machines. However, working with Kubernetes can sometimes be daunting for beginners and even seasoned professionals. That&#39;s where Kubernetes Lens comes in as a path-breaker. In this post, you will learn about Kubernetes Lens, and how it has simplified working with Kubernetes. Let’s get going!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/kubernetes-lens/01kubernetes-lens.jpg&quot; title=&quot;Kubernetes Lens: the simple yet powerful K8s IDE&quot; alt=&quot;Kubernetes Lens: the simple yet powerful K8s IDE&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#kubernetes-lens&quot;&gt;Kubernetes Lens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#tools-used-in-the-past&quot;&gt;Tools used in the past&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#kubectl&quot;&gt;Kubectl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#kubernetes-dashboard&quot;&gt;Kubernetes Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#rancher&quot;&gt;Rancher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#kubernetes-lens-is-simple&quot;&gt;Kubernetes Lens is simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#kubernetes-lens-handy-use-cases&quot;&gt;Kubernetes Lens handy use cases&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#easy-to-see-workloads&quot;&gt;Easy-to-see workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#viewing-logs-and-running-shell-commands-in-a-pod-is-easy&quot;&gt;Viewing logs and running shell commands in a pod is easy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#checking-the-crons-and-their-runs-is-simple&quot;&gt;Checking the crons and their runs is simple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;kubernetes-lens&quot; tabindex=&quot;-1&quot;&gt;Kubernetes Lens &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#kubernetes-lens&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Kubernetes is complicated but tools to explore it do not need to be complicated. In K8s, you have pods, deployments, services, namespaces, config maps, secrets, and a multitude of other resources to manage. While &lt;a href=&quot;https://kubernetes.io/docs/reference/kubectl/&quot;&gt;kubectl&lt;/a&gt; is a powerful tool to navigate this Kubernetes jungle, it can sometimes feel overwhelming for beginners and even seasoned professionals. Imagine you have to manage a Kubernetes cluster with 10s of deployments and 100s of pods, trying to find out why a specific Pod is not working or what is the exact CPU and memory consumption of a deployment can be a daunting task with &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&quot;https://k8slens.dev/&quot;&gt;Kubernetes Lens&lt;/a&gt;, a powerful and user-friendly IDE designed to streamline your Kubernetes experience. Lens is the missing tool in your Kubernetes toolkit. It provides a visually appealing interface to manage and monitor your Kubernetes clusters, simplifying complex tasks and making your Kubernetes journey much easier. You can see how simple the user interface is below (taken from official &lt;a href=&quot;https://docs.k8slens.dev/&quot;&gt;docs&lt;/a&gt;/GitHub repo)&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/kubernetes-lens/02kubernetes-lens-ui.jpg&quot; title=&quot;Kubernetes Lens in action&quot; alt=&quot;Kubernetes Lens in action&quot; /&gt;
&lt;p&gt;Kubernetes Lens brands itself as &amp;quot;The Kubernetes IDE&amp;quot; and it is &lt;a href=&quot;https://github.com/lensapp/lens&quot;&gt;open-source&lt;/a&gt;, available for Mac, Windows, and Linux. Developed by Mirantis, they have a very good &lt;a href=&quot;https://www.mirantis.com/blog/getting-started-with-lens&quot;&gt;getting started guide&lt;/a&gt; for Kubernetes Lens. You can also follow the &lt;a href=&quot;https://docs.k8slens.dev/getting-started/install-lens/&quot;&gt;official guide&lt;/a&gt; from their docs. The main thing to take notice of here is licensing, it has two types of licenses. Lens personal can be used by individuals, education, and startups (less than $10 million in annual revenue or funding) for free. The pro and enterprise licenses are geared towards larger businesses, you can find the latest pricing on their &lt;a href=&quot;https://k8slens.dev/pricing&quot;&gt;pricing page&lt;/a&gt;. They claim:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With over 1 million users, Lens is the most popular Kubernetes IDE in the world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lens has also announced useful new features for the &lt;a href=&quot;https://k8slens.dev/blog/announcing-lens-2024&quot;&gt;Lens 2024&lt;/a&gt; edition. I have used other tools to manage Kubernetes in the past, those will be discussed in the next section.&lt;/p&gt;
&lt;h2 id=&quot;tools-used-in-the-past&quot; tabindex=&quot;-1&quot;&gt;Tools used in the past &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#tools-used-in-the-past&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before you delve into the specifics of Kubernetes Lens, let&#39;s take a trip down memory lane and look at some of the tools I have used to work with Kubernetes before using Lens. It will also give you a better idea of how things have evolved in the past few years. I have used Kubernetes Lens for more than 2 years now, but before using Kubernetes Lens I have used other tools like:&lt;/p&gt;
&lt;h3 id=&quot;kubectl&quot; tabindex=&quot;-1&quot;&gt;Kubectl &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#kubectl&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/reference/kubectl/&quot;&gt;Kubectl&lt;/a&gt;, the command-line interface (CLI) for Kubernetes, has been the go-to tool for interacting with Kubernetes clusters for many years. It is a powerful and flexible tool that gives you complete control over your cluster. With Kubectl, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Manage deployments, services, and pods&lt;/li&gt;
&lt;li&gt;View logs, exec into containers, and troubleshoot applications&lt;/li&gt;
&lt;li&gt;Configure your cluster and its resources&lt;/li&gt;
&lt;li&gt;Deploy and manage applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, Kubectl can have a steep learning curve, especially for beginners. It requires a good understanding of Kubernetes concepts and commands. Trying to find the log of a pod that restarted minutes ago can be a daunting task with Kubectl. Imagine remembering all this to get logs from multiple pods of a deployment:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;kubectl &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;namespace&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; logs &lt;span class=&quot;token parameter variable&quot;&gt;-f&lt;/span&gt; deployment/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;app-name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; --all-containers&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;true &lt;span class=&quot;token parameter variable&quot;&gt;--since&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;10m&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is a great tool and I still use it at times but a GUI is much easier especially when you start and Kubernetes Lens gives that.&lt;/p&gt;
&lt;h3 id=&quot;kubernetes-dashboard&quot; tabindex=&quot;-1&quot;&gt;Kubernetes Dashboard &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#kubernetes-dashboard&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/&quot;&gt;Kubernetes Dashboard&lt;/a&gt; is a web-based user interface for Kubernetes. It provides a visual representation of your cluster&#39;s resources and allows you to perform basic management tasks. With Kubernetes Dashboard, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View the status of your cluster and its resources&lt;/li&gt;
&lt;li&gt;Deploy and manage applications&lt;/li&gt;
&lt;li&gt;View logs and events&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, Kubernetes Dashboard is not as powerful as Kubectl, and it doesn&#39;t offer all of the same functionality. It can also be a bit clunky and slow. Another issue with the Kubernetes dashboard is that it runs as a deployment in your cluster and you need to forward the&lt;br /&gt;
port to access it from your machine with &lt;code&gt;kubectl port-forward service/kubernetes-dashboard 8443:443 -n kubernetes-dashboard&lt;/code&gt;. There have been some &lt;a href=&quot;https://securitylabs.datadoghq.com/cloud-security-atlas/vulnerabilities/exposed-kubernetes-dashboard/&quot;&gt;security issues&lt;/a&gt; due to the wrongly configured Kubernetes dashboard. I used Kubernetes Dashboard circa 2016-2017, but later I did not use it much.&lt;/p&gt;
&lt;h3 id=&quot;rancher&quot; tabindex=&quot;-1&quot;&gt;Rancher &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#rancher&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rancher.com/&quot;&gt;Rancher&lt;/a&gt; is an open-source container management platform. It provides a user-friendly interface for managing Kubernetes clusters, as well as other container orchestration tools like Docker Swarm and Apache Mesos. With Rancher, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deploy and manage Kubernetes clusters&lt;/li&gt;
&lt;li&gt;Monitor and manage your applications&lt;/li&gt;
&lt;li&gt;Set up role-based access control (RBAC)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rancher is a good choice for organizations that need to manage multiple Kubernetes clusters or that are using a mix of container orchestration tools. If you need to manage multiple clusters or&lt;br /&gt;
different container orchestration tools Rancher is a good fit for your need. It does take up a lot of resources to run.  I used Rancher from 2018-2021, it was a good tool and did the job well.&lt;/p&gt;
&lt;p&gt;There are other tools to navigate Kubernetes like &lt;a href=&quot;https://k9scli.io/&quot;&gt;K9s&lt;/a&gt;, &lt;a href=&quot;https://getseabird.github.io/&quot;&gt;Seabird&lt;/a&gt;, and &lt;a href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/%E2%80%8B%E2%80%8Bhttps://k8studio.io/&quot;&gt;K8Sutdio&lt;/a&gt; but I have not used them to comment about them.&lt;/p&gt;
&lt;h2 id=&quot;kubernetes-lens-is-simple&quot; tabindex=&quot;-1&quot;&gt;Kubernetes Lens is simple &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#kubernetes-lens-is-simple&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Kubernetes Lens simplifies working with Kubernetes by providing a unified and intuitive interface to manage all aspects of your cluster. It offers a rich set of features, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cluster Management: Manage multiple Kubernetes clusters from a single interface.&lt;/li&gt;
&lt;li&gt;Resource Visualization: View your cluster&#39;s resources, including deployments, pods, and services, in a clear and visually appealing way.&lt;/li&gt;
&lt;li&gt;Real-time Monitoring: Monitor the health and performance of your cluster and its resources in real-time.&lt;/li&gt;
&lt;li&gt;Troubleshooting: Diagnose and troubleshoot issues with your applications and clusters.&lt;/li&gt;
&lt;li&gt;Application Management: Deploy and manage applications with ease.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes Lens is a powerful tool that can simplify your Kubernetes workflow and boost your productivity. It is easy to use and has a low learning curve, making it ideal for both beginners&lt;br /&gt;
and experienced users.&lt;/p&gt;
&lt;p&gt;You can customize Lens and it also has &lt;a href=&quot;https://github.com/lensapp/lens-extensions&quot;&gt;add-ons&lt;/a&gt; for instance the multi-pod logs. In the next section, you will learn about some handy use cases for Kubernetes Lens.&lt;/p&gt;
&lt;h2 id=&quot;kubernetes-lens-handy-use-cases&quot; tabindex=&quot;-1&quot;&gt;Kubernetes Lens handy use cases &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#kubernetes-lens-handy-use-cases&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now, let&#39;s delve into some practical use cases of Kubernetes Lens that will showcase how it can simplify your Kubernetes workflow.&lt;/p&gt;
&lt;h3 id=&quot;easy-to-see-workloads&quot; tabindex=&quot;-1&quot;&gt;Easy-to-see workloads &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#easy-to-see-workloads&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With Kubernetes Lens, you can view all of your workloads, including deployments, pods, and services, in a single view. This makes it easy to see the status of your applications and to quickly identify any issues. To view the workloads for your cluster, click on the &amp;quot;Workloads&amp;quot; tab in the left sidebar:&lt;/p&gt;
&lt;p&gt;As you can see, the Workloads view lists all of the deployments, StatefulSets, DaemonSets, Cron Jobs, and Jobs in your cluster. You can filter the list by namespace, name, or status. You can also sort the list by name, creation time, or status.&lt;/p&gt;
&lt;h3 id=&quot;viewing-logs-and-running-shell-commands-in-a-pod-is-easy&quot; tabindex=&quot;-1&quot;&gt;Viewing logs and running shell commands in a pod is easy &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#viewing-logs-and-running-shell-commands-in-a-pod-is-easy&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the common tasks you&#39;ll need to do when working with Kubernetes is checking the logs of your pods. Kubernetes Lens makes this task easy by providing a built-in log viewer. You can&lt;br /&gt;
also tail the logs of a pod to see real-time updates. You can also use the terminal inside the Pod to run shell commands. This makes it easy to troubleshoot issues with your applications.&lt;/p&gt;
&lt;p&gt;To view the logs of a pod, click on the pod in the Workloads view, then click on the “Logs” tab. You will see logs like the one below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/kubernetes-lens/03kubernetes-lens-pod-logs.gif&quot; title=&quot;Kubernetes Lens with easy navigation and pod logs&quot; alt=&quot;Kubernetes Lens with easy navigation and pod logs&quot; /&gt;
&lt;p&gt;You can also click on the &amp;quot;Terminal&amp;quot; tab to open a &lt;a href=&quot;https://docs.k8slens.dev/how-to/open-pod-shell/&quot;&gt;terminal session&lt;/a&gt; inside the pod.&lt;/p&gt;
&lt;h3 id=&quot;checking-the-crons-and-their-runs-is-simple&quot; tabindex=&quot;-1&quot;&gt;Checking the crons and their runs is simple &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#checking-the-crons-and-their-runs-is-simple&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In addition to viewing the logs of your pods, you can also check the status of your &lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/&quot;&gt;Kubernetes cron jobs&lt;/a&gt;. Kubernetes Lens provides a dedicated view for cron jobs, which shows you the schedule,history, and status of each cron job. You can also trigger a cron job manually or edit its schedule from the Lens interface.&lt;/p&gt;
&lt;p&gt;To view the cron jobs for your cluster, click on the &lt;code&gt;Cluster Name (Left bar) &amp;gt; Workloads &amp;gt; CronJobs tab&lt;/code&gt; in the left sidebar. It will show you the list of cron jobs with the schedule and other info. You can then select a cron job to see more information about it, including its history, status, and configuration.&lt;/p&gt;
&lt;p&gt;There are many features you will like about Lens Kubernetes, please explore it and find the ones you will admire. You can have a look at secrets, replica sets, Horizontal pod scalers (HPA) and many other Kubernetes artifacts.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/08/kubernetes-lens/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Kubernetes Lens is a valuable addition to the toolbox of any software engineer working with Kubernetes. It simplifies complex tasks, provides real-time insights, and enhances productivity, making Kubernetes management a breeze.&lt;/p&gt;
&lt;p&gt;If you&#39;re not already using Lens, I encourage you to give it a try. It is free to use and available for download on all major platforms for personal use and if the company you work for makes less than $10 million. Happy Kubernetes-ing!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use query params in Nest.js a practical step-by-step guide</title>
		<link href="https://geshan.com.np/blog/2024/07/nestjs-query-params/"/>
		<updated>2024-07-30T11:40:37Z</updated>
		<id>https://geshan.com.np/blog/2024/07/nestjs-query-params/</id>
		<content type="html">&lt;p&gt;Query parameters are essential for building dynamic and flexible APIs. They allow clients to filter, sort, and paginate data, making your API more versatile and user-friendly. If you&#39;re working with Nest.js, a popular Node.js framework, harnessing the power of Nest.js query parameters is straightforward and intuitive. This guide will walk you through the process, providing clear example and explanations to help you master this crucial aspect of API development step-by-step. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/nestjs-query-params/01nestjs-query-params.jpg&quot; title=&quot;How to use query params in Nest.js a practical step-by-step guide&quot; alt=&quot;How to use query params in Nest.js a practical step-by-step guide&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of Contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#nest.js&quot;&gt;Nest.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#nest.js-controller&quot;&gt;Nest.js Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#nest.js-query-params-code-example&quot;&gt;Nest.js Query Params Code Example&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#project-setup&quot;&gt;Project Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#add-a-simple-route-with-quotes&quot;&gt;Add a simple route with quotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#add-nest.js-query-params-to-filter-quotes-by-author&quot;&gt;Add Nest.js query params to filter quotes by author&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;nest.js&quot; tabindex=&quot;-1&quot;&gt;Nest.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#nest.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://nestjs.com/&quot;&gt;Nest.js&lt;/a&gt; is a progressive Node.js framework, that provides elegant and efficient ways to handle query parameters. It has first class support for TypeScript and can be termed the backend version of Angular.  It has many opinions and decisions made for you so that you can follow the set standards and focus on your features rather than technical decisions. It comes with features like modularity, dependency injection, type safety, and a rich ecosystem of tools.&lt;/p&gt;
&lt;p&gt;As per the &lt;a href=&quot;https://survey.stackoverflow.co/2024/technology#most-popular-technologies-webframe&quot;&gt;Stackoverflow survey 2024&lt;/a&gt; results, Nest.js is used by 5.8% of all respondents. Similarly, according to the &lt;a href=&quot;https://2023.stateofjs.com/en-US/other-tools/#backend_frameworks&quot;&gt;State of JS 2023&lt;/a&gt; survey results, Nest.js is used by 29% of the respondents which is less than Express but more than Fastify (17%). This shows that Nest.js is a very popular backend framework for JavaScript(Node.js)/TypeScript.&lt;/p&gt;
&lt;p&gt;In this comprehensive guide, we&#39;ll delve into the details of working with query parameters in Nest.js, exploring different methods and best practices. By the end, you&#39;ll have a solid understanding of how to leverage query parameters to build robust and dynamic APIs.&lt;/p&gt;
&lt;h2 id=&quot;nest.js-controller&quot; tabindex=&quot;-1&quot;&gt;Nest.js Controller &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#nest.js-controller&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Controllers in Nest.js are responsible for handling incoming HTTP requests and returning appropriate responses. They act as the intermediaries between the client and the application logic. When it comes to query parameters, Nest.js offers several decorators to access and utilize them within your controllers. You will learn about them in the next section.&lt;/p&gt;
&lt;h2 id=&quot;nest.js-query-params-code-example&quot; tabindex=&quot;-1&quot;&gt;Nest.js Query Params Code Example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#nest.js-query-params-code-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To solidify our understanding, let&#39;s work through a concrete code example. We&#39;ll create a simple API for managing quotes, allowing clients to fetch quotes, and filter quotes by author.&lt;/p&gt;
&lt;h3 id=&quot;project-setup&quot; tabindex=&quot;-1&quot;&gt;Project Setup &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#project-setup&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Start by creating a new Nest.js project using the &lt;a href=&quot;https://docs.nestjs.com/cli/overview&quot;&gt;Nest CLI&lt;/a&gt;, you can install nest cli with &lt;code&gt;npm install -g @nestjs/cli&lt;/code&gt; and then run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nest new quotes-nest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can select &lt;code&gt;npm&lt;/code&gt; as the package manager. This will generate a new Nest.js project scaffold for you.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nestjs-query-params/02nestjs-select-pm.jpg&quot; title=&quot;Select npm as the package manager for Nest.js project scaffolding&quot; alt=&quot;Select npm as the package manager for Nest.js project scaffolding&quot; /&gt;
&lt;p&gt;It will take some time to generate a basic Nest.js app and present you with something like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nestjs-query-params/03nestjs-scaffolded.jpg&quot; title=&quot;Nest.js scaffolding done&quot; alt=&quot;Nest.js scaffolding done&quot; /&gt;
&lt;p&gt;Now to test the basic hello world you can run &lt;code&gt;cd quotes-nest&lt;/code&gt; and then &lt;code&gt;npm run start:dev&lt;/code&gt; you will see as follows on the CLI&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nestjs-query-params/04nestjs-start-dev.jpg&quot; title=&quot;Nest.js npm run start:dev output&quot; alt=&quot;Nest.js npm run start:dev output&quot; /&gt;
&lt;p&gt;Then once it runs, open a new browser tab and type &lt;code&gt;http://localhost:3000&lt;/code&gt; you should see:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nestjs-query-params/05nestjs-hello-world.jpg&quot; title=&quot;Nest.js hello world on the browser&quot; alt=&quot;Nest.js hello world on the browser&quot; /&gt;
&lt;p&gt;Hurray! You have successfully set up and run the basic Nest.js scaffold.&lt;/p&gt;
&lt;h3 id=&quot;add-a-simple-route-with-quotes&quot; tabindex=&quot;-1&quot;&gt;Add a simple route with quotes &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#add-a-simple-route-with-quotes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As the next step, you will add a simple GET route &lt;code&gt;/quotes&lt;/code&gt; on the generated &lt;code&gt;AppContoller&lt;/code&gt; that will serve 5 quotes, to do this you will add the following code to &lt;code&gt;/src/app.controller.ts&lt;/code&gt; after line 11:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Get&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;getQuotes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Object &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        quote&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bjarne Stroustrup&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        quote&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Martin Fowler&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        quote&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;First, solve the problem. Then, write the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Johnson&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        quote&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Java is to JavaScript what car is to Carpet.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Chris Heilmann&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        quote&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Woods&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; quotes &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that, you will have to save the file which will also restart the server as it is running in dev mode. One important thing to consider here is you are using &lt;code&gt;Object&lt;/code&gt; as the return type not a defined custom type, in a real-life scenario it would be better to define proper types.&lt;/p&gt;
&lt;p&gt;Now, you can go to &lt;code&gt;http://localhost:3000/quotes&lt;/code&gt; and you will see the following on your browser tab (if you are on Chrome enable the &lt;code&gt;Pretty print&lt;/code&gt; check box as seen below):&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nestjs-query-params/06nestjs-quotes.jpg&quot; title=&quot;Nest.js get all quotes without filtering&quot; alt=&quot;Nest.js get all quotes without filtering&quot; /&gt;
&lt;p&gt;In the next section, you will add a query param to filter quotes by author.&lt;/p&gt;
&lt;h3 id=&quot;add-nest.js-query-params-to-filter-quotes-by-author&quot; tabindex=&quot;-1&quot;&gt;Add Nest.js query params to filter quotes by author &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#add-nest.js-query-params-to-filter-quotes-by-author&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As the next feature, you will filter the quotes by the author’s name or even part of the author’s name. To do this, you will need to pass the author’s name from the browser. There are multiple ways to get this data on the server, one of the simplest way is using query parameters. These query params can be appended to the query like &lt;code&gt;http://locahost/quote?author=john&lt;/code&gt;. To parse out the author from the URL you will use the &lt;code&gt;Query&lt;/code&gt; directive provided in Nest.js core as follows:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Get&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;getQuotes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Query&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;author&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Object &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        quote&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bjarne Stroustrup&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        quote&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Martin Fowler&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        quote&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;First, solve the problem. Then, write the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Johnson&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        quote&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Java is to JavaScript what car is to Carpet.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Chris Heilmann&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        quote&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Woods&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; filteredQuotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; author &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;br /&gt;      quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLocaleLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLocaleLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      quotes&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filteredQuotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NotFoundException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;No quotes found for the given author&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; filteredQuotes &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code is similar to the above, still, there is a big difference that you can now filter the quotes by the author’s name or a part of it. You will also need to import &lt;code&gt;Query&lt;/code&gt; and &lt;code&gt;NotFoundException&lt;/code&gt; from &lt;code&gt;@nestjs/common&lt;/code&gt; for it to work. The full working &lt;a href=&quot;https://github.com/geshan/quotes-nestjs/blob/master/src/app.controller.ts&quot;&gt;controller&lt;/a&gt; with its test is available in this &lt;a href=&quot;https://github.com/geshan/quotes-nestjs/&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you save the file after importing the needed dependencies and the server restarts. You can point your browser to: &lt;code&gt;http://localhost:3000/quotes?author=john&lt;/code&gt; you will see there are only 2 quotes returned now as the filtering is working:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nestjs-query-params/07nestjs-quotes-filtered.jpg&quot; title=&quot;Nest.js get filtered quotes by author name using query params&quot; alt=&quot;Nest.js get filtered quotes by author name using query params&quot; /&gt;
&lt;p&gt;With the current filtering with &lt;code&gt;includes&lt;/code&gt; it will give the same output for &lt;code&gt;http://localhost:3000/quotes?author=joh&lt;/code&gt; which is only part of the author’s name.&lt;/p&gt;
&lt;p&gt;Congrats! You have implemented a basic but useful Nest.js query params example that works.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/nestjs-query-params/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Query parameters are indispensable for building flexible and dynamic APIs. Nest.js provides an elegant and efficient way to handle query parameters, allowing you to access and utilize them seamlessly within your controllers.&lt;/p&gt;
&lt;p&gt;By leveraging the &lt;code&gt;@Query()&lt;/code&gt; decorator, you can easily retrieve individual query parameters. Further, you can utilize these values to filter, sort, paginate data, and perform other operations to tailor the API response to the client&#39;s needs. By implementing best practices like data validation and error handling, you can ensure that your API is robust and resilient.&lt;/p&gt;
&lt;p&gt;As you venture further into the world of API development with Nest.js, master the art of query parameters and leverage their power to build truly remarkable APIs that delight your users and drive your applications forward. Keep Coding!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to Use Jest each to Get More Code Coverage with Less Test Code</title>
		<link href="https://geshan.com.np/blog/2024/07/it.each-jest/"/>
		<updated>2024-07-06T11:56:37Z</updated>
		<id>https://geshan.com.np/blog/2024/07/it.each-jest/</id>
		<content type="html">&lt;p&gt;Jest has been the most popular testing library for JavaScript for the last &lt;a href=&quot;https://npmtrends.com/jasmine-vs-jest-vs-mocha-vs-supertest-vs-vitest&quot;&gt;5 years&lt;/a&gt;. You can use Jest &lt;code&gt;each&lt;/code&gt; to write fewer tests and get more test code coverage. In this post, you will learn how to use the Jest’s each method to write efficient unit tests that result in better code coverage. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/it.each-jest/01it.each-jest.jpg&quot; title=&quot;How to Use Jest each to Get More Code Coverage with Less Test Code&quot; alt=&quot;How to Use Jest each to Get More Code Coverage with Less Test Code&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of Contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/it.each-jest/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/07/it.each-jest/#jest-each&quot;&gt;Jest each&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/07/it.each-jest/#example-of-e-commerce-order-status&quot;&gt;Example of E-Commerce Order Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/07/it.each-jest/#code-example-of-customer-order-status&quot;&gt;Code Example of Customer Order Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/07/it.each-jest/#code-example-without-jest-each&quot;&gt;Code example without Jest each&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/07/it.each-jest/#code-example-with-jest-each&quot;&gt;Code Example with Jest each&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/07/it.each-jest/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;jest-each&quot; tabindex=&quot;-1&quot;&gt;Jest each &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/it.each-jest/#jest-each&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jest &lt;code&gt;each&lt;/code&gt; is a feature that lets you write data-driven tests. It can be used to test the same code with different inputs and outputs. You can use Jest &lt;code&gt;each&lt;/code&gt; to write data-driven tests where you can test the same code with different inputs and outputs without repeating the test code. It will automatically generate test titles for each of the test cases you feed to &lt;code&gt;each&lt;/code&gt; which makes it easier to understand which test failed. It is a great way to write exhaustive tests for your code.&lt;/p&gt;
&lt;p&gt;If you have used PHPUnit to test PHP code, it is very similar to &lt;a href=&quot;https://geshan.com.np/blog/2014/02/using-phpunit-data-provider-for-less/&quot;&gt;PHPUnit data provider&lt;/a&gt;. The idea is that, in place of looping through an array of data in your test function and calling the assert function. You can put that data in a table-like structure and pass it to &lt;code&gt;each&lt;/code&gt;. The &lt;code&gt;each&lt;/code&gt; function will then loop through each row of data and execute the test for that row. It will also make your test output more readable with meaningful test case names generated from the data you supplied.&lt;/p&gt;
&lt;p&gt;You can use &lt;code&gt;each&lt;/code&gt; in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Table format&lt;/strong&gt; - where data is an array of arrays, the first row is the table header and the other rows are the data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tagged template literal&lt;/strong&gt; - you can use tagged template literals to write tests in a more readable way. This format can also give you the benefit of formatted values in the test title.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will look at the code examples of both formats below:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table format&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Math.pow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;Math.pow(%i, %i) should return %i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; exponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; expected&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; exponent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expected&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below is an example of the tagged templated literal format for Jest each with above math power example:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tagged template literals&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Math.pow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;each&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;base | exponent | expected&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;Math.pow($base, $exponent) should return $expected&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      exponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      expected&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; exponent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expected&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;example-of-e-commerce-order-status&quot; tabindex=&quot;-1&quot;&gt;Example of E-Commerce Order Status &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/it.each-jest/#example-of-e-commerce-order-status&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As an example of how Jest &lt;code&gt;each&lt;/code&gt; can make your code more readable and provide more code coverage, let’s take the case of an e-commerce website. When a customer orders an item from an e-commerce website, the order goes through a lifecycle of order statuses.&lt;/p&gt;
&lt;p&gt;There are generally two types of order statuses on an e-commerce website. One is the internal order status visible to the employees of the company. This order status defines the stage the order is at. This order status helps the company track the order internally.&lt;/p&gt;
&lt;p&gt;Some of the internal order statuses can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Created&lt;/strong&gt; - a new order is placed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sent to warehouse&lt;/strong&gt; - the order has been sent to the warehouse system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Picked at warehouse&lt;/strong&gt; - the order has been picked and put into a box at the warehouse.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sent to courier&lt;/strong&gt; - The order is created on the courier’s system and the box is ready for pickup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Picked up by courier&lt;/strong&gt; - The order and it’s item are in a box and are with the courier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Out for Delivery&lt;/strong&gt; - The parcel is being sent to the custmer by the courier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delivered&lt;/strong&gt; - the items have been successfully delivered to the customer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is another order status that is shown to the customer. This order status is more user-friendly and can be something like the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Processing&lt;/strong&gt; - equivalent to the above internal statues from &lt;code&gt;Created&lt;/code&gt; to &lt;code&gt;sent to courier&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Order shipped&lt;/strong&gt; - equivalent to the above internal statues of &lt;code&gt;Picked up by courier&lt;/code&gt; and &lt;code&gt;out for delivery&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delivered&lt;/strong&gt; - equivalent to delivered in the above internal statuses.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this example, let&#39;s write some code and a test for the mapping of internal order status to customer order status using &lt;code&gt;each&lt;/code&gt; in Jest, in the next section.&lt;/p&gt;
&lt;h2 id=&quot;code-example-of-customer-order-status&quot; tabindex=&quot;-1&quot;&gt;Code Example of Customer Order Status &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/it.each-jest/#code-example-of-customer-order-status&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a simple Javascript function that maps the internal order status to the customer order status.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPublicOrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;interrnalStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; processing &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;processing&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; statusMap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&#39;created&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; processing&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&#39;sent_to_warehouse&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; processing&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&#39;picked_at_warehouse&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; processing&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&#39;sent_to_courier&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; processing&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&#39;picked_up_by_courier&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;shipped&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&#39;out_for_delivery&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;shipped&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&#39;delivered&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;delivered&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;statusMap&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;interrnalStatus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; statusMap&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;interrnalStatus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; processing&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code snippet defines a const &lt;code&gt;statusMa&lt;/code&gt;  that has keys for all the different internal order statuses. Then we define a &lt;code&gt;getCustomerOrderStatus&lt;/code&gt; function that takes the internal order status as a parameter and returns the user-friendly order status that will be visible to the customer. It uses a Map with an Object that has the internal ordre status as the key and the customer friendly order status as the value.&lt;/p&gt;
&lt;h2 id=&quot;code-example-without-jest-each&quot; tabindex=&quot;-1&quot;&gt;Code example without Jest each &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/it.each-jest/#code-example-without-jest-each&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a code example to test that the mapping from internal to customer order status is working as expected:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;orderStatusMapper&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should return user status processing for unknown status&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCustomerOrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;unknown&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;processing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should return user status processing for creaetd&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCustomerOrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;created&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;processing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should return user status shipped for out for delivery&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCustomerOrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;out_for_delivery&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;shipped&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should return user status delivered for out for delivered&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCustomerOrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;delivered&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;delivered&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see above, the code seems to be very repetitive. Next, you are doing to use &lt;code&gt;Jest each&lt;/code&gt; to write the code for all the internal to customer status mapping.&lt;/p&gt;
&lt;h2 id=&quot;code-example-with-jest-each&quot; tabindex=&quot;-1&quot;&gt;Code Example with Jest each &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/it.each-jest/#code-example-with-jest-each&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now, let’s write a test for the above code using &lt;code&gt;each&lt;/code&gt; in Jest to make it more readable, concise, and cover all the different test cases:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getPublicOrderStatus &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;../src/orderStatusMapper.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; orderStatuses &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;unknown&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;processing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;created&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;processing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sent_to_warehouse&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;processing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;picked_at_warehouse&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;processing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sent_to_courier&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;processing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;picked_up_by_courier&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;shipped&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;out_for_delivery&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;shipped&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;delivered&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;delivered&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;orderStatusMapper&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  it&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;orderStatuses&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;For %s it should return %s &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; expected&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPublicOrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expected&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the test cases look much simpler and streamlined. The &lt;code&gt;orderStauses&lt;/code&gt; array is taken in as the input for &lt;code&gt;it.each&lt;/code&gt; and for each row the test runs once. If you run the test it will give the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/it.each-jest/02it.each-jest-run.jpg&quot; title=&quot;Result of test run with Jest each&quot; alt=&quot;Result of test run with Jest each&quot; /&gt;
&lt;p&gt;To make the example complete, next is the same set of tests with the tagged template literals syntax:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;it&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;each&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  input              | expected&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;unknown&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;       | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;processing&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;created&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;       | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;processing&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sent_to_warehouse&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;processing&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;picked_at_warehouse&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;processing&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sent_to_courier&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;processing&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;picked_up_by_courier&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;shipped&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;out_for_delivery&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;shipped&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;delivered&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;delivered&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should return with template - $expected for $input&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; expected &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPublicOrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expected&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is the same example but formatted differently with template literals. You can also use &lt;code&gt;test.each&lt;/code&gt; in place of &lt;code&gt;it.each&lt;/code&gt; and it will have the same result.&lt;/p&gt;
&lt;p&gt;The full code with the test for this example is available in this &lt;a href=&quot;https://github.com/geshan/jest-each&quot;&gt;GitHub repo&lt;/a&gt;. You can also check the GitHub Action for the &lt;a href=&quot;https://github.com/geshan/jest-each/actions/runs/9819102710/job/27112334521&quot;&gt;test run&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/it.each-jest/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jest &lt;code&gt;each&lt;/code&gt; is a great feature to write concise and easy-to-read tests. It also helps you write data-driven tests with more code coverage with less test code. Make a habit to use &lt;code&gt;each&lt;/code&gt; in your Jest tests and I hope it will make you a better software engineer. Keep writing tests!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>A Beginner&#39;s Guide to Using Deno with Docker and Docker Compose</title>
		<link href="https://geshan.com.np/blog/2024/07/deno-docker/"/>
		<updated>2024-07-04T09:56:37Z</updated>
		<id>https://geshan.com.np/blog/2024/07/deno-docker/</id>
		<content type="html">&lt;p&gt;Deno is a relatively new runtime environment for JavaScript and TypeScript that has gained some attention in recent years. Docker is the leader in the container world and is the defacto tool for building, shipping, and running applications in containers. In this post, you will learn how to run a basic Deno application with Docker and Docker Compose. Let’s dive in!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/deno-docker/01deno-docker.jpg&quot; title=&quot;A Beginner&#39;s Guide to Using Deno with Docker and Docker Compose&quot; alt=&quot;A Beginner&#39;s Guide to Using Deno with Docker and Docker Compose&quot; /&gt;
&lt;h2 id=&quot;deno-and-why-use-it&quot; tabindex=&quot;-1&quot;&gt;Deno and Why Use It &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/deno-docker/#deno-and-why-use-it&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Deno is a modern JavaScript and TypeScript runtime created by Ryan Dahl, the original creator of Node.js. It&#39;s designed to address some of the issues and limitations found in Node.js. In his own words:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Deno is JavaScript for professional software engineers. Simple, secure, optimal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can watch the full talk below:&lt;/p&gt;
&lt;div style=&quot;position: relative;
width: 100%;
height: 0;
padding-bottom: 56.25%; margin-bottom: 1rem;&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/VDKJ1rSj-NI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; style=&quot;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;The official Deno website also talk about &lt;a href=&quot;https://deno.com/learn/nodes-complexity-problem&quot;&gt;Node.js’ complexity&lt;/a&gt;. In the next section you wil learn about why use Deno.&lt;/p&gt;
&lt;h3 id=&quot;why-use-deno&quot; tabindex=&quot;-1&quot;&gt;Why use Deno &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/deno-docker/#why-use-deno&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are many reasons to use Deno. It is faster and more secure, uses TypeScript&lt;br /&gt;
by default and is built to be more modular.&lt;/p&gt;
&lt;h4 id=&quot;faster-and-more-secure&quot; tabindex=&quot;-1&quot;&gt;Faster and More Secure &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/deno-docker/#faster-and-more-secure&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Deno is faster and more secure than Node.js because it uses a secure-by-default model.&lt;br /&gt;
In Node.js, scripts can access the file system, network, and environment variables by&lt;br /&gt;
default. This can lead to security vulnerabilities if a script is malicious. In Deno,&lt;br /&gt;
scripts must explicitly be granted permission to access these resources. This makes&lt;br /&gt;
Deno more secure by default. A blog post comparing &lt;a href=&quot;https://medium.com/deno-the-complete-reference/deno-vs-node-js-performance-comparison-for-file-server-9af26133c800&quot;&gt;Deno and Node’s performance&lt;/a&gt; concludes &lt;code&gt;Node.js’s file serving seems slower compared to Deno. Also, Node.js uses more CPU and memory.&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;uses-typescript-by-default&quot; tabindex=&quot;-1&quot;&gt;Uses TypeScript by Default &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/deno-docker/#uses-typescript-by-default&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Deno has built-in support for TypeScript, a typed superset of Javascript. This means you can write type-safe code in Deno without needing to install any additional tools.&lt;br /&gt;
&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; can help you catch errors early in the development process and make your code more maintainable. Deno still converts TypeSciprt to JavaScript for &lt;a href=&quot;https://docs.deno.com/runtime/manual/advanced/typescript/overview/#how-does-it-work%3F&quot;&gt;executing&lt;/a&gt; it.&lt;/p&gt;
&lt;h4 id=&quot;built-to-be-more-modular&quot; tabindex=&quot;-1&quot;&gt;Built to be More Modular &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/deno-docker/#built-to-be-more-modular&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Deno is designed to be more modular than Node.js, with a focus on using ES modules. ES modules are a modern JavaScript module system that is more standardized and easier to use than the CommonJS module system used by Node.js. Apparently, you can create a &lt;a href=&quot;https://deno.land/x/blog@0.7.0&quot;&gt;blog with 2 lines&lt;/a&gt; of code.&lt;/p&gt;
&lt;p&gt;There are other reasons to use Deno too like it has a dependency inspector with &lt;code&gt;deno info&lt;/code&gt; and built-in code formatter with &lt;code&gt;deno fmt&lt;/code&gt;. In the next section, you will dive into using Deno with Docker.&lt;/p&gt;
&lt;h2 id=&quot;deno-docker-example&quot; tabindex=&quot;-1&quot;&gt;Deno Docker Example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/deno-docker/#deno-docker-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s jump to the practical part now, we will use a simple Deno Fresh application to see how we can dockerize it. I have already created a basic Deno fresh app and open-sourced it on &lt;a href=&quot;https://github.com/geshan/deno-fresh-docker&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before getting into the technical details, let’s talk about what Deno fresh is. The &lt;a href=&quot;https://fresh.deno.dev/&quot;&gt;official website&lt;/a&gt; of Deno Fresh has a tagline saying  “The simple, approachable, productive web framework. The framework so simple, you already know it”.&lt;/p&gt;
&lt;p&gt;The official &lt;a href=&quot;https://fresh.deno.dev/docs/introduction&quot;&gt;docs&lt;/a&gt; further state:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fresh is a full stack modern web framework for JavaScript and TypeScript developers, designed to make it trivial to create high-quality, performant, and personalized web applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For this Deno and Docker example, I wanted to give an example that can be built into an app rather than just a simple web server on Deno. Fresh is the Express equivalent of Deno with batteries included. Now let’s get your hands dirty with some code.&lt;/p&gt;
&lt;h3 id=&quot;step-1%3A-install-deno&quot; tabindex=&quot;-1&quot;&gt;Step 1: Install Deno &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/deno-docker/#step-1%3A-install-deno&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To install Deno follow the official &lt;a href=&quot;https://docs.deno.com/runtime/manual/getting_started/installation/&quot;&gt;installation guide&lt;/a&gt;. For my machine I ran:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-fsSL&lt;/span&gt; https://deno.land/install.sh &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then to test it out, I executed &lt;code&gt;deno –version&lt;/code&gt; which resulted in (at the time of writing this blog post):&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;deno &lt;span class=&quot;token number&quot;&gt;1.44&lt;/span&gt;.4 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;release, aarch64-apple-darwin&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;v8 &lt;span class=&quot;token number&quot;&gt;12.6&lt;/span&gt;.228.9&lt;br /&gt;typescript &lt;span class=&quot;token number&quot;&gt;5.4&lt;/span&gt;.5&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;step-2%3A-set-up-fresh&quot; tabindex=&quot;-1&quot;&gt;Step 2: Set up Fresh &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/deno-docker/#step-2%3A-set-up-fresh&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now to install a new copy for fresh, you can run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;deno run &lt;span class=&quot;token parameter variable&quot;&gt;-A&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; https://fresh.deno.dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will download somethings and then ask you give a name for the project, you can go with &lt;code&gt;fresh-project&lt;/code&gt; as the default name. Then you can select, &lt;code&gt;tailwind&lt;/code&gt; option 1 as your styling library. After that you can select to use or not use VS Code. I selected &lt;code&gt;y&lt;/code&gt; as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/deno-docker/02install-deno-fresh.jpg&quot; title=&quot;Installing Deno fresh with local deno command&quot; alt=&quot;Installing Deno fresh with local deno command&quot; /&gt;
&lt;p&gt;To run a fresh Demo Fresh project you can then execute:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; fresh-project&lt;br /&gt;deno task start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will start your app at &lt;code&gt;http://localhost:8000&lt;/code&gt;, if you go to that URL on your browser you will see:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/deno-docker/03deno-fresh-running.jpg&quot; title=&quot;Deno fresh running with local deno command&quot; alt=&quot;Deno fresh running with local deno command&quot; /&gt;
&lt;p&gt;Stop the server and you can make a small change on the default Fresh install. On the editor/IDE of your choice open the &lt;code&gt;fresh-project&lt;/code&gt; folder and edit the &lt;code&gt;/routes/index.tsx&lt;/code&gt; file as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/deno-docker/04edit-fresh-template.jpg&quot; title=&quot;Add &#39;on Docker&#39; to the Deno Fresh template&quot; alt=&quot;Add &#39;on Docker&#39; to the Deno Fresh template&quot; /&gt;
&lt;p&gt;Add &lt;code&gt;on Docker&lt;/code&gt; at line 16 of the &lt;code&gt;/routes/index.tsx&lt;/code&gt; file and save it. Then run the server again with &lt;code&gt;deno task start&lt;/code&gt; and it will show up on your browser at &lt;code&gt;http://localhost:8000&lt;/code&gt;. It will look like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/deno-docker/05deno-on-docker.jpg&quot; title=&quot;Result of Deno Fresh template change&quot; alt=&quot;Result of Deno Fresh template change&quot; /&gt;
&lt;p&gt;In the next step, you will Dockerize the Deno Fresh app.&lt;/p&gt;
&lt;h3 id=&quot;step-3%3A-dockerize-deno-fresh&quot; tabindex=&quot;-1&quot;&gt;Step 3: Dockerize Deno Fresh &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/deno-docker/#step-3%3A-dockerize-deno-fresh&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To Dockerize your Deno Fresh you will add a file called &lt;code&gt;Dockerfle&lt;/code&gt; at the root of the project with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM denoland/deno:alpine-1.44.4&lt;br /&gt;&lt;br /&gt;WORKDIR /app&lt;br /&gt;&lt;br /&gt;COPY &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;br /&gt;RUN deno cache main.ts&lt;br /&gt;RUN deno task build&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt; deno&lt;br /&gt;EXPOSE &lt;span class=&quot;token number&quot;&gt;8000&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;run&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;-A&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;main.ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This Dockerfile is used to create a Docker container for a Deno application. Here&#39;s a breakdown of its contents:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FROM denoland/deno:alpine-1.44.4&lt;/code&gt;: This line specifies the base image for the container. It uses the Deno image based on Alpine Linux, version 1.44.4. Alpine Linux is chosen for its small size and security.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WORKDIR /app&lt;/code&gt;: Sets the working directory inside the container to &lt;code&gt;/app&lt;/code&gt;. All subsequent commands will be run from this directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;COPY . .&lt;/code&gt;: Copies all files from the current directory on the host machine to the current working directory (&lt;code&gt;/app&lt;/code&gt;) inside the container.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RUN deno cache main.ts&lt;/code&gt;: Caches the dependencies of the &lt;a href=&quot;https://github.com/geshan/deno-fresh-docker/blob/master/main.ts&quot;&gt;&lt;code&gt;main.ts&lt;/code&gt;&lt;/a&gt; file. Deno downloads and compiles dependencies ahead of time, and this command ensures that all dependencies are cached in the image, reducing the startup time of the container.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RUN deno task build&lt;/code&gt;:  Runs the &lt;code&gt;build&lt;/code&gt; task for Fresh that will create a _fresh folder which holds all the generated &lt;a href=&quot;https://deno.com/blog/fresh-1.4&quot;&gt;assets&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;USER deno&lt;/code&gt;: Switches the user context to &lt;code&gt;deno&lt;/code&gt;. This is for security reasons, to not run the application as the root user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;EXPOSE 8000&lt;/code&gt;: Informs Docker that the container listens on port 8000 at runtime. This does not actually publish the port; it functions as a form of documentation between the person who builds the image and the person who runs the container.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CMD [&amp;quot;run&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;main.ts&amp;quot;]&lt;/code&gt;: Specifies the default command to run when the container starts. In this case, it runs the Deno application with the command &lt;code&gt;deno run -A main.ts&lt;/code&gt;. The &lt;code&gt;-A&lt;/code&gt; flag gives the script all permissions, which include network access, file system access, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This Dockerfile is a straightforward way to containerize a Deno application, ensuring it runs in a lightweight, secure environment with all its dependencies properly cached. You can also use &lt;a href=&quot;https://geshan.com.np/blog/2019/11/how-to-use-docker-multi-stage-build/&quot;&gt;multi-stage docker build&lt;/a&gt; to reduce the size of the final image, but for this example, a single-stage build is sufficient. If you want a refersher on Docker, please do read this &lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/&quot;&gt;docker for beginners&lt;/a&gt; guide.&lt;/p&gt;
&lt;p&gt;Given you have creaded the &lt;code&gt;Dockerfile&lt;/code&gt; you can build it into a Docker image with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; build &lt;span class=&quot;token parameter variable&quot;&gt;-t&lt;/span&gt; my-fresh-app &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will result in something as follows (I am using Docker version 24.0.2, build cb74dfc on a Mac):&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/deno-docker/06deno-docker-build.jpg&quot; title=&quot;Docker build result for Deno app (Fresh)&quot; alt=&quot;Docker build result for Deno app (Fresh)&quot; /&gt;
&lt;p&gt;To run Deno Fresh on a Docker container you can execute:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8000&lt;/span&gt;:8000 my-fresh-app&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will result in:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/deno-docker/07deno-docker-run.jpg&quot; title=&quot;Docker run result for Deno app (Fresh)&quot; alt=&quot;Docker run result for Deno app (Fresh)&quot; /&gt;
&lt;p&gt;If you hit &lt;code&gt;http://localhost:8000&lt;/code&gt; you will see the Fresh page with &lt;code&gt;Welcome to Fresh on Docker&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;step-3%3A-docker-compose-with-deno&quot; tabindex=&quot;-1&quot;&gt;Step 3: Docker compose with Deno &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/deno-docker/#step-3%3A-docker-compose-with-deno&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this part, you will add a new &lt;code&gt;docker-compose.yaml&lt;/code&gt; file in the root of the folder with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  app:&lt;br /&gt;    container_name: deno_fresh_app&lt;br /&gt;    build: &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token string&quot;&gt;&quot;8000:8000&quot;&lt;/span&gt;&lt;br /&gt;    volumes:&lt;br /&gt;      - .:/app&lt;br /&gt;    command: deno run &lt;span class=&quot;token parameter variable&quot;&gt;-A&lt;/span&gt; main.ts&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run your Fresh app with Docker Compose you can run &lt;code&gt;docker compose build&lt;/code&gt; which will build the image.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/deno-docker/08deno-docker-compose-build.jpg&quot; title=&quot;Docker build result for Deno app (Fresh)&quot; alt=&quot;Docker compose build result for Deno app (Fresh)&quot; /&gt;
&lt;p&gt;Then run &lt;code&gt;docker compose up&lt;/code&gt; to run the app container. It will give an output like the following one:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/deno-docker/09deno-docker-compose-up.jpg&quot; title=&quot;Docker compose up result for Deno app (Fresh)&quot; alt=&quot;Docker compose up result for Deno app (Fresh)&quot; /&gt;
&lt;p&gt;Due to how things are cached, you might need to run &lt;code&gt;deno task build&lt;/code&gt; locally to get the &lt;code&gt;_fresh&lt;/code&gt; folder to be mapped with volumes for Docker compose. If you want a &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;nodemon&lt;/a&gt; like experience you can use &lt;a href=&quot;https://deno.land/x/denon@2.5.0&quot;&gt;denon&lt;/a&gt;. If you want to learn more about Docker comoose you can check this &lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/&quot;&gt;docker compose tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All of the code is in this open-source &lt;a href=&quot;https://github.com/geshan/deno-fresh-docker&quot;&gt;GitHub&lt;/a&gt; repository. You can clone it and try it out yourself. If you have any questions or suggestions, feel free to open an issue or a pull request.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/07/deno-docker/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Congratulations! You&#39;ve successfully created a Deno Fresh application, containerized it with Docker, and managed it with Docker Compose. This guide has provided you with the foundational skills to work with Deno and Docker, and you&#39;re now equipped to build and deploy scalable applications. Keep Docerkizing!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>JavaScript Try Catch: A beginner-friendly introduction with useful examples</title>
		<link href="https://geshan.com.np/blog/2024/06/javascript-try-catch/"/>
		<updated>2024-06-23T11:56:37Z</updated>
		<id>https://geshan.com.np/blog/2024/06/javascript-try-catch/</id>
		<content type="html">&lt;p&gt;JavaScript &lt;code&gt;try catch&lt;/code&gt; is an essential tool for handling errors and exceptions in your code. It provides a mechanism to gracefully handle unexpected situations and prevent your program from crashing. In this comprehensive beginner-friendly guide, you will delve into the intricacies of JavaScript&#39;s &lt;code&gt;try...catch&lt;/code&gt; mechanism, giving you a clear understanding of how to handle errors gracefully with useful examples. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/javascript-try-catch/01javascript-try-catch.jpg&quot; title=&quot;JavaScript Try Catch: A beginner-friendly introduction with useful examples&quot; alt=&quot;JavaScript Try Catch: A beginner-friendly introduction with useful examples&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/06/javascript-try-catch/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/06/javascript-try-catch/#the-need-for-try-catch&quot;&gt;The need for try catch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/06/javascript-try-catch/#how-it-works&quot;&gt;How it works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/06/javascript-try-catch/#using-try-catch-with-sync-js-code&quot;&gt;Using try catch with sync JS code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/06/javascript-try-catch/#utilize-try-catch-with-async-code&quot;&gt;Utilize try catch with async code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/06/javascript-try-catch/#try-catch-and-finally&quot;&gt;Try catch and finally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/06/javascript-try-catch/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;the-need-for-try-catch&quot; tabindex=&quot;-1&quot;&gt;The need for try catch &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/06/javascript-try-catch/#the-need-for-try-catch&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Bugs and errors are an inevitable part of programming, and JavaScript is no exception. Imagine you&#39;re building a web application, and suddenly it crashes because of unexpected input or a network issue. Frustrating, right? That&#39;s where the mighty &lt;code&gt;try...catch&lt;/code&gt; statement comes to your rescue!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;try...catch&lt;/code&gt; statement is a fundamental error-handling mechanism in JavaScript. It allows you to gracefully handle runtime errors, preventing your application from crashing and providing a smoother user experience.&lt;/p&gt;
&lt;p&gt;When I started programming, I was under the false assumption that a try catch could be replaced by an if-else, how wrong I was back then. In the next section, you will learn about how try catch and finally works for a visual point fo view.&lt;/p&gt;
&lt;h2 id=&quot;how-it-works&quot; tabindex=&quot;-1&quot;&gt;How it works &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/06/javascript-try-catch/#how-it-works&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;try catch&lt;/code&gt; statement in JavaScript works by dividing your code into two main blocks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;try block&lt;/strong&gt;: This block contains the code that you want to execute. It&#39;s the section where you anticipate potential errors might occur. Some of the code in this section may throw an Error or an Exception. Things don’t always go as expected especially if you have user input or you are calling an external resource like a file or an external API. The API might be down, or the file’s name might be wrong. In these cases, Node.js/JavaScript will throw errors, which will be caught in the next part, the catch block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;catch block&lt;/strong&gt;: This block is executed only if an error occurs within the &lt;code&gt;try&lt;/code&gt; block. It&#39;s where you handle the error and prevent your program from crashing. For instance, if you made a typo in the domain name of the API being called, it will result &lt;code&gt;TypeError&lt;/code&gt; if you are using fetch. In case, the catch block is not present it can potentially kill the node.js process or show an error on the browser console.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Optionally, you can include a third block, &lt;strong&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;finally&lt;/code&gt; block&lt;/strong&gt;: This block is executed regardless of whether an error occurred or not. It is used for cleaning up resources or performing actions that must happen after the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; blocks. For instance, this block is useful when you have a database connection taken from a pool of connections. You put your code to execute a database transaction, if all goes well the execution will never reach the catch part but if things hit the fan, the execution will land in the catch part. The code in the &lt;code&gt;finally&lt;/code&gt; block will always execute so it can be used to release the database connection back to the pool regardless of whether an error occurs or not.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&#39;s a simple flow chart that visually explains the workflow of the &lt;code&gt;try catch finally&lt;/code&gt; statement (made with Mermaid.js - &lt;a href=&quot;https://www.mermaidchart.com/raw/c7432fc6-4f7f-4043-b049-b6ef8692bab1?theme=light&amp;amp;version=v0.1&amp;amp;format=svg&quot;&gt;svg&lt;/a&gt; version):&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-try-catch/02try-catch-finally.jpg&quot; title=&quot;Try catch and finally shown visually in a flow chart&quot; alt=&quot;Try catch and finally shown visually in a flow chart&quot; /&gt;
&lt;p&gt;Try catch can be used with both sync and async code in JavaScript. If you want to learn about Sync, async JavaScript code with callbacks, promises and async await please read this &lt;a href=&quot;https://blog.appsignal.com/2022/11/09/how-to-handle-async-code-in-javascript.html&quot;&gt;blog post&lt;/a&gt;. In the next section, you will learn about a sync code example with try and catch using JavaScript.&lt;/p&gt;
&lt;h2 id=&quot;using-try-catch-with-sync-js-code&quot; tabindex=&quot;-1&quot;&gt;Using try catch with sync JS code &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/06/javascript-try-catch/#using-try-catch-with-sync-js-code&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s start with a basic example of using &lt;code&gt;try catch&lt;/code&gt; with synchronous code. One common use case is parsing JSON data, which can throw an error if the JSON string is invalid, for the example below the JSON is deliberately made invalid:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; jsonString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{&quot;key: &quot;value&quot;}&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; json &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jsonString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error parsing JSON string: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error stack: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error name: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SyntaxError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The error in the &lt;code&gt;JSON string&lt;/code&gt; is that the key named &lt;code&gt;key&lt;/code&gt; does not have a closing &lt;code&gt;”&lt;/code&gt; so this will always result in a &lt;code&gt;SyntaxError&lt;/code&gt; when a &lt;code&gt;JSON.parse&lt;/code&gt; is tried on the malformed JSON string. If you save the above code snipped at &lt;code&gt;sync.js&lt;/code&gt; and run it with Node.js (or run it on the browser console) it will result in:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-try-catch/03javascript-try-catch-sync.jpg&quot; title=&quot;Try catch sync execution in JavaScript - output&quot; alt=&quot;Try catch sync execution in JavaScript - output&quot; /&gt;
&lt;p&gt;Let’s analyze what happened here, first, you have set an invalid JSON string in the &lt;code&gt;const&lt;/code&gt; called &lt;code&gt;jsonString&lt;/code&gt;. Next, you start a try block and try to parse the invalid JSON string as a JSON object with &lt;code&gt;JSON.parse&lt;/code&gt;. Then you try to log the &lt;code&gt;key&lt;/code&gt; of that object, this line will not be reached as the &lt;code&gt;JSON.parse&lt;/code&gt; will throw an error.&lt;/p&gt;
&lt;p&gt;In the catch block, you catch the error with the name &lt;code&gt;err&lt;/code&gt;, after that you log the error’s message as a console error. Then you log the stack and name of the error as console error too. At the end, you check if the error is an instance of the type &lt;code&gt;SyntaxError&lt;/code&gt; which will result in true.&lt;/p&gt;
&lt;p&gt;If you want the code to never reach the catch block you can use &lt;code&gt;const jsonString = &#39;{&amp;quot;key”: &amp;quot;value&amp;quot;}&#39;;&lt;/code&gt; as the first line. In the next segment, you will see an example of asynchronous Javascript using async and await.&lt;/p&gt;
&lt;h2 id=&quot;utilize-try-catch-with-async-code&quot; tabindex=&quot;-1&quot;&gt;Utilize try catch with async code &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/06/javascript-try-catch/#utilize-try-catch-with-async-code&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Asynchronous code in JavaScript involves operations that don&#39;t execute immediately,&lt;br /&gt;
like fetching data from an API. Using &lt;code&gt;try catch&lt;/code&gt; with asynchronous code&lt;br /&gt;
requires understanding how &lt;a href=&quot;https://geshan.com.np/blog/2022/08/javascript-wait-1-second/#sleep-with-promise&quot;&gt;promises&lt;/a&gt; work. You can also read about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt;.catch&lt;/a&gt; and &lt;code&gt;.finaly&lt;/code&gt; that can be added to the promise object. But these days, using async await is much more popular than &lt;code&gt;promise().catch().finally()&lt;/code&gt; syntax. So the code below is with the native &lt;code&gt;fetch&lt;/code&gt; API to get some users from &lt;code&gt;https://jsonplaceholder.typicode.com/&lt;/code&gt; but with a twist (read error):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://jsonplaceholder.typicode.com1/users/1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;User data:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error fetching user:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error stack: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error name: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make it clear upfront, you could have used [IIFE]((&lt;a href=&quot;https://geshan.com.np/blog/2022/08/javascript-wait-1-second/#sleep-with-timers-in-node-15%2B&quot;&gt;https://geshan.com.np/blog/2022/08/javascript-wait-1-second/#sleep-with-timers-in-node-15%2B&lt;/a&gt;) with async await but to keep things simple above example uses a named function called &lt;code&gt;getUser&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;getUser&lt;/code&gt; async function starts with a get fetch call, the issue there is that the domain name is wrong. It has an extra &lt;code&gt;1&lt;/code&gt; appended after the &lt;code&gt;.com&lt;/code&gt; which will always result in the domain name not being resolved. So this means, the execution will never reach the line where the user data is being logged.&lt;/p&gt;
&lt;p&gt;It will always land in the &lt;code&gt;catch&lt;/code&gt; segment, and log the message of the error then the stack and name. After that, it will check if the instance of the error is &lt;code&gt;TypeError&lt;/code&gt; which will result in true. You can save the above code as &lt;code&gt;async.js&lt;/code&gt; and run with Node &lt;code&gt;18.+&lt;/code&gt; as native fetch was added to Node.js without the experimental flag in &lt;code&gt;18.0.0&lt;/code&gt;. It will result in:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-try-catch/04javascript-try-catch-async.jpg&quot; title=&quot;Try catch async execution in JavaScript - output&quot; alt=&quot;Try catch async execution in JavaScript - output&quot; /&gt;
&lt;p&gt;You can also run it on the console of your browser, which will give the same result as above. In the next section, you will learn about the handy finally block that always executes regardless of the error case occurring.&lt;/p&gt;
&lt;h2 id=&quot;try-catch-and-finally&quot; tabindex=&quot;-1&quot;&gt;Try catch and finally &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/06/javascript-try-catch/#try-catch-and-finally&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript &lt;code&gt;try...catch&lt;/code&gt; also supports an optional &lt;code&gt;finally&lt;/code&gt; block. The &lt;code&gt;finally&lt;/code&gt; block always executes, regardless of whether an error occurred or not. This is useful for cleanup tasks or closing resources. Below is the same example of the above &lt;code&gt;JSON.parse&lt;/code&gt; with the error adding a &lt;code&gt;finally&lt;/code&gt; block at the end:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; jsonString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{&quot;key: &quot;value&quot;}&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; json &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jsonString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error parsing JSON string: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error stack: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error name: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SyntaxError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;This will always execute&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you save this file as &lt;code&gt;sync-finally.js&lt;/code&gt; and run it with Node.js it will result in the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-try-catch/05javascript-try-catch-finally-sync.jpg&quot; title=&quot;Try catch finally sync execution in JavaScript - output&quot; alt=&quot;Try catch finally sync execution in JavaScript - output&quot; /&gt;
&lt;p&gt;The main difference here is the &lt;code&gt;finally&lt;/code&gt; part executed with the error case. Even if there was no error the &lt;code&gt;finally&lt;/code&gt; block would always execute. The &lt;code&gt;finally&lt;/code&gt; block can also be used in the &lt;code&gt;async&lt;/code&gt; code example with &lt;code&gt;async-await&lt;/code&gt;. You can find all the code examples in this &lt;a href=&quot;https://github.com/geshan/js-try-catch-finally&quot;&gt;GitHub repository&lt;/a&gt;. If you like using Axios in place of fetch, you can find a similar example with &lt;a href=&quot;https://geshan.com.np/blog/2022/11/axios-timeout/#example-with-axios-timeout-added&quot;&gt;Axios timeout&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also wrap the error or exception into your custom exception. For instance, if an API returns a specific error code for a wrong password like code &lt;code&gt;5522&lt;/code&gt; then you can check if the error has that code and wrap it into a custom &lt;code&gt;WrongPasswordError&lt;/code&gt; and rethrow it. You can use the &lt;code&gt;throw&lt;/code&gt; keyword to throw your Error or Exception. That could be a topic for a different blog post.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/06/javascript-try-catch/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript&#39;s &lt;code&gt;try catch&lt;/code&gt; statement is an invaluable tool for handling errors gracefully. It provides a structured way to anticipate and manage exceptions, preventing your code from crashing and ensuring a better user experience.&lt;/p&gt;
&lt;p&gt;By understanding the principles of &lt;code&gt;try catch&lt;/code&gt; and applying them judiciously, you can create robust and reliable JavaScript applications. Remember to leverage the &lt;code&gt;finally&lt;/code&gt; block for essential cleanup tasks, and don&#39;t shy away from utilizing &lt;code&gt;try catch&lt;/code&gt; in both synchronous and asynchronous code. In this guide, you learned how to use try…catch and finally in both sync and async JavaScript code with useful examples.&lt;/p&gt;
&lt;p&gt;Keep practicing and exploring different error-handling scenarios to become a master of error management in JavaScript. Embrace the power of &lt;code&gt;try catch&lt;/code&gt; and finally, let your code handle errors with elegance and resilience. Happy coding!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to rename a column in Postgres, from a simple to a real-life example</title>
		<link href="https://geshan.com.np/blog/2024/05/postgres-rename-column/"/>
		<updated>2024-05-26T11:42:37Z</updated>
		<id>https://geshan.com.np/blog/2024/05/postgres-rename-column/</id>
		<content type="html">&lt;p&gt;Renaming a column in Postgres might seem straightforward, but as your database grows and your application scales, it&#39;s crucial to consider the impact of these changes. A simple rename can cause downtime or even break your application if not executed correctly. This post delves into the intricacies of renaming a Postgres column, providing a clear path from a basic example to a real-world scenario with zero downtime.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/postgres-rename-column/01postgres-rename-column.jpg&quot; title=&quot;How to rename a column in Postgres, from a simple to a real-life example&quot; alt=&quot;How to rename a column in Postgres, from a simple to a real-life example&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#schema-changes-are-rare-but-needed&quot;&gt;Schema changes are rare but needed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#example-of-customer-table-simple-example&quot;&gt;Example of customer table simple example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#rename-phone-to-contact-phone&quot;&gt;Rename phone to contact_phone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#steps-to-do-a-zero-downtime-column-rename&quot;&gt;Steps to do a zero downtime column rename&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#add-the-new-column&quot;&gt;Add the new column&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#backfill-the-data&quot;&gt;Backfill the data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#update-application-code&quot;&gt;Update application code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#drop-the-old-column&quot;&gt;Drop the old column&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#important-considerations-for-zero-downtime-rename&quot;&gt;Important Considerations for Zero Downtime Rename&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;schema-changes-are-rare-but-needed&quot; tabindex=&quot;-1&quot;&gt;Schema changes are rare but needed &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#schema-changes-are-rare-but-needed&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the world of relational databases, schema changes are rare but inevitable. As your application evolves, so do your data requirements. Generally when starting a new application schema changes are frequent, once the application requirements are settled the database schema changes become infrequent. Renaming a column in Postgres is a common operation, often driven by the need for better clarity, consistency, and to reflect changes in the underlying business logic.&lt;/p&gt;
&lt;p&gt;While Postgres provides the &lt;code&gt;ALTER TABLE RENAME COLUMN&lt;/code&gt; command to facilitate this, the execution needs careful planning, especially in a production environment where downtime is a significant concern. This post provides a practical approach, walking you through the steps to rename a column safely and efficiently.&lt;/p&gt;
&lt;h2 id=&quot;example-of-customer-table-simple-example&quot; tabindex=&quot;-1&quot;&gt;Example of customer table simple example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#example-of-customer-table-simple-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s begin with a simplified scenario. Imagine you have a &lt;code&gt;customer&lt;/code&gt; table with the following structure:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; customer &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;id &lt;span class=&quot;token keyword&quot;&gt;SERIAL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;first_name &lt;span class=&quot;token keyword&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;last_name &lt;span class=&quot;token keyword&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;email &lt;span class=&quot;token keyword&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;phone &lt;span class=&quot;token keyword&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the task is to rename phone to &lt;code&gt;contact_phone&lt;/code&gt; on the above customer table. You will learn how to do it next with a simple example. The example assumes that there are almost no users on the web application so any changes done will not impact anyone.&lt;/p&gt;
&lt;h2 id=&quot;rename-phone-to-contact_phone&quot; tabindex=&quot;-1&quot;&gt;Rename phone to contact_phone &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#rename-phone-to-contact_phone&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now, imagine you want to rename the &lt;code&gt;phone&lt;/code&gt; column to &lt;code&gt;contact_phone&lt;/code&gt;. In this basic example, you could execute the following SQL command:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; customer &lt;span class=&quot;token keyword&quot;&gt;RENAME&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;COLUMN&lt;/span&gt; phone &lt;span class=&quot;token keyword&quot;&gt;TO&lt;/span&gt; contact_phone&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will rename the &lt;code&gt;phone&lt;/code&gt; column to &lt;code&gt;conctact_phone&lt;/code&gt;. But, if this is a large table with millions of rows, it would lock the table for the duration of the rename operation, potentially causing downtime for your application.&lt;/p&gt;
&lt;p&gt;As indicated earlier, this is a scenario where there are 10s of rows in the &lt;code&gt;customer&lt;/code&gt; table. Less than 10 people use the application at this stage. Essentially the application is tested only internally and downtime is expected and normal.&lt;/p&gt;
&lt;p&gt;In the next section, you will learn how to take steps that would cause zero to minimal downtime if the database table had thousands or even millions of rows. On top of that, if the application was used by thousands of people each day.&lt;/p&gt;
&lt;h2 id=&quot;steps-to-do-a-zero-downtime-column-rename&quot; tabindex=&quot;-1&quot;&gt;Steps to do a zero downtime column rename &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#steps-to-do-a-zero-downtime-column-rename&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In a real-world scenario, a zero-downtime column rename involves multiple steps, ensuring minimal impact on your running application. Imagine you have a customer table with millions of rows and thousands of users using your application each day. Let&#39;s delve into these steps:&lt;/p&gt;
&lt;h3 id=&quot;add-the-new-column&quot; tabindex=&quot;-1&quot;&gt;Add the new column &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#add-the-new-column&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Start by adding the new column with the desired name. For our &lt;code&gt;customer&lt;/code&gt; table example, we will add a column called &lt;code&gt;contact_phone&lt;/code&gt; column.&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; customer &lt;span class=&quot;token keyword&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;COLUMN&lt;/span&gt; contact_phone &lt;span class=&quot;token keyword&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that, the application will write to both columns for some time. Make sure the newly added column is nullable to avoid any errors when inserting newer records.&lt;/p&gt;
&lt;h3 id=&quot;backfill-the-data&quot; tabindex=&quot;-1&quot;&gt;Backfill the data &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#backfill-the-data&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next, you need to populate the newly added column with data from the old column. You can do this using an &lt;code&gt;UPDATE&lt;/code&gt; statement:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;UPDATE&lt;/span&gt; customer &lt;span class=&quot;token keyword&quot;&gt;SET&lt;/span&gt; contact_phone &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; phone&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This operation will take seconds to minutes depending on how many rows the customer table has. You will need to account for that. Another easier way to do it with a limit enforced with &lt;a href=&quot;https://www.crunchydata.com/blog/simulating-update-or-delete-with-limit-in-postgres-ctes-to-the-rescue#update-statements&quot;&gt;CTEs&lt;/a&gt;. As discussed in the &lt;a href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/&quot;&gt;delete postgres with limit&lt;/a&gt; post, it follows a similar approach where you can craft a SQL with a useful where clause to update say 10000 rows at a time and repeat the process multiple times.&lt;/p&gt;
&lt;p&gt;By updating 10000 rows in one batch you will not block the table by doing a big update of millions of rows in one go. Reading more about &lt;a href=&quot;https://www.citusdata.com/blog/2018/02/15/when-postgresql-blocks/&quot;&gt;locking in Postgres&lt;/a&gt; will help you understand why big updates can be problematic. This batch update is best done from the application level.&lt;/p&gt;
&lt;p&gt;Next, you will need to update the writes from the application code.&lt;/p&gt;
&lt;h3 id=&quot;update-application-code&quot; tabindex=&quot;-1&quot;&gt;Update application code &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#update-application-code&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Modify your application code to use the new column name (&lt;code&gt;contact_phone&lt;/code&gt;) instead of the old one (&lt;code&gt;phone&lt;/code&gt;). This step might involve updating queries, data access layers, and any other components interacting with the database.&lt;/p&gt;
&lt;p&gt;In the case of writes it will be best to write to both columns for a while to be safe and after a while only write to the new column &lt;code&gt;contact_phone&lt;/code&gt;. In case of reads, the code can check if the &lt;code&gt;contact_phone&lt;/code&gt; is available using that column else fallback to &lt;code&gt;phone&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After that, you can change the code to not read or write from the old &lt;code&gt;phone&lt;/code&gt; column. Depending on the number of rows this could take hours to days. Then you can change the code to read and write only on the new column &lt;code&gt;contact_phone&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you are satisfied that the old column &lt;code&gt;phone&lt;/code&gt; is not used in any reads or writes, you can drop the old column. For deleting data or dropping columns is always good to take a full database backup just in case if something happens the data is not lost.&lt;/p&gt;
&lt;h3 id=&quot;drop-the-old-column&quot; tabindex=&quot;-1&quot;&gt;Drop the old column &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#drop-the-old-column&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once you are confident that the application is fully utilizing the new column and the old column is no longer needed, you can drop it:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; customer &lt;span class=&quot;token keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;COLUMN&lt;/span&gt; phone&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This step should only be done when you are fully confident that the old column &lt;code&gt;phone&lt;/code&gt; is not used in any read or write operation. Make sure your reporting database and related application or dashboard are updated with this change else your reports will break.&lt;/p&gt;
&lt;p&gt;The whole process can be depicted in a single picture with steps as below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/postgres-rename-column/02postgres-rename-column-zdd.jpg&quot; title=&quot;States of applicaiton code and databaes table to achive zero (minimal) downtime&quot; alt=&quot;States of applicaiton code and databaes table to achive zero (minimal) downtime&quot; /&gt;
&lt;p&gt;In the next section, you will learn about some considerations for the zero downtime column rename.&lt;/p&gt;
&lt;h2 id=&quot;important-considerations-for-zero-downtime-rename&quot; tabindex=&quot;-1&quot;&gt;Important Considerations for Zero Downtime Rename &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#important-considerations-for-zero-downtime-rename&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are some important considerations to make for zero downtime column renames:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Large Tables: For tables with millions of rows, backfilling data can be time-consuming. Consider using batched updates from the application level to minimize downtime.&lt;/li&gt;
&lt;li&gt;Indexes and Constraints: Remember to recreate any indexes or constraints associated with the old column on the new column. This will help with the performance of the application, be mindful about the indexes and constraints.&lt;/li&gt;
&lt;li&gt;Application Testing:  Thoroughly test your application after each step to ensure everything functions correctly with the new column name. Make sure the data is written correctly on the new column and read from it properly.&lt;/li&gt;
&lt;li&gt;Transaction Control: Wrap all operations within a transaction to maintain data consistency in case of errors. Make sure that if there is a change everything is updated or nothing is updated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next, you will get a quick recap of this whole post.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/postgres-rename-column/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Renaming a column in Postgres can be done easily with the &lt;code&gt;ALTER TABLE RENAME COLUMN&lt;/code&gt; command in simple scenarios. However, for a production database with high traffic, a zero-downtime approach is essential. By following the steps outlined above, you can execute a column rename with minimal disruption to your application. Always remember to test thoroughly, and consider using tools like feature flags to gradually introduce changes and minimize risk.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use RabbitMQ with Docker and Docker Compose; a beginner’s guide</title>
		<link href="https://geshan.com.np/blog/2024/05/rabbitmq-docker/"/>
		<updated>2024-05-08T11:51:47Z</updated>
		<id>https://geshan.com.np/blog/2024/05/rabbitmq-docker/</id>
		<content type="html">&lt;p&gt;RabbitMQ is one of the most popular open-source message brokers in use today. Knowingly, unknowingly you would be using RabiitMQ under the hood of many applications that you use daily. In this beginner-friendly post, you will learn how to use RabbitMQ with Docker and Docker Compose, let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker/01rabbitmq-docker.jpg&quot; title=&quot;How to use RabbitMQ with Docker and Docker Compose; a beginner’s guide&quot; alt=&quot;How to use RabbitMQ with Docker and Docker Compose; a beginner’s guide&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/rabbitmq-docker/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/rabbitmq-docker/#what-is-rabbitmq&quot;&gt;What is RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/rabbitmq-docker/#why-use-rabbitmq&quot;&gt;Why use RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/rabbitmq-docker/#popularity-of-rabbitmq&quot;&gt;Popularity of RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/rabbitmq-docker/#run-rabbitmq-with-docker&quot;&gt;Run RabbitMQ with Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/rabbitmq-docker/#make-running-rabbitmq-easier-with-docker-compose&quot;&gt;Make running RabbitMQ easier with Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/05/rabbitmq-docker/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-rabbitmq&quot; tabindex=&quot;-1&quot;&gt;What is RabbitMQ &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/rabbitmq-docker/#what-is-rabbitmq&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;RabbitMQ is a message broker software that acts as a middleman for different parts of your application. It helps you send and receive messages between different parts of your application reliably and efficiently. RabbitMQ is open source and based on the Advanced Message Queuing Protocol (AMQP). The queue part is first in first out (FIFO), where the order of the incoming messages is maintained. The official definition of &lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt; is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RabbitMQ is a reliable and mature messaging and streaming broker, which is easy to deploy on cloud environments, on-premises, and on your local machine. It is currently used by millions worldwide.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Think of RabbitMQ as a post office for your application. When one part of your application wants to send a message to another part, it sends the message to RabbitMQ. RabbitMQ then stores the message and delivers it to the correct recipient.&lt;/p&gt;
&lt;h2 id=&quot;why-use-rabbitmq&quot; tabindex=&quot;-1&quot;&gt;Why use RabbitMQ &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/rabbitmq-docker/#why-use-rabbitmq&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;RabbitMQ is useful for a variety of tasks, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Asynchronous processing:&lt;/strong&gt; RabbitMQ can be used to offload tasks that don&#39;t need to be done immediately, such as sending emails or processing images. This can help to improve the performance and responsiveness of your application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Microservices communication:&lt;/strong&gt; RabbitMQ can be used to facilitate communication between different microservices in a microservices architecture. This can help to decouple your microservices and make them more independent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task queues:&lt;/strong&gt; RabbitMQ can be used to create task queues, which are used to distribute tasks among multiple workers. This can help to improve the scalability and reliability of your application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RabbitMQ is particularly useful in a microservices environment. Microservices are a software architecture style that structures an application as a collection of loosely coupled services. RabbitMQ can be used to facilitate communication between these services, allowing them to be independently developed, deployed, and scaled.&lt;/p&gt;
&lt;h2 id=&quot;popularity-of-rabbitmq&quot; tabindex=&quot;-1&quot;&gt;Popularity of RabbitMQ &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/rabbitmq-docker/#popularity-of-rabbitmq&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;RabbitMQ is one of the most popular message brokers available. It is used by a wide variety of organizations, including small startups and large enterprises. RabbitMQ is a popular choice due to its reliability, scalability, and ease of use.&lt;/p&gt;
&lt;p&gt;In terms of popularity, RabbitMQ is more popular than ZeroMQ, ActiveMQ, and RocketMQ. However, Kafka is more popular than RabbitMQ as per &lt;a href=&quot;https://trends.google.com/trends/explore?date=2019-04-30%202024-04-30&amp;amp;q=rabbitmq,zeromq,activemq,rocketmq&amp;amp;hl=en&quot;&gt;Google Trends&lt;/a&gt; data. This can be seen in the graph below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker/02rabbitmq-popularity.jpg&quot; title=&quot;RabbitMQ is popular than it&#39;s competitor in the past 5 years (2019-2024)&quot; alt=&quot;RabbitMQ is popular than it&#39;s competitor in the past 5 years (2019-2024)&quot; /&gt;
&lt;p&gt;Kafka&#39;s popularity might be due to its ability to handle high-throughput data streams and its use in big data applications. Still, RabbitMQ is a great choice for most use cases, especially for smaller applications and microservices.&lt;/p&gt;
&lt;p&gt;You can also get managed RabbitMQ from &lt;a href=&quot;https://cloudamqp.com/&quot;&gt;Cloud AMQP&lt;/a&gt; or &lt;a href=&quot;https://tanzu.vmware.com/rabbitmq/oss&quot;&gt;VMware Tanzu RabbitMQ&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;run-rabbitmq-with-docker&quot; tabindex=&quot;-1&quot;&gt;Run RabbitMQ with Docker &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/rabbitmq-docker/#run-rabbitmq-with-docker&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Docker is a containerization platform that allows you to package your applications and their dependencies into containers. Containers are isolated environments that can be run on any system that has Docker installed. This makes it easy to deploy and run your applications consistently and reliably.&lt;/p&gt;
&lt;p&gt;To run RabbitMQ with Docker, you can use the official RabbitMQ Docker image. The image is available in several different flavors, including a basic image, an image with the management plugin, and an image with the shovel plugin.&lt;/p&gt;
&lt;p&gt;The management plugin provides a web-based user interface for managing your RabbitMQ server. The shovel plugin can be used to move messages between different RabbitMQ servers or clusters.&lt;/p&gt;
&lt;p&gt;To run RabbitMQ with the management plugin, you can use the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--hostname&lt;/span&gt; rabbitmq &lt;span class=&quot;token parameter variable&quot;&gt;--name&lt;/span&gt; rabbit-mq &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15672&lt;/span&gt;:15672 &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5672&lt;/span&gt;:5672 rabbitmq:3-management&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will start a RabbitMQ container in detached mode (-d) with the hostname &lt;code&gt;rabbitmq&lt;/code&gt; and the name &lt;code&gt;rabbit-mq&lt;/code&gt;. It will also map the container&#39;s ports 15672 and 5672 to the host&#39;s ports 15672 and 5672, respectively. Port 15672 is used for the management plugin, and port 5672 is used for the AMQP protocol.&lt;br /&gt;
When you run it, it will give an output like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker/03rabbitmq-docker-run.jpg&quot; title=&quot;RabbitMQ running with the docker run command in not detached mode&quot; alt=&quot;RabbitMQ running with the docker run command in not detached mode&quot; /&gt;
&lt;p&gt;You can also run the container with a &lt;code&gt;-d&lt;/code&gt; parameter to detach the output. As no volumes are attached the messages will be deleted when the container restarts.&lt;/p&gt;
&lt;p&gt;Once the container is running, you can access the management plugin by visiting &lt;a href=&quot;http://localhost:15672/&quot;&gt;http://localhost:15672&lt;/a&gt; in your web browser. The default username and password are both guest as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker/04rabbitmq-mgmt-plugin.jpg&quot; title=&quot;RabbitMQ running locally - management plugin login screen&quot; alt=&quot;RabbitMQ running locally - management plugin login screen&quot; /&gt;
&lt;p&gt;After you log in, you can see a dashboard as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker/05rabbitmq-mgmt-dashboard.jpg&quot; title=&quot;RabbitMQ running locally - management dashboard after logging in&quot; alt=&quot;RabbitMQ running locally - management dashboard after logging in&quot; /&gt;
&lt;p&gt;Next, you will learn how to run Rabbit MQ with docker-compose.&lt;/p&gt;
&lt;h2 id=&quot;make-running-rabbitmq-easier-with-docker-compose&quot; tabindex=&quot;-1&quot;&gt;Make running RabbitMQ easier with Docker Compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/rabbitmq-docker/#make-running-rabbitmq-easier-with-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Docker Compose is a tool for defining and running multi-container Docker applications. It allows you to define your application&#39;s services in a YAML file and then start and stop all of the services with a single command.&lt;/p&gt;
&lt;p&gt;To run RabbitMQ with Docker Compose, you can create a docker-compose.yml file with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&quot;3.9&quot;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  rabbitmq:&lt;br /&gt;    image: rabbitmq:3-management&lt;br /&gt;    container_name: rabbitmq&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token number&quot;&gt;5672&lt;/span&gt;:5672&lt;br /&gt;      - &lt;span class=&quot;token number&quot;&gt;15672&lt;/span&gt;:15672&lt;br /&gt;    volumes:&lt;br /&gt;      - rabbitmq_data:/var/lib/rabbitmq&lt;br /&gt;volumes:&lt;br /&gt;  rabbitmq_data:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This docker-compose.yml file defines a service called &lt;code&gt;rabbitmq&lt;/code&gt; that uses the rabbitmq:3-management image. It also maps the container&#39;s ports 5672 and 15672 to the host&#39;s ports 5672 and 15672, respectively. Finally, it creates a volume called rabbitmq_data that is used to persist the RabbitMQ data.&lt;/p&gt;
&lt;p&gt;To start RabbitMQ with Docker Compose, you can run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker compose up
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will start the RabbitMQ container. You can run it in detached mode with &lt;code&gt;docker compose up -d&lt;/code&gt; if you like. It will give the following output if everything is fine:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker/06rabbitmq-docker-compose-up.jpg&quot; title=&quot;RabbitMQ running locally - with docker compose up&quot; alt=&quot;RabbitMQ running locally - with docker compose up&quot; /&gt;
&lt;p&gt;Once the container is running, you can access the management plugin by visiting &lt;a href=&quot;http://localhost:15672/&quot;&gt;http://localhost:15672&lt;/a&gt; in your web browser sane as running it with &lt;code&gt;docker run&lt;/code&gt;. If you are looking for a comprehensive producer and consumer example, please read this post on &lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/&quot;&gt;RabiitMQ and Node.js&lt;/a&gt; with Docker and Docker compose.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/05/rabbitmq-docker/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;RabbitMQ is a powerful and versatile message broker that can be used for a variety of tasks. Running RabbitMQ with Docker and Docker Compose makes it easy to deploy and manage your RabbitMQ server.&lt;/p&gt;
&lt;p&gt;I hope this guide has helped you get started with RabbitMQ and Docker. If you have any questions, please feel free to leave a comment below.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to create an e-commerce product description generator using Gemini and Vertex AI</title>
		<link href="https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/"/>
		<updated>2024-04-29T10:54:47Z</updated>
		<id>https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/</id>
		<content type="html">&lt;p&gt;Gen AI can be utilized to build useful things. In this post, you will build an e-commerce product description generator using Google’s Gemini Pro vision LLM over Vertex AI on the Google Cloud Platform (GCP). Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/01e-commerce-product-description-generator.jpg&quot; title=&quot;How to create an e-commerce product description generator using Gemini and Vertex AI with Python code example&quot; alt=&quot;How to create an e-commerce product description generator using Gemini and Vertex AI with Python code example&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#process-of-writing-product-descriptions-for-e-commerce-websites&quot;&gt;Process of writing product descriptions for e-commerce websites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#vertex-ai-on-gcp&quot;&gt;Vertex AI on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#prompting&quot;&gt;Prompting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#name-and-save-the-prompt&quot;&gt;Name and save the prompt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#gemini-configurations&quot;&gt;Gemini configurations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#run-generated-python-code&quot;&gt;Run generated Python Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#whats-next&quot;&gt;What&#39;s next&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;process-of-writing-product-descriptions-for-e-commerce-websites&quot; tabindex=&quot;-1&quot;&gt;Process of writing product descriptions for e-commerce websites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#process-of-writing-product-descriptions-for-e-commerce-websites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before you get your hands dirty with Vertex AI and some code, let’s understand the process of wiring product descriptions for any product shown on an e-commerce website. Models are scheduled to take photographs wearing the products, every product is photographed in a photo studio.&lt;/p&gt;
&lt;p&gt;Then a copywriter has a look at the retouched photographs possibly with the product by the side and writes a product description that you see on the website. It is a long process and if the website has hundreds of products going online each day it can be a labor-intensive, time-consuming, and error-prone process as it is mostly manual. It can be summed up visually as:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/30prod-desc-process.jpg&quot; title=&quot;The general process of writing product descripitons&quot; alt=&quot;The general process of writing product descripitons&quot; /&gt;
&lt;p&gt;Now, imagine you have a system where you can upload pictures and prompt the system to get the product description for that particular product. The generated product descriptions will not be perfect but it will get you (or the copywriter) 80% of the way. That is what you are doing to build in this tutorial.&lt;/p&gt;
&lt;p&gt;To do this you will use the Gemini Pro LLM over Vertex AI, you will also get the basic code that can be deployed as a service. You can find some more context in these &lt;a href=&quot;https://docs.google.com/presentation/d/1WboHu9zHIQLoiW_RO20KXLQb6twLdGLBNy_e3iadk94/edit?usp=sharing&quot;&gt;slides&lt;/a&gt;. In the next section, you will learn about the prerequisites to build the e-commerce product description generator.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To begin, you will need to have the following pre-requisites sorted:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have a working Google Cloud account (with some credit)&lt;/li&gt;
&lt;li&gt;Download this &lt;a href=&quot;https://gw.geshan.com.np/assets/images.zip&quot;&gt;zip file&lt;/a&gt; on your machine, for the product images. Please decompress it after downloading.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, be aware of the &lt;a href=&quot;https://cloud.google.com/vertex-ai/generative-ai/pricing&quot;&gt;Vertex AI and Gemini Pricing&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;Next, you will create a GCP project to build your e-commerce product description generator. You might need 20-30 minutes to create the basic product description generator and have a proof of concept code for it as shown below.&lt;/p&gt;
&lt;h2 id=&quot;vertex-ai-on-gcp&quot; tabindex=&quot;-1&quot;&gt;Vertex AI on GCP &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#vertex-ai-on-gcp&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are the steps to create a new GCP project (if you have an existing one you can use that too).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to your Google Cloud Console and &lt;a href=&quot;https://console.cloud.google.com/projectcreate&quot;&gt;Create a new project&lt;/a&gt; called &lt;code&gt;gemini-ecomm&lt;/code&gt; or anything relevant as seen below:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/16new-project.jpg&quot; title=&quot;Create a new GCP Project&quot; alt=&quot;Create a new GCP Project&quot; /&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;Make sure you have selected the project created in Step 1 if you have multiple projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to Vertex AI from your Google Cloud Console, the easiest way to do it would be to search for &lt;code&gt;vertex&lt;/code&gt; on the search bar as seen below:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/01seach-vertex-on-gcp.jpg&quot; title=&quot;Search vertex on GCP console&quot; alt=&quot;Search vertex on GCP console&quot; /&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;code&gt;Vertex AI&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the Vertex AI page, then &amp;quot;Enable all recommended APIs&amp;quot; as seen below (it will take some time):&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/18enable-apis.jpg&quot; title=&quot;Enable all related Vertex AI APIs&quot; alt=&quot;Enable all related Vertex AI APIs&quot; /&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;After the APIs are enabled, click on &lt;code&gt;Multimodal&lt;/code&gt; found on the left menu&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/02multimodal.jpg&quot; title=&quot;Click on Multimodal on Vertex AI page&quot; alt=&quot;Click on Multimodal on Vertex AI page&quot; /&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;On the Multimodal page, click &lt;code&gt;Open&lt;/code&gt; on the &amp;quot;Prompt design (single turn)&amp;quot; box as follows:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/03single-turn.jpg&quot; title=&quot;Click on Open for Prompt design (Single Turn)&quot; alt=&quot;Click on Open for Prompt design (Single Turn)&quot; /&gt;
&lt;h2 id=&quot;prompting&quot; tabindex=&quot;-1&quot;&gt;Prompting &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#prompting&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;On the Prompt experiment page, please make sure you have the &lt;code&gt;gemini-1.0-pro-vision-001&lt;/code&gt; model selected. Then, paste the following prompt in the &lt;code&gt;Prompt&lt;/code&gt; text box:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;As an expert e-commerce copywriter, analyze the uploaded images of
women&#39;s jeans and write a product description for a low to mid-end 
fashion e-commerce website. Please include the details about the 
comfortable to wear jeans and do not include any details about the 
price. Make sure that the copy is written in an engaging and friendly tone.
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;Then upload the images you find in the repository or the images folder of the unzipped &lt;code&gt;images.zip&lt;/code&gt; file. Navigate to &lt;code&gt;womens-jeans-photos&lt;/code&gt; folder after clicking the &lt;code&gt;Insert Media&lt;/code&gt; option on the right side of the &lt;code&gt;Prompt&lt;/code&gt; textbox. Then upload all Once all the 8 images, it will look something like the below:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/04prompt-ready.jpg&quot; title=&quot;The prompt with the images upload&quot; alt=&quot;The prompt with the images upload&quot; /&gt;
&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;After that hit the &lt;code&gt;Submit&lt;/code&gt; button to test out the prompt with the uploaded images, you should get a response similar to the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/05prompt-response.jpg&quot; title=&quot;The response to the prompt with product description&quot; alt=&quot;The response to the prompt with product description&quot; /&gt;
&lt;h2 id=&quot;name-and-save-the-prompt&quot; tabindex=&quot;-1&quot;&gt;Name and save the prompt &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#name-and-save-the-prompt&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;At this point, it would be a good idea to save your prompt (with images). To do this, click the &lt;code&gt;pen&lt;/code&gt; icon beside &lt;code&gt;Untitled prompt&lt;/code&gt; above the prompt text box, then type &lt;code&gt;e-commerce-product-desc-generator&lt;/code&gt; the click anywhere, it will look like the below while editing:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/06name-prompt.jpg&quot; title=&quot;Name the prompt&quot; alt=&quot;Name the prompt&quot; /&gt;
&lt;ol start=&quot;12&quot;&gt;
&lt;li&gt;As you have named the prompt, you can save it. To save the prompt click &lt;code&gt;Save&lt;/code&gt; on the top left part of the right sidebar as shown below:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/07save-button.jpg&quot; title=&quot;Save button for the prompt&quot; alt=&quot;Save button for the prompt&quot; /&gt;
&lt;ol start=&quot;13&quot;&gt;
&lt;li&gt;Then, select the region (it is ok to choose us-central1) on the overlay window and save the prompt.&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/08save-prompt-region.jpg&quot; title=&quot;Save the prompt selecting a region&quot; alt=&quot;Save the prompt selecting a region&quot; /&gt;
&lt;p&gt;All saved prompts will be accessible in your &lt;a href=&quot;https://console.cloud.google.com/vertex-ai/generative/multimodal/my-prompts?hl=en-AU&quot;&gt;My Prompts&lt;/a&gt; page.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/09my-prompts.jpg&quot; title=&quot;Save the prompt selecting a region&quot; alt=&quot;Save the prompt selecting a region&quot; /&gt;
&lt;ol start=&quot;14&quot;&gt;
&lt;li&gt;Hurray! The basic e-commerce product description generator is working. Now, you will change some settings to make it better. You can go back to the prompt editing page by clicking the &lt;code&gt;Prompt Name&lt;/code&gt; if you are on the &lt;code&gt;My Prompts&lt;/code&gt; page.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;gemini-configurations&quot; tabindex=&quot;-1&quot;&gt;Gemini configurations &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#gemini-configurations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol start=&quot;15&quot;&gt;
&lt;li&gt;In terms of configurations, for Gemini 1.0 pro vision there are 4 options you can configure. Those four are explained in plain words below:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Temperature (Randomness/Creativity/Spice)&lt;/strong&gt;: Imagine a roulette wheel (randomness). A high temperature increases the spin&#39;s randomness, affecting the chosen word (output).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Output Token Limit (Length)&lt;/strong&gt;: This is like a set word limit (length) for your text. It controls how many words the LLM generates in total.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Top K (Choice)&lt;/strong&gt;: Think of this as picking from a shortlist (choice) of the most likely words. A lower K restricts the options for the next word.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Top P (Probability)&lt;/strong&gt;: This is like a probability wheel (probability). It influences the LLM to pick the next word based on its likelihood (probability), not just being the most likely.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is a configuration you can try out, the right settings for this configuration depend on how you want the output to be shaped by Gemini:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/10gemini-configs.jpg&quot; title=&quot;4 configs for the Gemini pro vision LLM&quot; alt=&quot;4 configs for the Gemini pro vision LLM&quot; /&gt;
&lt;ol start=&quot;16&quot;&gt;
&lt;li&gt;It is also important to set up the &lt;code&gt;Safety Settings&lt;/code&gt; correctly as per your use case, for now, we will set it at maximum safety (Responsible AI). As seen below, the safety settings (found on the right sidebar are self-explanatory)&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/11safety-settings.jpg&quot; title=&quot;Gemini safety settings&quot; alt=&quot;Gemini safety settings&quot; /&gt;
&lt;ol start=&quot;17&quot;&gt;
&lt;li&gt;You can also tweak the prompt text to make it better, below is another version of the prompt:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;As an expert e-commerce copywriter, analyze the uploaded images of women&#39;s
jeans and write a product description for a low to mid-end fashion e-commerce
website. Please include the details about the comfortable to wear clothing and
do not include any details about the price. Make sure that the copy is written
in an engaging and direct tone.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can play around with the prompt and make it more flexible or more specific as per your goals.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The next step will involve some code.&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;run-generated-python-code&quot; tabindex=&quot;-1&quot;&gt;Run generated Python Code &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#run-generated-python-code&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol start=&quot;18&quot;&gt;
&lt;li&gt;If you want to create an API for the e-commerce description generator or want to have more control over what the LLM is called, you can generate code and run it on a Google Cloud Platform service like Google Cloud Run. To generate code, click the &lt;code&gt;&amp;lt;&amp;gt; Get Code&lt;/code&gt; link which shows a slider on the right side as follows:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/12get-code.jpg&quot; title=&quot;Get code for your Gemini experiment&quot; alt=&quot;Get code for your Gemini experiment&quot; /&gt;
&lt;p&gt;For this workshop, you will use the Node.js code and try it out. For that, you will use Cloud Shell and Cloud Shell Editor.&lt;/p&gt;
&lt;ol start=&quot;19&quot;&gt;
&lt;li&gt;Click &lt;code&gt;Activate Cloud Shell&lt;/code&gt; toward the top right corner of the screen as seen below:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/19activate-cloud-shell.jpg&quot; title=&quot;Activate Cloud Shell&quot; alt=&quot;Activate Cloud Shell&quot; /&gt;
&lt;ol start=&quot;20&quot;&gt;
&lt;li&gt;In the Cloud shell window, click &lt;code&gt;Open Editor&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/20open-editor.jpg&quot; title=&quot;Open editor&quot; alt=&quot;Open editor&quot; /&gt;
&lt;ol start=&quot;21&quot;&gt;
&lt;li&gt;This will take some time and open up the Google Cloud Shell Editor which looks very similar to VS Code. In the Editor click &lt;code&gt;Hamburger Menu &amp;gt; Terminal &amp;gt; New Terminal&lt;/code&gt; as follows:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/21open-terminal.jpg&quot; title=&quot;Open terminal in editor&quot; alt=&quot;Open terminal in editor&quot; /&gt;
&lt;ol start=&quot;22&quot;&gt;
&lt;li&gt;In the editor&#39;s terminal, execute &lt;code&gt;mkdir projects &amp;amp;&amp;amp; cd projects &amp;amp;&amp;amp; mkdir gemini-workshop &amp;amp;&amp;amp; cd gemini-workshop&lt;/code&gt; and then &lt;code&gt;pip3 install --upgrade google-cloud-aiplatform&lt;/code&gt; :&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/22run-commands-python.jpg&quot; title=&quot;Commands executed&quot; alt=&quot;Commands executed&quot; /&gt;
&lt;ol start=&quot;23&quot;&gt;
&lt;li&gt;After the vertex AI Python package is installed it will look like the below:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/23pip3-install-ok.jpg&quot; title=&quot;Install Vertex AI Python package&quot; alt=&quot;Install Vertex AI Python package&quot; /&gt;
&lt;ol start=&quot;24&quot;&gt;
&lt;li&gt;After that you will load the folder in the project, go to &lt;code&gt;Hamburger Menu &amp;gt; File &amp;gt; Open Folder&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/24load-project.jpg&quot; title=&quot;Load project to Cloud shell editor&quot; alt=&quot;Load project to Cloud shell editor&quot; /&gt;
&lt;ol start=&quot;25&quot;&gt;
&lt;li&gt;Then type in &lt;code&gt;projects/gem&lt;/code&gt; and select the &lt;code&gt;gemini-workshop&lt;/code&gt; option and click &lt;code&gt;OK&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/25select-folder-python.jpg&quot; title=&quot;Select the right folder&quot; alt=&quot;Select the right folder&quot; /&gt;
&lt;ol start=&quot;26&quot;&gt;
&lt;li&gt;It will load the folder on the Cloud Shell editor, after that, to add a new file click the &lt;code&gt;file+&lt;/code&gt; icon beside &lt;code&gt;GEMINI-WORKSHOP&lt;/code&gt; and name it &lt;code&gt;gemini.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/26new-file-python.jpg&quot; title=&quot;Create the gemini.py file&quot; alt=&quot;Create the gemini.py file&quot; /&gt;
&lt;ol start=&quot;27&quot;&gt;
&lt;li&gt;For the contents of the &lt;a href=&quot;http://gemini.py/&quot;&gt;gemini.py&lt;/a&gt;, click &lt;code&gt;&amp;lt;&amp;gt;GET CODE&lt;/code&gt; on the Vertex AI Editor screen, while on the &lt;code&gt;Python&lt;/code&gt; option copy the code into a file called &lt;code&gt;gemini.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/13copy-python-code.jpg&quot; title=&quot;Get Python code for e-commerce descripiton generator&quot; alt=&quot;Get Python code for e-commerce descripiton generator&quot; /&gt;
&lt;ol start=&quot;28&quot;&gt;
&lt;li&gt;Paste the code in the &lt;code&gt;gemini.py&lt;/code&gt; empty file and save it:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/27paste-code-python.jpg&quot; title=&quot;Paste copied code&quot; alt=&quot;Paste copied code&quot; /&gt;
&lt;ol start=&quot;29&quot;&gt;
&lt;li&gt;To run the code and test it out, again open the terminal from &lt;code&gt;Hamburger Menu &amp;gt; Terminal &amp;gt; New Terminal&lt;/code&gt; and type in &lt;code&gt;python gemini.py&lt;/code&gt; then hit enter. It will ask you to &lt;code&gt;Authorise&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/28authorize.jpg&quot; title=&quot;Authorize the execution&quot; alt=&quot;Authorize the execution&quot; /&gt;
&lt;p&gt;After authorisation, the code will run and give an output like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/29code-output-python.jpg&quot; title=&quot;See the generated product description&quot; alt=&quot;See the generated product description&quot; /&gt;
&lt;p&gt;Congrats! You are a Gemini and Vertex AI novice now :). You can close the Cloud Shell Editor. Even shut down/delete the project if you like.&lt;/p&gt;
&lt;h2 id=&quot;what&#39;s-next&quot; tabindex=&quot;-1&quot;&gt;What&#39;s next &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#what&#39;s-next&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol start=&quot;30&quot;&gt;
&lt;li&gt;Further steps&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The generated code is more like a proof of concept. You can add an API layer and UI on top of it to make it more useful. You can deploy that API on Google Cloud Run as serverless containers.&lt;/p&gt;
&lt;p&gt;For instance below is a basic UI generated with &lt;a href=&quot;https://v0.dev/r/iP3BVQiLBa5&quot;&gt;v0&lt;/a&gt; with the prompt:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;An internal tool for e-commerce websites to generate product descriptions,
it will have a product name text box, multi-file upload field, category
select box with clothes, shoes, accessory options, gender select box
with male, female, and unisex options and age select box with infants,
kids, teens, and adults options. Then a button that says Generate.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The UI is below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/e-commerce-product-description-generator/15simple-ui.jpg&quot; title=&quot;Example UI generated by V0 for the product description generator&quot; alt=&quot;Example UI generated by V0 for the product description generator&quot; /&gt;
&lt;ol start=&quot;31&quot;&gt;
&lt;li&gt;It would be good idea to read more about LLMs in general and also about Gemini. You can also do courses or code labs about &lt;a href=&quot;https://www.cloudskillsboost.google/catalog?keywords=gemini&amp;amp;page=1&quot;&gt;Gemini on Cloud Skills boost&lt;/a&gt; platform.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Congrats! You have successfully built and tested a general purpose e-commrece product description generator. You can also crate a text or URL&#39;s &lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/&quot;&gt;text summarizer&lt;/a&gt; using Gemini over Vertex AI.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this blog post, you embarked on a journey to build a basic e-commerce product description generator using Google&#39;s Gemini API over Vertex AI on GCP.&lt;/p&gt;
&lt;p&gt;You started by creating a prompt that captures the essence of what we wanted the generator to achieve. Towards the end you create a proof of concept script with Python that can be converted into a standalone internal application.&lt;/p&gt;
&lt;p&gt;Whether you&#39;re an e-commerce entrepreneur, a content creator, or simply someone interested in the future of AI, LLMs have the potential to revolutionize the way we work and create.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So, embrace the excitement, experiment with different prompts and configurations, and see what amazing results you can achieve with the help of Google&#39;s Gemini API.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The future of better productivity is here, and it&#39;s powered by AI!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Getting started with Docker-compose, a quick tutorial</title>
		<link href="https://geshan.com.np/blog/2024/04/docker-compose-tutorial/"/>
		<updated>2024-04-27T11:51:47Z</updated>
		<id>https://geshan.com.np/blog/2024/04/docker-compose-tutorial/</id>
		<content type="html">&lt;p&gt;Docker Compose is a powerful tool that simplifies the management and possible deployment of multi-container applications. Whether you&#39;re a seasoned developer or just starting your containerization journey, Docker Compose can streamline your workflow and boost your productivity. Let’s get going!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/docker-compose-tutorial/01docker-compose-tutorial.jpg&quot; title=&quot;Docker for beginners: a guide to understanding the concepts&quot; alt=&quot;Docker for beginners: a guide to understanding the concepts&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#what-is-docker-compose&quot;&gt;What is Docker Compose?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#why-use-docker-compose&quot;&gt;Why use Docker Compose?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#how-to-use-docker-compose&quot;&gt;How to use Docker Compose&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#install-docker-compose&quot;&gt;Install Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#define-your-application-in-docker-composeyml&quot;&gt;Define your Application in docker-compose.yml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#build-and-run-your-application&quot;&gt;Build and Run your Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#additional-commands&quot;&gt;Additional Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#code-for-docker-compose-usage&quot;&gt;Code for Docker Compose Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-docker-compose%3F&quot; tabindex=&quot;-1&quot;&gt;What is Docker Compose? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#what-is-docker-compose%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Imagine you&#39;re building an application that requires multiple services, like a web server, a database, and a cache. Traditionally, setting up and managing these services individually would be cumbersome and error-prone. Docker Compose comes to the rescue by providing a declarative approach to define and run multi-container Docker applications. If you want to learn more about Docker, you can read &lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/&quot;&gt;docker for beginners&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At its core, Docker Compose uses a YAML file (docker-compose.yml) to describe your application&#39;s services, networks, and volumes. This single file acts as a blueprint, specifying how each container should be built, configured, and interconnected. With a single command, you can then bring your entire application stack up or down, making it incredibly convenient for development, testing, and deployment.&lt;/p&gt;
&lt;p&gt;Docker defines &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;docker-compose&lt;/a&gt; as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker Compose is a tool for defining and running multi-container applications. It is the key to unlocking a streamlined and efficient development and deployment experience.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In essence, docker-compose lets you run multiple related containers to formulate an application with all its dependent components. In the next section, you will learn about why to use docker-compose.&lt;/p&gt;
&lt;h2 id=&quot;why-use-docker-compose%3F&quot; tabindex=&quot;-1&quot;&gt;Why use Docker Compose? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#why-use-docker-compose%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Docker Compose offers a multitude of benefits that simplify the development and deployment process for multi-container applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Declarative Configuration:&lt;/strong&gt; The YAML file provides a clear and concise way to define your application&#39;s infrastructure, eliminating the need for complex scripts or manual configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simplified Management:&lt;/strong&gt; With Docker Compose, you can manage the entire lifecycle of your application with a few simple commands. Start, stop, and rebuild services effortlessly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Isolation and Reproducibility:&lt;/strong&gt; Each service runs in its own container, ensuring isolation and preventing conflicts between dependencies. This also guarantees reproducibility across different environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Efficient Development Workflow:&lt;/strong&gt; Docker Compose speeds up the development process by allowing you to quickly spin up and tear down your application stack, making it ideal for iterative development and testing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Portability:&lt;/strong&gt; The docker-compose.yml file is portable, allowing you to easily share your application configuration with other developers or deploy it to different environments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On top of all that, for the developer it is much easier to get the whole app running with docker compose, you just hit &lt;code&gt;docker compose up&lt;/code&gt;  and get a coffee, possibly your app is already up and running.&lt;/p&gt;
&lt;h2 id=&quot;how-to-use-docker-compose&quot; tabindex=&quot;-1&quot;&gt;How to use Docker Compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#how-to-use-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting started with Docker Compose is straightforward:&lt;/p&gt;
&lt;h3 id=&quot;install-docker-compose&quot; tabindex=&quot;-1&quot;&gt;Install Docker Compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#install-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ensure you have Docker installed on your system, and then download and install Docker Compose. Depending on your operating system, you can follow the &lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;steps&lt;/a&gt; to get docker compose as part of docker or even as a standalone application.&lt;/p&gt;
&lt;h3 id=&quot;define-your-application-in-docker-compose.yml&quot; tabindex=&quot;-1&quot;&gt;Define your Application in docker-compose.yml &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#define-your-application-in-docker-compose.yml&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Create a docker-compose.yml file in your project&#39;s root directory. This file will define your services, networks, and volumes.&lt;/p&gt;
&lt;h3 id=&quot;build-and-run-your-application&quot; tabindex=&quot;-1&quot;&gt;Build and Run your Application &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#build-and-run-your-application&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;docker-compose up&lt;/code&gt; command to build the images (if necessary) and start your application. Docker Compose will handle the orchestration and networking of your services.&lt;/p&gt;
&lt;h3 id=&quot;additional-commands&quot; tabindex=&quot;-1&quot;&gt;Additional Commands &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#additional-commands&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker-compose build&lt;/code&gt;: Builds or rebuilds your services.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose down&lt;/code&gt;: Stops and removes containers, networks, and volumes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose ps&lt;/code&gt;: Lists the status of your services.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose logs&lt;/code&gt;: View logs from your services.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose exec&lt;/code&gt;: Execute a command in a running container.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s have a look at the above in action, in the next section of this docker compose tutorial blog post.&lt;/p&gt;
&lt;h2 id=&quot;code-for-docker-compose-usage&quot; tabindex=&quot;-1&quot;&gt;Code for Docker Compose Usage &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#code-for-docker-compose-usage&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here&#39;s a basic example of a docker-compose.yml file for an application with a web server and a database:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-compose-tutorial/02docker-compose-tutorial-example.jpg&quot; title=&quot;Example docker comopose file showing the dependency of the api container to the db container&quot; alt=&quot;Example docker comopose file showing the dependency of the api container to the db container&quot; /&gt;
&lt;p&gt;This example defines two services: &lt;code&gt;api&lt;/code&gt; and &lt;code&gt;db&lt;/code&gt;. The &lt;code&gt;api&lt;/code&gt; service builds an image from the Dockerfile in the current directory and maps port 3000 of the container to port 3000 of the host machine. It also specifies that it depends on the &lt;code&gt;db&lt;/code&gt; service, ensuring that the database is initiated to start before the web server.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;db&lt;/code&gt; service uses the official PostgreSQL image Alpine Linux flavor and sets an environment variable for the user and password. You can find the docker-compose file and all the other code of this Node.js application as a &lt;a href=&quot;https://github.com/geshan/nodejs-postgres-docker-compose/tree/master&quot;&gt;GitHub repository&lt;/a&gt;. You can learn more about the docker-compose &lt;a href=&quot;https://github.com/geshan/nodejs-postgres-docker-compose/blob/master/docker-compose.yml&quot;&gt;file&lt;/a&gt; as seen below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  db:&lt;br /&gt;    image: postgres:14.1-alpine&lt;br /&gt;    restart: always&lt;br /&gt;    environment:&lt;br /&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;POSTGRES_USER&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;postgres&lt;br /&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;postgres&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token string&quot;&gt;&#39;5432:5432&#39;&lt;/span&gt;&lt;br /&gt;    volumes: &lt;br /&gt;      - db:/var/lib/postgresql/data&lt;br /&gt;      - ./db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql&lt;br /&gt;  api:&lt;br /&gt;    build:&lt;br /&gt;      context: ./&lt;br /&gt;      target: production&lt;br /&gt;    image: quotes-api&lt;br /&gt;    depends_on:&lt;br /&gt;      - db&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;:3000&lt;br /&gt;    environment:&lt;br /&gt;      NODE_ENV: production&lt;br /&gt;      DB_HOST: db&lt;br /&gt;      DB_PORT: &lt;span class=&quot;token number&quot;&gt;5432&lt;/span&gt;&lt;br /&gt;      DB_USER: postgres&lt;br /&gt;      DB_PASSWORD: postgres&lt;br /&gt;      DB_NAME: postgres&lt;br /&gt;    volumes:&lt;br /&gt;      - ./:/src&lt;br /&gt;      - /src/node_modules&lt;br /&gt;volumes:&lt;br /&gt;  db:&lt;br /&gt;    driver: &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s look at how the docker compose file is structured.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;version: &#39;3.8&#39;&lt;/code&gt; - This line specifies the Docker Compose file format version. Then the services needed for the &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;Node.js Postgres&lt;/a&gt; docker application with &lt;a href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/&quot;&gt;Postgres and Docker compose&lt;/a&gt; are defined.&lt;/p&gt;
&lt;p&gt;Among them &lt;code&gt;db&lt;/code&gt; is the first service, this service defines a Postgres database container with:&lt;/p&gt;
&lt;p&gt;*&lt;code&gt; image&lt;/code&gt;: postgres:14.1-alpine - This specifies the Docker image to use, which is the official Postgres image with version 14.1 and the Alpine Linux base.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;restart&lt;/code&gt;: always - Ensures the database container restarts automatically if it crashes or the system reboots.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt; - Sets environment variables for the container:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;POSTGRES_USER=postgres&lt;/code&gt; &amp;amp; &lt;code&gt;POSTGRES_PASSWORD=postgres&lt;/code&gt; - Credentials for accessing the database. (Note: Consider using environment secrets management in production for better security).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ports&lt;/code&gt; - Maps the container&#39;s port 5432 (default Postgres port) to the host machine&#39;s port 5432. This allows you to connect to the database from the host using localhost:5432.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volumes&lt;/code&gt; - Defines persistent storage for the database:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;db:/var/lib/postgresql/data&lt;/code&gt; - This volume named db is mounted to the container&#39;s * /var/lib/postgresql/data directory, which stores the database files. This ensures data persistence even if the container restarts.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql&lt;/code&gt; - Mounts a local SQL script (&lt;code&gt;./db/init.sql&lt;/code&gt;) from the project directory to the&lt;code&gt; /docker-entrypoint-initdb.d/create_tables.sql&lt;/code&gt; path inside the container. This script creates tables in the database upon container startup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next service is &lt;code&gt;web&lt;/code&gt;, this service defines a Node.js API container. It has the following parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; - Instructs Docker Compose to build the image for this service from a Dockerfile located in the current directory (./).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context&lt;/code&gt;: ./ - Specifies the context directory for the build process (the project root in this case).
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt;: production - If your Dockerfile has multiple build stages, this defines the target stage to use for building the image (likely containing production dependencies).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;image&lt;/code&gt;: quotes-api - Sets the name for the built image.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;depends_on&lt;/code&gt; - Declares that the api service depends on the db service. This ensures the database container is up and running before starting the API container. You can read more about &lt;a href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/&quot;&gt;docker compose depends on&lt;/a&gt; in this guide.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ports&lt;/code&gt; - Maps the container&#39;s port 3000 (where the API runs) to the host machine&#39;s port 3000.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt; - Sets environment variables for the API container:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NODE_ENV&lt;/code&gt;: production - Sets the Node environment to production mode, it influences how your API behaves with thing like caching&lt;/li&gt;
&lt;li&gt;Variables like &lt;code&gt;DB_HOST&lt;/code&gt;, &lt;code&gt;DB_PORT&lt;/code&gt;, &lt;code&gt;DB_USER&lt;/code&gt;, &lt;code&gt;DB_PASSWORD&lt;/code&gt;, and &lt;code&gt;DB_NAME&lt;/code&gt; provide connection details for the database container (accessible using the service name db).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;volumes - Mounts directories for the API container:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./:/src&lt;/code&gt; - Mounts the entire project directory (./) into the container&#39;s /src directory, making your code accessible within the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/src/node_modules&lt;/code&gt; - This is an interesting volume. It mounts the /src/node_modules directory of the container back to the host machine at the same location. This can be useful to avoid rebuilding dependencies every time the container restarts, but be aware of potential caching issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All you need to do is clone the &lt;a href=&quot;https://github.com/geshan/nodejs-postgres-docker-compose&quot;&gt;repository&lt;/a&gt; and run &lt;code&gt;docker-compose up&lt;/code&gt; which will give the following output (it may take some time to download the base images if you are running it for the first time):&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-compose-tutorial/03docker-compose-working.jpg&quot; title=&quot;Node.js app with Postgres DB running with docker compose locally&quot; alt=&quot;Node.js app with Postgres DB running with docker compose locally&quot; /&gt;
&lt;p&gt;You see the running app at &lt;code&gt;http://localhost:3000/quotes&lt;/code&gt; that will look something like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-compose-tutorial/04nodejs-app-running.jpg&quot; title=&quot;Node.js app with Postgres DB running on the browser&quot; alt=&quot;Node.js app with Postgres DB running on the browser&quot; /&gt;
&lt;p&gt;There you have it a quick and useful tutorial to using docker-compose. In the next section you will find the same content in the form of slides.&lt;/p&gt;
&lt;h2 id=&quot;slides&quot; tabindex=&quot;-1&quot;&gt;Slides &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#slides&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;iframe src=&quot;https://docs.google.com/presentation/d/e/2PACX-1vRU3dgiMffLJ42tsl7Ow-slZYQbqOjmHtTvd55QmT7-3MGwirQyNM8352tWNx-uXEWaEOQjyJBhKoaj/embed?start=false&amp;loop=false&amp;delayms=3000&quot; frameborder=&quot;0&quot; width=&quot;960&quot; height=&quot;569&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Docker Compose is a valuable tool for any developer working with multi-container applications. It simplifies the development and deployment process, promotes reproducibility, and allows you to focus on building great applications rather than managing infrastructure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By leveraging the power of Docker Compose, you can streamline your workflow and bring efficiency to your containerized applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, dive in, experiment, and experience the benefits of Docker Compose for yourself!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Docker for beginners: a guide to understanding the core concepts</title>
		<link href="https://geshan.com.np/blog/2024/04/docker-for-beginners/"/>
		<updated>2024-04-21T11:58:47Z</updated>
		<id>https://geshan.com.np/blog/2024/04/docker-for-beginners/</id>
		<content type="html">&lt;p&gt;Docker has revolutionized the way we build, ship, and run applications. By packaging software into standardized units called containers, Docker offers numerous benefits, including portability, efficiency, and scalability. In this tutorial, you will delve into the fundamentals of Docker, guiding you from the basic concepts of Docker for beginners, and empowering you to utilize this powerful technology in your projects. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/docker-for-beginners/01docker-for-beginners.jpg&quot; title=&quot;Docker for beginners: a guide to understanding the concepts&quot; alt=&quot;Docker for beginners: a guide to understanding the concepts&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#what-are-containers&quot;&gt;What are Containers?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#what-is-docker&quot;&gt;What is Docker?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#why-use-containers-and-docker&quot;&gt;Why Use Containers and Docker?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#containers-vs.-virtual-machines&quot;&gt;Containers vs. Virtual Machines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#docker-concepts&quot;&gt;Docker Concepts&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#dockerfile&quot;&gt;Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#docker-image&quot;&gt;Docker Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#docker-container&quot;&gt;Docker Container&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#essential-docker-commands&quot;&gt;Essential Docker Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#the-slides&quot;&gt;The slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-are-containers%3F&quot; tabindex=&quot;-1&quot;&gt;What are Containers? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#what-are-containers%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Imagine a container as a self-contained unit, a microcosm encapsulating everything an application requires to run smoothly. It holds the code, runtime, system tools, libraries, and crucial settings, creating a consistent and reliable environment. This approach eliminates the infamous &amp;quot;it works on my machine&amp;quot; problem, where an application behaves differently in distinct environments.&lt;/p&gt;
&lt;p&gt;Containers offer a standardized and portable way to package and distribute applications, ensuring consistent performance across various platforms and infrastructures. Developers can create and test their applications in a controlled containerized environment, replicating production conditions. This streamlined approach minimizes discrepancies and surprises when deploying the application to different environments, such as testing, staging, and production.&lt;/p&gt;
&lt;p&gt;By leveraging containers, organizations can streamline their application development and deployment processes. Teams can work collaboratively, knowing that their applications will behave (mostly) consistently, regardless of their development environments. This promotes efficiency, reduces troubleshooting time, and facilitates seamless transitions between different stages of the software development lifecycle.&lt;/p&gt;
&lt;p&gt;Docker is the defacto container technology (another one is &lt;a href=&quot;https://www.redhat.com/en/topics/containers/what-is-rkt&quot;&gt;rkt&lt;/a&gt; but it is almost dead in 2024. Docker is a container engine, platform, and company, in the next section you will learn about Docker the container engine.&lt;/p&gt;
&lt;h2 id=&quot;what-is-docker%3F&quot; tabindex=&quot;-1&quot;&gt;What is Docker? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#what-is-docker%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Docker is a platform that revolutionizes the way applications are developed, deployed, and executed. It leverages the concept of containers, which are lightweight, isolated environments that encapsulate an application and its dependencies.&lt;/p&gt;
&lt;p&gt;Amazon defines Docker as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker is a software platform that allows you to build, test, and deploy applications quickly. Docker packages software into standardized units called containers that have everything the software needs to run including libraries, system tools, code, and runtime.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At the heart of Docker lies a runtime environment that orchestrates the creation and management of containers. Just like a ship&#39;s engine propels it forward, Docker&#39;s runtime environment provides the infrastructure and tools needed to build, manage, and distribute containerized applications.&lt;/p&gt;
&lt;p&gt;Docker&#39;s command-line interface (CLI) offers a wide range of commands that give you granular control over the entire container lifecycle. These commands let you create, run, stop, inspect, and manage containers with ease. Docker has a big community and ecosystem behind it that enables it to be an important player in the Devops and SRE scene.&lt;/p&gt;
&lt;p&gt;Next, you will learn about why to use Containers and Docker, carry on reading.&lt;/p&gt;
&lt;h2 id=&quot;why-use-containers-and-docker%3F&quot; tabindex=&quot;-1&quot;&gt;Why Use Containers and Docker? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#why-use-containers-and-docker%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The simple reason to use Docker is you can ship your machine, how?&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-for-beginners/02docker-works.jpg&quot; title=&quot;Works on your machine, ship your machine&quot; alt=&quot;Works on your machine, ship your machine&quot; /&gt;
&lt;p&gt;Apart from the above &lt;a href=&quot;https://www.reddit.com/r/ProgrammerHumor/comments/cw58z7/it_works_on_my_machine/%E2%80%8B%E2%80%8B&quot;&gt;meme&lt;/a&gt;. On a serious note, several compelling reasons drive developers and businesses toward Docker, some of them are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Reproducibility&lt;/strong&gt;: Docker packages the entire application stack, including all of its dependencies, into a single container. This ensures that the application will behave consistently across different environments, eliminating dependency issues and making it easier to reproduce results.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficiency&lt;/strong&gt;: Docker containers share the host operating system&#39;s kernel, which makes them lightweight and efficient compared to virtual machines. This translates to faster startup times, lower resource utilization, and improved performance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: Docker containers can be easily scaled horizontally by adding more containers. This makes it easy to adapt to changing demands, such as spikes in traffic or seasonal fluctuations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portability&lt;/strong&gt;: Docker containers run seamlessly across different platforms and cloud providers. This promotes flexibility and vendor independence, making it easier to deploy applications anywhere.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Developer Productivity&lt;/strong&gt;: Docker simplifies the development process by providing a consistent environment and reducing setup time. This allows developers to focus on writing code, rather than spending time on infrastructure.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you are aware of the reasons to use containers and docker before containers Virtual machines were used as the unit of shipping software. Let’s understand the difference between containers and VMs in the next section.&lt;/p&gt;
&lt;h2 id=&quot;containers-vs.-virtual-machines&quot; tabindex=&quot;-1&quot;&gt;Containers vs. Virtual Machines &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#containers-vs.-virtual-machines&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While containers and virtual machines (VMs) both offer isolated environments, their approach differs significantly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;VMs:&lt;/strong&gt; Include a full operating system, making them resource-intensive and slower to start.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Containers:&lt;/strong&gt; Share the host OS kernel, resulting in lighter weight and faster startup times.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Think of VMs as houses and containers as apartments within a larger building. Both provide isolation, but apartments share resources like electricity and plumbing, making them more efficient. A better analogy to follow is that VMs are pets whereas containers are cattle as depicted below and mentioned by &lt;a href=&quot;https://www.engineyard.com/blog/pets-vs-cattle/&quot;&gt;Engine Yard&lt;/a&gt;:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-for-beginners/03pets-vs-cattle.jpg&quot; title=&quot;Pets vs cattle analogy for VMs vs containers&quot; alt=&quot;Pets vs cattle analogy for VMs vs containers&quot; /&gt;
&lt;p&gt;Consequently, you will learn about the concepts of Docker from a development perspective.&lt;/p&gt;
&lt;h2 id=&quot;docker-concepts&quot; tabindex=&quot;-1&quot;&gt;Docker Concepts &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#docker-concepts&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are the three main concepts to better understand Docker and how it works:&lt;/p&gt;
&lt;h3 id=&quot;dockerfile&quot; tabindex=&quot;-1&quot;&gt;Dockerfile &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#dockerfile&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is a text file containing instructions that guide the automated process of building a Docker image.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dockefile serves as a blueprint or recipe for creating a custom Docker image based on a specific base image.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Dockerfile specifies the operating system, software dependencies, application code, and other configurations necessary to set up a container&#39;s environment. It enables developers to define the exact steps required to build and configure an application within a container.&lt;/p&gt;
&lt;h3 id=&quot;docker-image&quot; tabindex=&quot;-1&quot;&gt;Docker Image &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#docker-image&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A docker image is a read-only template that encapsulates all the necessary components to run an application. It&#39;s created by building a Dockerfile, using Docker&#39;s command-line interface or API.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Docker image consists of multiple layers, each representing a specific step or instruction defined in the Dockerfile.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Docker images are portable and can be shared across different platforms, facilitating the deployment and distribution of applications.&lt;/p&gt;
&lt;h3 id=&quot;docker-container&quot; tabindex=&quot;-1&quot;&gt;Docker Container &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#docker-container&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A running instance of a Docker image is a container. It&#39;s an isolated and encapsulated environment that contains the application, its dependencies, and the necessary runtime components. Docker containers are created from Docker images using the &lt;code&gt;run&lt;/code&gt; command. They provide a consistent and reproducible runtime environment for applications, allowing them to run reliably across different hosts and cloud platforms.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker containers can be scaled horizontally to handle increased load or perform distributed processing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This can be better understood visually:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/serverless-container/03docker-build-run.jpg&quot; title=&quot;Visual representation of Docker build to image and run as container&quot; alt=&quot;Visual representation of Docker build to image and run as container&quot; /&gt; 
&lt;p&gt;For a more production-like Docker pipeline you will also need a container registry and a different software or service that runs and orchestrates running containers, below is a visual representation of that kind of pipeline:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/serverless-container/05docker-run.jpg&quot; title=&quot;Visual representation of Docker build to image push to registry, pull and run on a platform&quot; alt=&quot;Visual representation of Docker build to image push to registry, pull and run on a platform&quot; /&gt;
&lt;p&gt;Next, you will know about the Docker commands that will help you work with Docker.&lt;/p&gt;
&lt;h2 id=&quot;essential-docker-commands&quot; tabindex=&quot;-1&quot;&gt;Essential Docker Commands &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#essential-docker-commands&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, you will need docker installed on your machine (or wherever you want to try the following commands). Depending on your operating system you can find the instructions to install the &lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;Docker engine&lt;/a&gt; on its website. You can also install the Docker desktop. After you have Docker running locally, you can try executing &lt;code&gt;docker --version&lt;/code&gt; when that works you can try the following &lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/&quot;&gt;docker commands&lt;/a&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;docker search:&lt;/strong&gt; Finds Docker images on Docker Hub.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docker pull:&lt;/strong&gt; Downloads an image from a registry to your local machine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docker images:&lt;/strong&gt; Lists Docker images on your machine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docker build:&lt;/strong&gt; Builds a Docker image from a Dockerfile.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docker run:&lt;/strong&gt; Creates and starts a new container from a Docker image.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docker ps:&lt;/strong&gt; Shows running containers; use the &lt;code&gt;-a&lt;/code&gt; flag to see all containers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docker exec:&lt;/strong&gt; Executes a command inside a running container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docker logs:&lt;/strong&gt; Displays the logs of a container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docker stop:&lt;/strong&gt; Stops a running container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docker rm:&lt;/strong&gt; Removes the container&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docker rmi:&lt;/strong&gt; Remove the docker image&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can experiment with &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Node.js docker&lt;/a&gt; in the step-by-step tutorial.&lt;/p&gt;
&lt;p&gt;Subsequently, all the above content has been packaged as a slide too for your convenience.&lt;/p&gt;
&lt;h2 id=&quot;the-slides&quot; tabindex=&quot;-1&quot;&gt;The slides &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#the-slides&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All of the above content is available as slides too:&lt;/p&gt;
&lt;iframe src=&quot;https://docs.google.com/presentation/d/e/2PACX-1vTIz0YiwQP5bV90mFNT5RpJOwKYzYeY2LPw26hlulQvhw1dqzQBVUVhbFHKR5PCNb_aO_VquVRS-96d/embed?start=false&amp;loop=false&amp;delayms=3000&quot; frameborder=&quot;0&quot; width=&quot;960&quot; height=&quot;569&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;In the next part of this series, you will get at &lt;a href=&quot;https://geshan.com.np/blog/2024/04/docker-compose-tutorial/&quot;&gt;docker compose tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, you will find out the need to learn Docker in today’s world.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/04/docker-for-beginners/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By mastering Docker basics, you unlock the potential to build and deploy applications with greater efficiency and agility, preparing yourself for the modern world of software development. In today’s world, if your job role has the word &lt;code&gt;engineer&lt;/code&gt; there are a few things you must know like git, working in the command line, and Docker. Hopefully, the main and important concepts of Docker and containerization are much clearer to you now after reading this post, cheers!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use Nginx with Docker Compose effectively with examples</title>
		<link href="https://geshan.com.np/blog/2024/03/nginx-docker-compose/"/>
		<updated>2024-03-16T11:58:47Z</updated>
		<id>https://geshan.com.np/blog/2024/03/nginx-docker-compose/</id>
		<content type="html">&lt;p&gt;Nginx, a free, open-source, high-performance web server and reverse proxy, has become a cornerstone of modern web applications. Its versatility, efficiency, and ability to handle high-traffic loads make it a popular choice among developers and organizations alike. In this post, you are going to learn how to use Niginx with Docker and Docker Compose with a simple example and another example that is closer to a real-life scenario, let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/nginx-docker-compose/01nginx-docker-compose.jpg&quot; title=&quot;How to use Nginx with Docker Compose effectively with examples&quot; alt=&quot;How to use Nginx with Docker Compose effectively with examples&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/#nginx-and-docker-compose&quot;&gt;Nginx and Docker compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/#nginx-docker-compose-a-simple-example&quot;&gt;Nginx Docker Compose a simple example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/#multi-container-example-with-nginx-and-docker-compose&quot;&gt;Multi-container example with Nginx and Docker compose&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/#the-components-of-nginx-docker-compose-a-multi-container-setup&quot;&gt;The components of Nginx Docker compose a multi-container setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;nginx-and-docker-compose&quot; tabindex=&quot;-1&quot;&gt;Nginx and Docker compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/#nginx-and-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On top of being a great web server, Nginx has other useful features too like &lt;a href=&quot;https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/&quot;&gt;load balancing&lt;/a&gt;,  &lt;a href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/%E2%80%8B%E2%80%8Bhttps://docs.nginx.com/nginx/admin-guide/content-cache/content-caching/&quot;&gt;content caching&lt;/a&gt;, and &lt;a href=&quot;https://docs.nginx.com/nginx/admin-guide/mail-proxy/mail-proxy/&quot;&gt;mail proxy&lt;/a&gt;. You can even set up &lt;a href=&quot;https://github.com/kjdev/nginx-auth-jwt&quot;&gt;JWT authentication&lt;/a&gt; with Nginx. That speaks volumes about how versatile Nginx is.&lt;/p&gt;
&lt;p&gt;In the realm of containerization, Docker has become the de facto standard for packaging and deploying applications. Docker Compose, a companion tool, simplifies the management of multi-container applications by allowing you to define and run them using a single YAML file.&lt;/p&gt;
&lt;p&gt;When you combine Nginx with Docker Compose, you unlock a powerful and efficient way to deploy and manage web applications. Docker Compose streamlines the process of running multiple containers, including your Nginx web server and any backend services your application might rely on. You could potentially run multiple backend servers and route the traffic to them using Nginx in front of them as a &lt;a href=&quot;https://www.cloudflare.com/en-gb/learning/cdn/glossary/reverse-proxy/&quot;&gt;reverse proxy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the next section, you will look at a simple example with Nginx and Docker compose to host a small brochure website with static files.&lt;/p&gt;
&lt;h3 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before you embark on this journey, let&#39;s ensure you have the following prerequisites:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A basic understanding of Docker and Docker Compose: Familiarity with Docker commands like &lt;code&gt;docker build&lt;/code&gt;, &lt;code&gt;docker run&lt;/code&gt;, and &lt;code&gt;docker-compose up&lt;/code&gt; is essential. If you&#39;re new to Docker, I recommend checking out the official Docker documentation or online tutorials to get up to speed. Also, you will need Docker running on your machine, the examples are based on Docker version 24.0.2 and Docker compose version 2.18.1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;General understanding of Nginx: Knowing how Nginx works and how it is configured will be greatly helpful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Node.js and NPM installed: We&#39;ll be using a simple Node.js application as an example, so having Node.js and NPM (Node Package Manager) installed on your system is useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Text editor or IDE: You&#39;ll need a text editor or IDE to create and edit the Dockerfile and docker-compose.yml files. I will be using VSCode.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the next, section you will run a simple example to serve static files with Nginx and Docker Compose.&lt;/p&gt;
&lt;h2 id=&quot;nginx-docker-compose-a-simple-example&quot; tabindex=&quot;-1&quot;&gt;Nginx Docker Compose a simple example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/#nginx-docker-compose-a-simple-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s begin with a straightforward example that illustrates how to use Nginx with Docker Compose to host static files. For this example, you want to create a brochure website for your imaginary Gen AI startup named Summrzer (a different variation for Summarizer). Your design skills could be better, so you get a responsive theme from &lt;a href=&quot;http://html5up.net/&quot;&gt;HTML5up.net&lt;/a&gt; called &lt;a href=&quot;https://html5up.net/stellar&quot;&gt;Steller&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get started you will first clone the ready-made repository where the files have been edited to look like a landing page of our imaginary start-up &lt;code&gt;Summrzer&lt;/code&gt;. You can clone the repository with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone git@github.com:geshan/nginx-docker-compose.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that, you have to run the docker compose command pointing it to the &lt;code&gt;basic.yaml&lt;/code&gt; file with the &lt;code&gt;up&lt;/code&gt; parameter. Let’s look at that file first:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  nginx:&lt;br /&gt;    image: nginx:1-alpine&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token number&quot;&gt;8089&lt;/span&gt;:80&lt;br /&gt;    volumes:&lt;br /&gt;      - ./html5up-stellar/:/usr/share/nginx/html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s break down this Docker compose file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;version:&lt;/strong&gt; Specifies the Docker Compose file format version, in this case, 3.8.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;services:&lt;/em&gt;* Defines the services that make up our application. In this case, it is only Nginx.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;image:&lt;/em&gt;* Uses the &lt;code&gt;nginx:1-alpoine&lt;/code&gt; image from Docker Hub. Which is the smaller Alpine version, not the default Debian one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ports:&lt;/strong&gt; Maps the host&#39;s port 8089 to the container&#39;s port 80, allowing access to the web server running in the container from the host machine with &lt;code&gt;http://localhost:8089&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volumes:&lt;/strong&gt; You have mounted the local &lt;code&gt;./html5up-stellar&lt;/code&gt; to &lt;code&gt;/usr/share/nginx/html&lt;/code&gt; default document root fo Nignx.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This could have also been done with a Dockerfile but it is easier with this configuration and much easier to build as well as change any configuration.&lt;/p&gt;
&lt;p&gt;Now, to run the simple version of the Nginx with the above Docker Compose config, you can execute the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; compose &lt;span class=&quot;token parameter variable&quot;&gt;-f&lt;/span&gt; basic.yaml up&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will show the following output on the command line:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nginx-docker-compose/02nginx-docker-compose-simple.jpg&quot; title=&quot;Running a simple Nginx Docker compose example with single container&quot; alt=&quot;Running a simple Nginx Docker compose example with single container&quot; /&gt;
&lt;p&gt;To check the running app, open your favorite browser and point the tab to &lt;code&gt;http://localhost:8089&lt;/code&gt;, you will see something like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nginx-docker-compose/03summrzer.jpg&quot; title=&quot;Summarizer static site running a simple Nginx Docker compose example with single container&quot; alt=&quot;Summarizer static site running a simple Nginx Docker compose example with single container&quot; /&gt;
&lt;p&gt;Hurray! You have run a simple version of Nginx that can serve static files like HTML, JavaScirpt, CSS, and images. You can add more things to the configuration like &lt;a href=&quot;https://webdock.io/en/docs/webdock-control-panel/optimizing-performance/setting-cache-control-headers-common-content-types-nginx-and-apache&quot;&gt;Cache-Control headers with Nginx&lt;/a&gt;, that can be a topic for another blog post.&lt;/p&gt;
&lt;p&gt;You can stop the command by pressing &lt;code&gt;Ctrl+C&lt;/code&gt;.  In the next part, you will learn how to run multiple containers with Nginx using a Docker compose configuration file.&lt;/p&gt;
&lt;h2 id=&quot;multi-container-example-with-nginx-and-docker-compose&quot; tabindex=&quot;-1&quot;&gt;Multi-container example with Nginx and Docker compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/#multi-container-example-with-nginx-and-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that you&#39;ve seen a basic example, let&#39;s move on to a multi-container scenario. You will create a setup where Nginx serves static files for the root path &lt;code&gt;/&lt;/code&gt; and acts as a reverse proxy for a Node.js API running on a different container for the &lt;code&gt;/api&lt;/code&gt; path. To do this, the Docker compose file is already in the cloned repository at &lt;code&gt;./compose.yaml&lt;/code&gt;, which looks like the below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&quot;3.8&quot;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  node:&lt;br /&gt;    build:&lt;br /&gt;      context: ./api&lt;br /&gt;      target: dev&lt;br /&gt;    volumes:&lt;br /&gt;      - ./api/index.js:/src/index.js&lt;br /&gt;  nginx:&lt;br /&gt;    restart: always&lt;br /&gt;    image: nginx:1-alpine&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token number&quot;&gt;8089&lt;/span&gt;:80&lt;br /&gt;    volumes:&lt;br /&gt;      - ./html5up-stellar/:/var/www/html&lt;br /&gt;      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf&lt;br /&gt;    depends_on:&lt;br /&gt;      - &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The file looks similar to the above one, still, let’s discuss the newly added things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Services&lt;/strong&gt;: In this configuration, there are two services &lt;code&gt;node&lt;/code&gt; which runs a simple Node.js app, and Nginx which sits in front of the Node.js app as a reverse proxy. Nginx will forward all requests to the &lt;code&gt;/api&lt;/code&gt; path to the Node.js app. The Node.js app is in the &lt;code&gt;../api&lt;/code&gt; folder and has its own &lt;a href=&quot;https://github.com/geshan/nginx-docker-compose/blob/master/api/Dockerfile&quot;&gt;Dockerfile&lt;/a&gt;. You can learn more about &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Node.js with Docker&lt;/a&gt; too.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nginx Volumes:&lt;/strong&gt; There are two volumes this time, first one is similar to the above. The second one the key to this configuration which holds the definition of what the &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;/api&lt;/code&gt; paths should do. You will know about this later.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Depends on&lt;/strong&gt;: Here it says that the Nginx service will be started after the Node.js service with depends on. You can read more about &lt;a href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/&quot;&gt;Docker compose depends on&lt;/a&gt; and learn about it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, you will learn about the components of this two-container setup.&lt;/p&gt;
&lt;h3 id=&quot;the-components-of-nginx-docker-compose-a-multi-container-setup&quot; tabindex=&quot;-1&quot;&gt;The components of Nginx Docker compose a multi-container setup &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/#the-components-of-nginx-docker-compose-a-multi-container-setup&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As discussed, there is a Node.js app that is a simple API with a single file that looks like the below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8181&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;alive&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/summary&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://en.wikipedia.org/wiki/HTTP&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;HTTP, or Hypertext Transfer Protocol, is an application layer protocol used in the World Wide Web to facilitate data communication. It&#39;s the foundation for exchanging information between web browsers and servers. The protocol&#39;s functions include requests, responses, methods, and headers. HTTP has evolved over time, with versions 1.0, 1.1, 2, and 3 currently in use. HTTPS, a secure version of HTTP, is widely used for increased security. HTTP is a fundamental protocol in web communication, providing a structured method for data transfer and enabling the functionality of the internet.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening on port &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is a basic Express.js app that sends back a stock response which adds like a demo to the &lt;code&gt;Summrzer&lt;/code&gt; start-up story.&lt;/p&gt;
&lt;p&gt;A docker file has been added to serve this Node.js app that looks like the below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:20-alpine as base&lt;br /&gt;&lt;br /&gt;WORKDIR /src&lt;br /&gt;COPY package.json package-lock.json /src/&lt;br /&gt;EXPOSE &lt;span class=&quot;token number&quot;&gt;8181&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;FROM base as production&lt;br /&gt;ENV &lt;span class=&quot;token assign-left variable&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;production&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; ci&lt;br /&gt;COPY &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; /src&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;FROM base as dev&lt;br /&gt;ENV &lt;span class=&quot;token assign-left variable&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;development&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-g&lt;/span&gt; nodemon &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;br /&gt;COPY &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; /src&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nodemon&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other component is the Nginx container, which has a configuration loaded to it in addition to the static files. The Nginx configuration placed in &lt;code&gt;./nginx/default.conf&lt;/code&gt; looks as follows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;server &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    location / &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        root /var/www/html&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    location /api/ &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        proxy_set_header Host &lt;span class=&quot;token variable&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        proxy_set_header X-Real-IP &lt;span class=&quot;token variable&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        proxy_set_header X-Forwarded-For &lt;span class=&quot;token variable&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        proxy_set_header X-Forwarded-Proto &lt;span class=&quot;token variable&quot;&gt;$scheme&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        proxy_pass http://node:8181/&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is a simple configuration that says, if the user hits the &lt;code&gt;/&lt;/code&gt; path serve the static files from &lt;code&gt;/var/www/html&lt;/code&gt; this is where the &lt;code&gt;hmll5up-stellar&lt;/code&gt; files are mounted in the Docker compose file. It can be made better with extra configs like cache headers which is out of the scope of this tutorial.&lt;/p&gt;
&lt;p&gt;The second block is the interesting one, where requests to &lt;code&gt;/api/&lt;/code&gt; will be routed to &lt;code&gt;localhost:8181&lt;/code&gt; this is where the Node.js express app is running. This app is not accessible from the host machine as no ports are exposed for the &lt;code&gt;node&lt;/code&gt; service in the above Docker compose file. It also sets additional proxy headers to ensure proper communication between Nginx and the Node.js application. It sends the Real IP to the node service, and the &lt;a href=&quot;https://www.nginx.com/resources/wiki/start/topics/examples/forwarded/&quot;&gt;X-Forwarded-For&lt;/a&gt; header is used to standardize sending the original IP. The &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Proto&quot;&gt;header&lt;/a&gt; essentially identifies HTTP/HTTPS traffic.&lt;/p&gt;
&lt;p&gt;Proxy pass is saying to forward all requests to &lt;code&gt;/api&lt;/code&gt; to the Node.js service running on port 8181.&lt;br /&gt;
To run this two container setup, you can execute the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; compose up&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will see an output like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nginx-docker-compose/04nginx-docker-compose-multi.jpg&quot; title=&quot;Running a complex Nginx Docker compose example with two containers&quot; alt=&quot;Running a complex Nginx Docker compose example with two containers&quot; /&gt;
&lt;p&gt;If you go to &lt;code&gt;http://localhost:8089&lt;/code&gt; you will see a similar output of the modified stellar template as you did in the previous section. To check that the Node.js API is running properly you can go to &lt;code&gt;http://localhost:8089/ap/summaryi&lt;/code&gt; on your favorite browser, it will yield something like:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nginx-docker-compose/05summrzer-api.jpg&quot; title=&quot;Summarzer API running with Nginx and Docker compose with reverse proxy to a Node.js app&quot; alt=&quot;Summarzer API running with Nginx and Docker compose with reverse proxy to a Node.js app&quot; /&gt;
&lt;p&gt;There you have it, you have successfully run two examples with Nginx and Docker compose. The first one with Nginx only serves static files and the second one with Nginx serves both static files and acts as a reverse proxy for a simple Node.js app.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/03/nginx-docker-compose/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using Nginx with Docker Compose provides a powerful and efficient way to deploy and manage web applications. Docker Compose simplifies the process of running multiple containers, including your Nginx web server and any backend services your application might rely on. This combination offers advantages such as simplified configuration portability, scalability, and isolation.&lt;/p&gt;
&lt;p&gt;Through the two examples presented in this post, you&#39;ve learned how to use Nginx with Docker Compose to host static files and act as a reverse proxy for a Node.js API. These examples demonstrate the basic principles of using Nginx with Docker Compose, and you can build upon them to create more complex and sophisticated deployments with extra features like Caching and Load balancing.&lt;/p&gt;
&lt;p&gt;By leveraging the power of Nginx and Docker Compose, you can streamline your web development workflow and deploy and manage your applications with ease and efficiency.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use docker compose depends_on a beginner&#39;s guide</title>
		<link href="https://geshan.com.np/blog/2024/02/docker-compose-depends-on/"/>
		<updated>2024-02-27T11:58:47Z</updated>
		<id>https://geshan.com.np/blog/2024/02/docker-compose-depends-on/</id>
		<content type="html">&lt;p&gt;Docker Compose is a powerful tool that allows you to define and run multi-container Docker applications. It simplifies the process of managing and orchestrating multiple containers, making it a popular choice for development and testing environments. One of the key features of Docker Compose is the &lt;code&gt;depends_on&lt;/code&gt; option, which allows you to specify dependencies between services. In this beginner&#39;s guide, you will explore how to use &lt;code&gt;depends_on&lt;/code&gt; effectively, ensuring your services start up in the correct order and function seamlessly. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/docker-compose-depends-on/01docker-compose-depends-on.jpg&quot; title=&quot;How to use docker compose depends_on a beginner&#39;s guide&quot; alt=&quot;How to use docker compose depends_on a beginner&#39;s guide&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/#docker-compose-depends-on&quot;&gt;Docker compose depends on&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/#difference-between-depends_on-and-links&quot;&gt;Difference between depends_on and links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/#docker-compose-depends-on-under-the-covers&quot;&gt;Docker compose depends on under the covers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/#services-startup-condition-with-service_healthy&quot;&gt;Services startup condition with service_healthy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/#example-with-depends_on-and-service_healthy-condition&quot;&gt;Example with depends_on and service_healthy condition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;docker-compose-depends-on&quot; tabindex=&quot;-1&quot;&gt;Docker compose depends on &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/#docker-compose-depends-on&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into &lt;code&gt;depends_on&lt;/code&gt;, let&#39;s briefly recap Docker and Docker Compose. &lt;a href=&quot;https://docs.docker.com/get-started/overview/&quot;&gt;Docker&lt;/a&gt; is a containerization technology that packages and runs applications in isolated environments called containers. &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;Docker Compose&lt;/a&gt; builds upon Docker, enabling you to define and manage multiple containers and their configurations in a single YAML file called &lt;code&gt;docker-compose.yml&lt;/code&gt;. This declarative approach streamlines the process of running and orchestrating complex applications. You get free from long &lt;code&gt;docker run&lt;/code&gt; commands using this declarative and easy-to-understand syntax that can be comprehended in a single glance.&lt;/p&gt;
&lt;p&gt;Now, where does &lt;code&gt;depends_on&lt;/code&gt; fit into this picture? When working with multi-container applications, it&#39;s often crucial to ensure that services start up in a specific order or that the dependent service starts and is ready before the main service.&lt;/p&gt;
&lt;p&gt;For example, if your application depends on a database, the database service needs to be running before your application service starts. This is where &lt;code&gt;depends_on&lt;/code&gt; comes in. It allows you to specify which services a particular service depends on, ensuring that the dependent services are started before the service that relies on them.&lt;/p&gt;
&lt;h2 id=&quot;difference-between-depends_on-and-links&quot; tabindex=&quot;-1&quot;&gt;Difference between depends_on and links &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/#difference-between-depends_on-and-links&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&#39;s important to distinguish &lt;code&gt;depends_on&lt;/code&gt; from &lt;code&gt;links&lt;/code&gt;. While &lt;code&gt;links&lt;/code&gt; create network aliases and allow containers to communicate with each other by their service names, &lt;code&gt;depends_on&lt;/code&gt; solely focuses on startup order. It does not automatically guarantee that the dependent service is ready to accept connections or requests. You will explore how to handle readiness checks later in this guide.&lt;/p&gt;
&lt;p&gt;Let’s look at an example for an application that is a Node.js API (for Quotes) that uses Docker and has a Postgres database to store the data. The full &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;Node.js Postgres&lt;/a&gt; tutorial is available if you want to learn and understand how it is built. A working docker compose file with both the Node.js API and Postgres database services using &lt;code&gt;links&lt;/code&gt; to make it possible for the Node.js container to talk to the db can look like the below:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token key atrule&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;14.1&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; always   &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; POSTGRES_USER=postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; POSTGRES_PASSWORD=postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;5432:5432&#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/var/lib/postgresql/data&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ./db/init.sql&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/docker&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;entrypoint&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;initdb.d/create_tables.sql&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token key atrule&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;api&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ./&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; production&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;api&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; always&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; db  &lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; 3000&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; production&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;DB_HOST&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; db&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;DB_PORT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5432&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;DB_USER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;DB_PASSWORD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;DB_NAME&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ./&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/src&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; /src/node_modules&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token key atrule&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can understand more about a similar docker compose file for &lt;a href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#postgresql-with-docker-compose&quot;&gt;Docker and Postgres&lt;/a&gt;. The above example defines is using docker compose file version &lt;code&gt;3.8&lt;/code&gt;. You have defined two services in this &lt;code&gt;docker-compose.yml&lt;/code&gt; file. The first is the &lt;code&gt;db&lt;/code&gt; and the second one is the &lt;code&gt;api&lt;/code&gt;.  You can find see the &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/blob/master/Dockerfile&quot;&gt;Dockerfile&lt;/a&gt; used for the &lt;code&gt;api&lt;/code&gt; too. The &lt;code&gt;db&lt;/code&gt; service uses the official Postgres version &lt;code&gt;14.1&lt;/code&gt; with the &lt;code&gt;alpine&lt;/code&gt; flavor as it is a small image and ultimately a smaller container. It uses some environment variables and volumes, you can read about it more on &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/blob/master/Dockerfile&quot;&gt;Postgres with docker compose&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, the API container is defined that uses a local Dockerfile built with the &lt;code&gt;production&lt;/code&gt; context. It also has some needed environment variables defined and runs on port &lt;code&gt;3000&lt;/code&gt;. It also has volumes so that the data is persisted across container restarts. The main part here is &lt;code&gt;links&lt;/code&gt; (highlighted in yellow in the above code snippte) says that the API links to the &lt;code&gt;db&lt;/code&gt; and can communicate with it.&lt;/p&gt;
&lt;p&gt;If you start both services with &lt;code&gt;docker compose up&lt;/code&gt; it will give a log like the one below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-compose-depends-on/02docker-compose-depends-on-links.jpg&quot; title=&quot;With Docker compose links you cannot specify the startup sequence of the services/containers&quot; alt=&quot;With Docker compose links you cannot specify the startup sequence of the services/containers&quot; /&gt;
&lt;p&gt;Notice that before the DB has fully started the API has started, this will be similar even if &lt;code&gt;depends_on&lt;/code&gt; is used without a condition.&lt;/p&gt;
&lt;p&gt;In the next section, you will learn about the depends on and service_healthy condition.&lt;/p&gt;
&lt;h2 id=&quot;docker-compose-depends-on-under-the-covers&quot; tabindex=&quot;-1&quot;&gt;Docker compose depends on under the covers &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/#docker-compose-depends-on-under-the-covers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Docker compose &lt;code&gt;depends_on&lt;/code&gt; only &lt;a href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/%E2%80%8B%E2%80%8Bhttps://docs.docker.com/compose/startup-order/&quot;&gt;specifies the order&lt;/a&gt; in which the services should start when no conditions are used. While &lt;code&gt;depends_on&lt;/code&gt; ensures that services start in the correct order, it&#39;s important to understand that it does not guarantee that the dependent service is ready to accept connections or requests.&lt;/p&gt;
&lt;p&gt;To address this, you can use additional tools or techniques to check the readiness of the dependent service. One common approach is to use a health check script or tool that verifies the service&#39;s availability before proceeding. For example, you could use a script that checks if the PostgreSQL database is listening on port 5432 before starting your Node.js application. &lt;a href=&quot;https://github.com/vishnubob/wait-for-it&quot;&gt;Wait for it&lt;/a&gt; is a  tool you can reach but it is not the docker compose native way of waiting for the dependent service to be ready.&lt;/p&gt;
&lt;p&gt;So what is the native docker compose &lt;code&gt;depends_on&lt;/code&gt; way to do it, you will know about it next.&lt;/p&gt;
&lt;h3 id=&quot;services-startup-condition-with-service_healthy&quot; tabindex=&quot;-1&quot;&gt;Services startup condition with service_healthy &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/#services-startup-condition-with-service_healthy&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Docker Compose added a new &lt;a href=&quot;https://docs.docker.com/compose/startup-order/#control-startup&quot;&gt;condition&lt;/a&gt; called &lt;code&gt;service_started&lt;/code&gt; and &lt;code&gt;service_healthy&lt;/code&gt; conditions. The &lt;code&gt;service_healthy&lt;/code&gt; condition allows you to specify that a service should only start after another service has successfully started with a health check. This provides a more fine-grained level of control in conjunction with &lt;code&gt;depends_on&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;service_healthy&lt;/code&gt;, you can specify a condition that checks the health of the dependent service. For example, you can specify that a service should only start after the dependent service has started and is listening on a specific port. This ensures that the dependent service is ready to accept connections before the service that depends on it starts.&lt;/p&gt;
&lt;p&gt;You can use just depends_on with docker compose but it will only make sure that the dependent services start before the one that depends on it. To make sure that the dependent service has started and is ready/healthy to start accepting requests/connections use &lt;code&gt;depends_on&lt;/code&gt; with a health check on the dependent service. You can have a look at an example in the next section.&lt;/p&gt;
&lt;h2 id=&quot;example-with-depends_on-and-service_healthy-condition&quot; tabindex=&quot;-1&quot;&gt;Example with depends_on and service_healthy condition &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/#example-with-depends_on-and-service_healthy-condition&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s consider a practical example to illustrate how to use &lt;code&gt;depends_on&lt;/code&gt; with the &lt;code&gt;service_healthy&lt;/code&gt; condition. You will use the same Node.js API that connects to a PostgreSQL database to fetch quotes. You want to ensure that the PostgreSQL database starts and can accept connections before your Node.js application starts.&lt;/p&gt;
&lt;p&gt;Here&#39;s how you can achieve this with a docker-compose.yml file:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token key atrule&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;14.1&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; always&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;healthcheck&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CMD-SHELL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pg_isready -U postgres&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5s&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5s&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; POSTGRES_USER=postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; POSTGRES_PASSWORD=postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;5432:5432&#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/var/lib/postgresql/data&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ./db/init.sql&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/docker&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;entrypoint&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;initdb.d/create_tables.sql&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token key atrule&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;api&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ./&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; production&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;api&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; always&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;        &lt;span class=&quot;token key atrule&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; service_healthy&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; 3000&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; production&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;DB_HOST&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; db&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;DB_PORT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5432&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;DB_USER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;DB_PASSWORD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token key atrule&quot;&gt;DB_NAME&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ./&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/src&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; /src/node_modules&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token key atrule&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example as the above one, you have two services: &lt;code&gt;db&lt;/code&gt; and &lt;code&gt;api&lt;/code&gt;. The &lt;code&gt;db&lt;/code&gt; service uses the official PostgreSQL 14.1 Alpine image and exposes port 5432. It also defines environment variables for the database user, password, and database name. The &lt;code&gt;api&lt;/code&gt; service represents your Node.js application, which depends on the &lt;code&gt;db&lt;/code&gt; service. This dependency is specified using the &lt;code&gt;depends_on&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;The Node.js app specifies that it &lt;code&gt;depends on&lt;/code&gt; the db service. The additional condition on the depends on you have specified is the dependent service has to be healthy with &lt;code&gt;service_healthy&lt;/code&gt;. It has been highlighted in yellow in the above code. This makes sure that the &lt;code&gt;api&lt;/code&gt; services starts only after the &lt;code&gt;db&lt;/code&gt; service is healthy (able to receive connections).&lt;/p&gt;
&lt;p&gt;On the &lt;code&gt;db&lt;/code&gt; service a &lt;a href=&quot;https://docs.docker.com/compose/compose-file/05-services/#healthcheck&quot;&gt;healthcheck&lt;/a&gt; is defined that uses the &lt;a href=&quot;https://www.postgresql.org/docs/current/app-pg-isready.html&quot;&gt;pg_isready&lt;/a&gt; tool. There are some options for the health check, first one is the test for the health check. To check if the DB is healthy you are using the &lt;code&gt;pg_isready&lt;/code&gt; tool that checks the connection status of a PostgreSQL server, the exit status for this command determines the status.&lt;/p&gt;
&lt;p&gt;There are other options for &lt;code&gt;health check&lt;/code&gt; like interval, timeout, and retires. For this example, you are specifying a retry of a maximum of 5 times every 5-second interval with a timeout of 5 seconds. All this has been highlighted in yellow in the above code snippet.&lt;/p&gt;
&lt;p&gt;There is also the &lt;code&gt;service_completed_successfully&lt;/code&gt; option. This option specifies that a dependency is expected to run to successful completion before starting a dependent service. It is another option you can use if you deem it is the right one. For this example, you will use the &lt;code&gt;serivice_healthy&lt;/code&gt; option as specified in the above docker-compose file.&lt;/p&gt;
&lt;p&gt;When you run &lt;code&gt;docker compose up&lt;/code&gt;, Docker Compose will start the &lt;code&gt;db&lt;/code&gt; service first, followed by the &lt;code&gt;api&lt;/code&gt; service. This ensures that the PostgreSQL database runs before your Node.js application attempts to connect to it.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-compose-depends-on/03docker-compose-depends-on-healthy.jpg&quot; title=&quot;With Docker compose depends_on and condition service_healthy you cannot specify the startup order of the services and the dependency&quot; alt=&quot;With Docker compose depends_on and condition service_healthy you cannot specify the startup order of the services and the dependency&quot; /&gt;
&lt;p&gt;As seen above, the Node.js API this time only started after the Postgres database had started and was deemed healthy by the &lt;code&gt;pg_isready&lt;/code&gt; tool that tried to connect using the &lt;code&gt;postgres&lt;/code&gt; user. So once you see this log, you can go to &lt;code&gt;http://localhost/quotes&lt;/code&gt; and you are sure to see the output on the database. Which takes us to the end of this beginner&#39;s guide.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/docker-compose-depends-on/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;depends_on&lt;/code&gt; option in Docker Compose is a valuable tool for ensuring that services start-up in the correct order with dependiences in a healthy state. By specifying dependencies between services, you can avoid errors and ensure your application functions seamlessly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, it&#39;s important to remember that &lt;code&gt;depends_on&lt;/code&gt; only controls the startup order and does not guarantee service readiness by default. Use additional tools or techniques, such as health checks, to verify the availability of dependent services before starting services that rely on them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By understanding and effectively using &lt;code&gt;depends_on&lt;/code&gt;, you can streamline the development and deployment of your multi-container applications, ensuring they run smoothly and reliably. I hope you learned the proper way to use docker compose depends on, keep containerizing and using docker compose more effectively!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to create a text summarizer API using Gemini on Vertex AI with Node.js a step-by-step guide [Part 2]</title>
		<link href="https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/"/>
		<updated>2024-02-22T12:47:42Z</updated>
		<id>https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/</id>
		<content type="html">&lt;p&gt;Gemini by Google is a powerful LLM and in this tutorial, you will use the Gemini Pro 1.0 version to summarize text from a URL. In the previous &lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/&quot;&gt;part&lt;/a&gt; you learned how to set up a GCP project, try out the prompt on Vertex AI studio and then try to code on the CLI. In this part, you will refactor and converter that code to take in a URL, scrape its content, and use it to create the summary, let&#39;s get going!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs-api/01gemini-vertex-ai-nodejs-api.jpg&quot; title=&quot;How to create a text summarizer API using Gemini on Vertex AI with Node.js a step-by-step guide [Part 2]&quot; alt=&quot;How to create a text summarizer API using Gemini on Vertex AI with Node.js a step-by-step guide [Part 2]&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#where-we-left-in-the-last-part&quot;&gt;Where we left in the last part&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#build-the-node.js-api&quot;&gt;Build the Node.js API&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#create-gemini.js-file&quot;&gt;Create gemini.js file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#add-scraper.js-file&quot;&gt;Add scraper.js file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#new-cli.js&quot;&gt;New cli.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#build-the-express.js-api&quot;&gt;Build the Express.js API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;where-we-left-in-the-last-part&quot; tabindex=&quot;-1&quot;&gt;Where we left in the last part &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#where-we-left-in-the-last-part&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From the &lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/&quot;&gt;last part&lt;/a&gt;, you have a folder called &lt;code&gt;summarizer-gemini&lt;/code&gt; which has the &lt;code&gt;@google-cloud/vertexai&lt;/code&gt; NPM module installed and &lt;code&gt;cli.js&lt;/code&gt; file that can summarize the static text which is in the same file. When you run &lt;code&gt;node –no-warnings cli.js&lt;/code&gt;, it will show you an output similar to the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/17cli-output-sync.jpg&quot; title=&quot;Better one shot non-streamed output after changing the code to work in a sync manner&quot; alt=&quot;Better one shot non-streamed output after changing the code to work in a sync manner&quot; /&gt;
&lt;p&gt;After the quick recap, in the next section, you will build the API step-by-step starting with some code refactoring and reorganization. Then you will add a scraper and glue everything up with two entry points, one is a CLI and another one is a Web App with API.&lt;/p&gt;
&lt;h2 id=&quot;build-the-node.js-api&quot; tabindex=&quot;-1&quot;&gt;Build the Node.js API &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#build-the-node.js-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the first task for this part, you will refactor the code from &lt;code&gt;cli.js&lt;/code&gt; to another file called &lt;code&gt;gemini.js&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;create-gemini.js-file&quot; tabindex=&quot;-1&quot;&gt;Create gemini.js file &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#create-gemini.js-file&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Create a new file called &lt;code&gt;gemini.js&lt;/code&gt; and it will have the following code (which is similar to the &lt;code&gt;cli.js&lt;/code&gt; file):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; VertexAI &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;@google-cloud/vertexai&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; vertex_ai &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VertexAI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;gemini-api-414910&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;us-central1&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;gemini-pro&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; generativeModel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertex_ai&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;preview&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getGenerativeModel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;generation_config&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;max_output_tokens&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;temperature&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;top_p&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;safety_settings&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HARM_CATEGORY_HATE_SPEECH&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;threshold&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;BLOCK_MEDIUM_AND_ABOVE&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HARM_CATEGORY_DANGEROUS_CONTENT&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;threshold&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;BLOCK_MEDIUM_AND_ABOVE&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HARM_CATEGORY_SEXUALLY_EXPLICIT&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;threshold&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;BLOCK_MEDIUM_AND_ABOVE&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HARM_CATEGORY_HARASSMENT&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;threshold&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;BLOCK_MEDIUM_AND_ABOVE&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getSummary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prompt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;As an expert writer with more than a decade of experience please summarize the following in under 125 words words. You are allowed to rephrase given the summary means the same as the original text:&#92;n&#92;n&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; req &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;user&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;prompt&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;text&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; resp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; generativeModel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateContent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; summary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; resp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;response&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;candidates&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;content&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;parts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; summary&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  getSummary&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The things that have changed here is, that you have renamed the &lt;code&gt;getContent&lt;/code&gt; function to &lt;code&gt;getSummary&lt;/code&gt;. Then you have also removed the static text that had news about removing waste from waterways to a new variable called &lt;code&gt;text&lt;/code&gt;. The &lt;code&gt;text&lt;/code&gt; variable is passed in as a parameter to the &lt;code&gt;getSummary&lt;/code&gt; function which makes it dynamic. Then you expose the get summary with the &lt;code&gt;module.exports&lt;/code&gt; so that it can be used with require in any other file and get the returned summary.&lt;/p&gt;
&lt;p&gt;In the next section, you will add a basic scraper using Axios and Cheerio (packaged together as axrio).&lt;/p&gt;
&lt;h3 id=&quot;add-scraper.js-file&quot; tabindex=&quot;-1&quot;&gt;Add scraper.js file &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#add-scraper.js-file&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As the aim is to scrape content from a given URL, you will need to add a new NPM package. It is a mixture of &lt;a href=&quot;https://axios-http.com/&quot;&gt;Axios&lt;/a&gt; and &lt;a href=&quot;https://cheerio.js.org/&quot;&gt;Cheerio&lt;/a&gt; called &lt;a href=&quot;https://www.npmjs.com/package/@geshan/axrio&quot;&gt;Axrio&lt;/a&gt;. The readme shows how easy it is to use to scrape any given web page. To install &lt;code&gt;axrio&lt;/code&gt; you can run the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--save&lt;/span&gt; @geshan/axrio&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running the &lt;code&gt;npm install&lt;/code&gt; will result in something as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs-api/02install-axrio.jpg&quot; title=&quot;Install axrio with NPM to scrape any web page&quot; alt=&quot;Install axrio with NPM to scrape any web page&quot; /&gt;
&lt;p&gt;After that you can create a new file named &lt;code&gt;scraper.js&lt;/code&gt; which should have the following content:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; axrio &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;@geshan/axrio&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; timeoutInMs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; $ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; axrio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; timeoutInMs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bodyContents &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;body&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;tag&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; bodyContents&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  getContents&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s analyze the contents of this file, first, you require the &lt;code&gt;axrio&lt;/code&gt; package. After that, a function named &lt;code&gt;getContents&lt;/code&gt; is defined that takes in a URL parameter. In that function, you load the page contents using Axrio to a &lt;code&gt;$&lt;/code&gt; const. Then you loop through all the nodes of the &lt;code&gt;body&lt;/code&gt; tag. If the element is a &lt;code&gt;tag&lt;/code&gt; (not a &lt;code&gt;script&lt;/code&gt;) it adds it to the array (with the map). At the end, it joins all the pieces with a space in between them.&lt;/p&gt;
&lt;p&gt;That is the contents of the page and it returns it. In case of any error, it logs the error and returns an empty string. To test this out you will create a new &lt;code&gt;cli.js&lt;/code&gt; that will use both the scraper and Gemini files, next.&lt;/p&gt;
&lt;h3 id=&quot;new-cli.js&quot; tabindex=&quot;-1&quot;&gt;New cli.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#new-cli.js&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now let’s glue up the Scraper and the Gemini service from the new &lt;code&gt;cli.js&lt;/code&gt;. The new &lt;code&gt;cli.js&lt;/code&gt; will look like the below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; scraper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./scraper&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; summaryGenerator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./gemini&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://7news.com.au/news/travellers-arriving-in-nsw-urged-to-check-luggage-for-unwanted-stowaway-c-13642953&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Getting summary for url: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &#92;n&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pageContents &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; scraper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pageContents&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Could not get data from the given URL&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; summaryGenerator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSummary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pageContents&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, you first require the &lt;code&gt;scraper.js&lt;/code&gt; and the &lt;code&gt;gemini.js&lt;/code&gt;  as &lt;code&gt;summaryGenerator&lt;/code&gt;. Then you have an async &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIEF&lt;/a&gt; - Immediately Invoked Function Expression which parses the URL from the CLI parameters. If the URL is not provided it falls back to a News post from 7News. Then it prints the URL it is going to use for scraping and ultimately generating a summary.&lt;/p&gt;
&lt;p&gt;After that, it sends the URL to the scraper’s &lt;code&gt;getContents&lt;/code&gt; function to get the contents of that web page. If there is no content (even due to an error) it returns &lt;code&gt;could not get data from the given URL&lt;/code&gt; else it sends the page contents to the &lt;code&gt;getSummary&lt;/code&gt; of the &lt;code&gt;gemini.js&lt;/code&gt; file to get the summary.&lt;/p&gt;
&lt;p&gt;If you run this script with &lt;code&gt;node --no-warnings cli.js https://7news.com.au/news/advice-for-swifties-on-getting-to-taylor-swifts-eras-tour-shows-at-sydney-olympic-park-c-13672302&lt;/code&gt; it will show something like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs-api/03updated-cli.jpg&quot; title=&quot;New CLI file that can take in the URL scrape it and send out the summary&quot; alt=&quot;New CLI file that can take in the URL scrape it and send out the summary&quot; /&gt;
&lt;p&gt;Now the summarizer is working in the CLI, if you don’t provide a URL it will fallback to the 7News luggage URL. There is a two-second timeout for fetching the page so it will throw an error for slow websites. There is no validation of the URL and other things can be made better too. In the next section, you will add it working as an API.&lt;/p&gt;
&lt;h3 id=&quot;build-the-express.js-api&quot; tabindex=&quot;-1&quot;&gt;Build the Express.js API &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#build-the-express.js-api&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To build the API layer on your summarizer using Gemini you will need to install Express.js first with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--save&lt;/span&gt; express&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will look like the below when express is installed with NPM:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs-api/04install-express.jpg&quot; title=&quot;Install latest Express.js with npm install&quot; alt=&quot;Install latest Express.js with npm install&quot; /&gt;
&lt;p&gt;Then you can add a file named &lt;code&gt;index.js&lt;/code&gt; on the root with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; scraper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./scraper&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; summaryGenerator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./gemini&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3000&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;alive&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/summary&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;url &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://7news.com.au/news/travellers-arriving-in-nsw-urged-to-check-luggage-for-unwanted-stowaway-c-13642953&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//validates if given string is a valid URL&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;provider URL &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; is not a valid URL&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Getting summary for url: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &#92;n&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pageContents &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; scraper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pageContents&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Could not get data properly from the given URL&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; summary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; summaryGenerator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSummary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pageContents&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; summary &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Listening to requests on http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this file that has a web server with Express.js, you first require all 3 components needed to make the summarizer API work. Those are the express instance, scraper, and the &lt;code&gt;gemini.js&lt;/code&gt; file required as the &lt;code&gt;summaryGenerator&lt;/code&gt; const.&lt;/p&gt;
&lt;p&gt;Then, you instantiate a new express app as the &lt;code&gt;app&lt;/code&gt; const and pull in the port from the environment variable. If the environment variable of &lt;code&gt;PORT&lt;/code&gt; is not set you fall back to port &lt;code&gt;3000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first route you have added for the Express app is &lt;code&gt;/&lt;/code&gt; which returns a JSON object with a &lt;code&gt;message&lt;/code&gt; key that has the value &lt;code&gt;alive&lt;/code&gt;. This acts like a health check for the summarizer API.&lt;/p&gt;
&lt;p&gt;After that the bulk of the work is taking place in the &lt;code&gt;/summary&lt;/code&gt; GET API route. Here you try to get the &lt;code&gt;url&lt;/code&gt; from the query parameter &lt;code&gt;url&lt;/code&gt; if not found, you fall back to the news story about luggage in NSW by 7News. It also checks if the given string is a valid URL using the &lt;code&gt;new URL&lt;/code&gt; construct. If it is not a valid URL the API responds with a status code of &lt;code&gt;400&lt;/code&gt; and a relevant message.&lt;/p&gt;
&lt;p&gt;Then you log the URL to know which web page is being scraped. Subsequently, you scrape the content of that URL’s web page by passing the URL in the scraper’s &lt;code&gt;getContent&lt;/code&gt; function. It will return the contents of the page if things go fine else it will come back with an empty string. The case of the empty string being returned will translate into a 501 response with the message &lt;code&gt;Could not get data properly from the given URL&lt;/code&gt;. This can happen if the URL takes more than 2 seconds to respond or the data cannot be easily parsed by the scraper.&lt;/p&gt;
&lt;p&gt;If all goes well it will respond with the summary in the &lt;code&gt;summary&lt;/code&gt; key of the response. At the end of the file the web server is started with the &lt;code&gt;app.listen&lt;/code&gt; call with a log when the server starts.&lt;/p&gt;
&lt;p&gt;You can run it with &lt;code&gt;node index.js&lt;/code&gt;, for local development you can also use &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;nodemon&lt;/a&gt;. You can also add it as the &lt;code&gt;npm start&lt;/code&gt; script in the &lt;code&gt;package.json&lt;/code&gt; file’s script section as highlighted below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;echo &#92;&quot;Error: no test specified&#92;&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can run &lt;code&gt;npm start&lt;/code&gt; on the root of the folder which will give the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs-api/05npm-start.jpg&quot; title=&quot;Start the summarizer API Express.js server with npm start&quot; alt=&quot;Start the summarizer API Express.js server with npm start&quot; /&gt;
&lt;p&gt;After that if you go to your favorite browser and hit &lt;code&gt;http://localhost:3000/summary?url=https://developer.mozilla.org/en-US/docs/Glossary/IIFE&lt;/code&gt; on the address bar you will see something like the below (if everything went fine):&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs-api/06gemini-summarizer-api-working.jpg&quot; title=&quot;Gemini based text summarizer API working with Node.js and Express&quot; alt=&quot;Gemini based text summarizer API working with Node.js and Express&quot; /&gt;
&lt;p&gt;There you have it, you have successfully converted the sample that you got from Vertex AI - &lt;code&gt;Get Code&lt;/code&gt; section into a working API. You can easily deploy it to a service like Cloud Run on GCP with or without Dockerzing the app. If you push your code to GitHub you can also use &lt;a href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/&quot;&gt;Cloud Shell Editor&lt;/a&gt; to get and deploy the code to Cloud Run, which can be a topic for another blog post. To deploy this code on Cloud Run, some other things will need to be dynamic or picked from the environment variables like the GCP project and GCP location.&lt;/p&gt;
&lt;p&gt;The code is also available as an open-source &lt;a href=&quot;https://github.com/geshan/summarizer-gemini&quot;&gt;GitHub repository&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;p&gt;You can also create a &lt;a href=&quot;https://geshan.com.np/blog/2024/04/gemini-ecommerce-product-description-generator/&quot;&gt;e-commerce product description generator&lt;/a&gt; using Gemini over Vertex AI that takes in pictures and a prompt to give out a decent product description. Try it.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In part 2 of this tutorial, you were able to convert the sample code into a full-fledged API. You also have a quick way to test out any URL using the modified &lt;code&gt;cli.js&lt;/code&gt; file. Here is the &lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/&quot;&gt;part 1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope it gives you a solid base to create your Gen AI apps using the Gemini API on Vertex AI in the Google Cloud Platform. This is just scratching the surface, with the right prompts you can create APIs that can do many things like categorize text, generate other text, etc. The possibilities are endless. I hope you learned a useful skill.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to create a text summarizer using Gemini over Vertex AI with Node.js a step-by-step guide [Part 1]</title>
		<link href="https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/"/>
		<updated>2024-02-21T12:45:42Z</updated>
		<id>https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/</id>
		<content type="html">&lt;p&gt;Gemini by Google is a powerful multimodal Large Language Model (LLM) capable of taking images, videos, and text as input and generating text and images. &lt;a href=&quot;https://gemini.google.com/&quot;&gt;Gemini&lt;/a&gt; has 3 versions Nano, Pro, and Ultra. For this post, you will use Gemini Pro 1.0 via &lt;a href=&quot;https://cloud.google.com/vertex-ai&quot;&gt;Vertex AI&lt;/a&gt; to create summarizer then run it on the CLI using Node.js, let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/01gemini-vertex-ai-nodejs.jpg&quot; title=&quot;How to create a text summarizer using Gemini over Vertex AI with Node.js a step-by-step guide [Part 1]&quot; alt=&quot;How to create a text summarizer using Gemini over Vertex AI with Node.js a step-by-step guide [Part 1]&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/#summarizer-with-gemini-api-on-vertex-ai&quot;&gt;Summarizer with Gemini API on Vertex AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/#run-the-summarizer-in-the-cli-with-nodejs&quot;&gt;Run the summarizer in the CLI with Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/#next-steps&quot;&gt;Next steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before getting your hands dirty with the code, below are some prerequisites you should have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You should have a running Google Cloud Account, GCP gives $300 &lt;a href=&quot;https://cloud.google.com/free&quot;&gt;free&lt;/a&gt; for 90 days for new accounts. Be aware of the &lt;a href=&quot;https://cloud.google.com/vertex-ai/pricing&quot;&gt;Vertex AI pricing&lt;/a&gt; for Gemini APIs.&lt;/li&gt;
&lt;li&gt;A basic understanding of Node.js and the NPM package manager is expected. You should have Node and NPM CLIs running on your local. The code has been tested with Node 20.x.&lt;/li&gt;
&lt;li&gt;You have the &lt;code&gt;gcloud&lt;/code&gt; &lt;a href=&quot;https://cloud.google.com/sdk/gcloud&quot;&gt;cli&lt;/a&gt; working on your machine.&lt;/li&gt;
&lt;li&gt;Some git knowledge will be good to have but not required&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, you will start using the Gemini Pro API over Vertex AI.&lt;/p&gt;
&lt;h2 id=&quot;summarizer-with-gemini-api-on-vertex-ai&quot; tabindex=&quot;-1&quot;&gt;Summarizer with Gemini API on Vertex AI &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/#summarizer-with-gemini-api-on-vertex-ai&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given the prerequisites are mentioned, the first task for you is to test out the summarizer app on Vertex AI. To do ths, you will first login to your Google Cloud Platform &lt;a href=&quot;https://console.cloud.google.com/&quot;&gt;console&lt;/a&gt; and create a new project as follows on the &lt;a href=&quot;https://console.cloud.google.com/projectcreate&quot;&gt;Project Create&lt;/a&gt; page:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/02gcp-create-project.jpg&quot; title=&quot;Create a new GCP project&quot; alt=&quot;Create a new GCP project&quot; /&gt;
&lt;p&gt;You can name the project &lt;code&gt;gemini-api&lt;/code&gt; as seen above and click the “Create” button selecting the right billing account (and organization if you have any relevant one).&lt;/p&gt;
&lt;p&gt;It will take some time and the project will be created with a notification about it, you can select the project from the notification (under the bell icon) as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/03gcp-select-project.jpg&quot; title=&quot;Select your newly created GCP projct to use it for building the summarizer&quot; alt=&quot;Select your newly created GCP projct to use it for building the summarizer&quot; /&gt;
&lt;p&gt;After that, search for &lt;code&gt;vertex ai&lt;/code&gt; on the search bar and click the &lt;code&gt;Vertex AI&lt;/code&gt; option from the inline search results as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/04vertex-ai-search.jpg&quot; title=&quot;Search for vertex ai on the GCP console search bar&quot; alt=&quot;Search for vertex ai on the GCP console search bar&quot; /&gt;
&lt;p&gt;On the Vertex AI page, at the left sidebar scroll a bit down and click the &lt;code&gt;Language&lt;/code&gt; option &lt;code&gt;Vertex AI Studio&lt;/code&gt;, you will be given the option to enable the Vertex AI APIs for the project as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/05enable-apis.jpg&quot; title=&quot;Enable the Vertex AI APIs to use Gemini 1.0 Pro LLM&quot; alt=&quot;Enable the Vertex AI APIs to use Gemini 1.0 Pro LLM&quot; /&gt;
&lt;p&gt;Click &lt;code&gt;Enable&lt;/code&gt; on the above screen, it will show &lt;code&gt;Enabled&lt;/code&gt; with a green tick then close it, and then in the second overlay click “Agree and Continue” as follows&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/06vertex-ai-studio-agree.jpg&quot; title=&quot;Agree the Vertex AI terms and conditions to move head&quot; alt=&quot;Agree the Vertex AI terms and conditions to move head&quot; /&gt;
&lt;p&gt;After that, click &lt;code&gt;Text Prompt&lt;/code&gt; in the Generate text card found below “Create New Prompt” as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/07text-prompt.jpg&quot; title=&quot;Select text prompt to create a summarizer&quot; alt=&quot;Select text prompt to create a summarizer&quot; /&gt;
&lt;p&gt;In the screen that has the &lt;code&gt;Prompt&lt;/code&gt; text box paste the following:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;As an expert writer &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; more than a decade &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; experience please summarize the following &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; under &lt;span class=&quot;token number&quot;&gt;125&lt;/span&gt; words words&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; You are allowed to rephrase given the summary means the same &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; the original text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The TerraCycle Global Foundation reached an impressive milestone last month&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; announcing that they’ve removed over &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; million pounds &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; waste from rivers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; canals&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; and waterways&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Since its founding&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; the nonprofit organization has targeted ocean pollution right at its source—waterways&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; When polluted&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; they send waste directly to oceans&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; harming sea life and the environment&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; Over &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt; tons have been diverted and recycled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;And&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; because the Foundation is founded by New Jersey&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;based TerraCycle—a two decades&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;old company known &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; turning plastic waste into useful items &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; sale—none &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; the litter collected ever goes to waste&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;See a link to their cool bracelets below&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Operating &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; canals throughout Bangkok&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Thailand&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TerraCycle’s “world&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;river&lt;/span&gt; waste prevention systems” are implemented &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; the local community and governments to address the complex challenge &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; collecting waste before it enters and pollutes global aquatic systems&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The Foundation is currently operating wildlife&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;safe river traps &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; Thai canals to recover waste directly from the water&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; The waste is then sorted&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; and plastics are separated and recycled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;“We take a holistic approach to reducing plastic waste &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; waterways&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;” said James Scott&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Executive Director &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; the TerraCycle Global Foundation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; “Our operations provide safe&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stable employment &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; members &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; the local Lat Phrao community &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; Bangkok &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; creating cleaner and healthier environments &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; communities along the canal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;”&lt;br /&gt;&lt;br /&gt;TerraCycle Global Foundation’s River Trap&lt;br /&gt;“Reaching &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; waste removal milestone is only the beginning &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; the Foundation’s work to clean our oceans and preserve the planet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;”&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token constant&quot;&gt;CHECK&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Ocean CleanUp Launches Huge System &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; Pacific Garbage Patch to Clean a Football Field Every &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; Seconds&lt;br /&gt;&lt;br /&gt;Indeed&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; last year the Foundation made a Clinton Global Initiative ‘Commitment to Action’&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; a project that prevents ocean waste&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; They pledged to replicate and scale its successful canal cleanup model &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; a &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; Southeast Asia&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; and establish a material recovery center &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; a central hub &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; waste management and educational programs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Check out all the recycling going on at TerraCycle&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; especially their cool beaded bracelets that help collect &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;lbs &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; plastic waste &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; proceeds from every purchase—and &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; it is made from diverted litter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above text is from a news story on &lt;a href=&quot;https://www.goodnewsnetwork.org/nonprofit-diverts-an-ocean-plastic-tide-removing-2-million-pounds-of-trash-from-waterways/&quot;&gt;Good News Network&lt;/a&gt; and the magic sauce, the prompt is:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;As an expert writer &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; more than a decade &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; experience please summarize the following &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; under &lt;span class=&quot;token number&quot;&gt;125&lt;/span&gt; words words&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; You are allowed to rephrase given the summary means the same &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; the original text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After you paste it, click the &lt;code&gt;Submit&lt;/code&gt; button toward the end of the page and it will look as follows after the summarization is done:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/08vertex-ai-gemini-pro-summary.jpg&quot; title=&quot;Text summary generated on Vertex AI with Gemni 1.0 Pro model&quot; alt=&quot;Text summary generated on Vertex AI with Gemni 1.0 Pro model&quot; /&gt;
&lt;p&gt;Hurray! You have created a useful summarizer with very little effort in almost no time. You can click the &lt;code&gt;pencil&lt;/code&gt; icon and save it if you like.&lt;/p&gt;
&lt;p&gt;Make sure that the model is &lt;code&gt;Gemini 1.0 Pro&lt;/code&gt; and you can change the region as per your choice. If you like you can play around with the other parameters like temperature to fine-tune your output. You are also welcome to peep into the &lt;code&gt;Advance settings&lt;/code&gt; like Top-K and Top-P to get a better result. You can learn more about them in this blog post about these &lt;a href=&quot;https://ivibudh.medium.com/a-guide-to-controlling-llm-model-output-exploring-top-k-top-p-and-temperature-parameters-ed6a31313910&quot;&gt;LLM parameters&lt;/a&gt;. You can also update the &lt;code&gt;Safety Settings&lt;/code&gt; if you would like to block things like hate speech, dangerous content, etc.&lt;/p&gt;
&lt;p&gt;In the next section, you will pull in the code provided to make the summarizer work in the CLI.&lt;/p&gt;
&lt;h2 id=&quot;run-the-summarizer-in-the-cli-with-node.js&quot; tabindex=&quot;-1&quot;&gt;Run the summarizer in the CLI with Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/#run-the-summarizer-in-the-cli-with-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is good that your proof concept is running on Vertex AI but your users cannot use it just like that. For that, you will need some code to eventually expose your summarizer as an API to your ultimate users. Vertex AI has some generated code available to make your POC into a working app. To get the code, click the &lt;code&gt;Get Code&lt;/code&gt; link toward the top right of the vertex AI studio page:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/09vertex-ai-get-code.jpg&quot; title=&quot;Vertex AI get code button&quot; alt=&quot;Vertex AI get code button&quot; /&gt;
&lt;p&gt;Then click &lt;code&gt;Node.js&lt;/code&gt; as this is a Node.js example on the slider that comes on the right side of your screen:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/10vertex-ai-nodejs-code.jpg&quot; title=&quot;Vertex AI Node.js code sample for your simple text summarizer&quot; alt=&quot;Vertex AI Node.js code sample for your simple text summarizer&quot; /&gt;
&lt;p&gt;After that, go to a directory and create a new directory named &lt;code&gt;summarizer-gemini&lt;/code&gt;, which on a Nix-based system will be &lt;code&gt;mkdir summarizer-gemini&lt;/code&gt; the to go to the directory &lt;code&gt;cd summarizer-gemini&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In that folder, run &lt;code&gt;npm init -y&lt;/code&gt; and you will see something like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/11npm-init.jpg&quot; title=&quot;Result of npm init to initiate a Node.js project&quot; alt=&quot;Result of npm init to initiate a Node.js project&quot; /&gt;
&lt;p&gt;After that, you can run the following commands as seen on the Vertex AI’s get code slider:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; @google-cloud/vertexai&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will install the Google Cloud’s Vertex AI NPM package on your local machine. That will look like the following when completed:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/12npm-install-gcp-vertex-ai.jpg&quot; title=&quot;Installing the GCP Vertex AI npm package&quot; alt=&quot;Installing the GCP Vertex AI npm package&quot; /&gt;
&lt;p&gt;Subsequently, run the following to log in to your Gcloud account from your CLI:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gcloud auth application-default login&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will open a browser to allow the Google Auth library to access your GCP account from your CLI.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/13gcp-sign-in.jpg&quot; title=&quot;Sign into GCP after running gcloud auth&quot; alt=&quot;Sign into GCP after running gcloud auth&quot; /&gt;
&lt;p&gt;Then you will need to allow the Google Auth Library&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/14gcp-allow.jpg&quot; title=&quot;Allow GCP gcloud auth to access your Google account details&quot; alt=&quot;Allow GCP gcloud auth to access your Google account details&quot; /&gt;
&lt;p&gt;Once that is done you can copy page the whole code that begins with:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;VertexAI&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;@google-cloud/vertexai&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To a file named &lt;code&gt;cli.js&lt;/code&gt; in the folder you are in, it will look something like the below when done correctly:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/15vscode-cli-js.jpg&quot; title=&quot;File structure for cli.js in VS Code&quot; alt=&quot;File structure for cli.js in VS Code&quot; /&gt;
&lt;p&gt;Now in your CLI, you can run &lt;code&gt;node –no-warnings  cli.js&lt;/code&gt;, it will show you an output similar to the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/16cli-output-stream.jpg&quot; title=&quot;Streamed output of the sample code copied from the Vertex AI Studio interface&quot; alt=&quot;Streamed output of the sample code copied from the Vertex AI Studio interface&quot; /&gt;
&lt;p&gt;As the output is streamed, it is not very useful to be used in the CLI. Now, you can change the &lt;code&gt;generateContent&lt;/code&gt; function to look like the below to make it a sync call rather than a streaming one:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;generateContent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prompt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;As an expert writer with more than a decade of experience please summarize the following in under 125 words words. You are allowed to rephrase given the summary means the same as the original text:&#92;n&#92;n&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; req &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;user&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;prompt&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The TerraCycle Global Foundation reached an impressive milestone last month, announcing that they’ve removed over 2 million pounds of waste from rivers, canals, and waterways.&#92;n&#92;nSince its founding, the nonprofit organization has targeted ocean pollution right at its source—waterways. When polluted, they send waste directly to oceans, harming sea life and the environment. Over 1000 tons have been diverted and recycled.&#92;n&#92;nAnd, because the Foundation is founded by New Jersey-based TerraCycle—a two decades-old company known for turning plastic waste into useful items for sale—none of the litter collected ever goes to waste. (See a link to their cool bracelets below.)&#92;n&#92;n&#92;nOperating in canals throughout Bangkok, Thailand, TerraCycle’s “world-class river waste prevention systems” are implemented with the local community and governments to address the complex challenge of collecting waste before it enters and pollutes global aquatic systems.&#92;n&#92;nThe Foundation is currently operating wildlife-safe river traps in Thai canals to recover waste directly from the water. The waste is then sorted, and plastics are separated and recycled.&#92;n&#92;n“We take a holistic approach to reducing plastic waste in waterways,” said James Scott, Executive Director of the TerraCycle Global Foundation. “Our operations provide safe, stable employment for members of the local Lat Phrao community in Bangkok while creating cleaner and healthier environments for communities along the canal.”&#92;n&#92;n&#92;nTerraCycle Global Foundation’s River Trap&#92;n“Reaching this waste removal milestone is only the beginning of the Foundation’s work to clean our oceans and preserve the planet.”&#92;n&#92;nCHECK OUT: Ocean CleanUp Launches Huge System in Pacific Garbage Patch to Clean a Football Field Every 5 Seconds&#92;n&#92;nIndeed, last year the Foundation made a Clinton Global Initiative ‘Commitment to Action’, with a project that prevents ocean waste. They pledged to replicate and scale its successful canal cleanup model in a new region in Southeast Asia, and establish a material recovery center as a central hub for waste management and educational programs.&#92;n&#92;nCheck out all the recycling going on at TerraCycle, especially their cool beaded bracelets that help collect 20-lbs of plastic waste with proceeds from every purchase—and 100% of it is made from diverted litter.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; resp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; generativeModel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateContent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; summary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; resp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;response&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;candidates&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;content&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;parts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;summary&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s analyze the things that changed. First, you introduced a const called &lt;code&gt;prompt&lt;/code&gt; that has the prompt to summarize the text. This makes separating the prompt from the text to work on. Then you used it as part of the request.&lt;/p&gt;
&lt;p&gt;In place of the &lt;code&gt;generateContentStream&lt;/code&gt; you have replaced it with the &lt;code&gt;generateContent&lt;/code&gt; to get the final result compared to following a stream approach. You can configure the request params as per the official &lt;a href=&quot;https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/gemini#gemini-pro&quot;&gt;docs&lt;/a&gt;. After the response is received, you pull out the text and print it on the screen with a &lt;code&gt;console.log&lt;/code&gt;. It looks like the following when you again run &lt;code&gt;node –no-warnings cli.js&lt;/code&gt;:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/gemini-vertex-ai-nodejs/17cli-output-sync.jpg&quot; title=&quot;Better one shot non-streamed output after changing the code to work in a sync manner&quot; alt=&quot;Better one shot non-streamed output after changing the code to work in a sync manner&quot; /&gt;
&lt;p&gt;You need the &lt;code&gt;--no warnings&lt;/code&gt; to not print any warnings about the fetch object. There you have a basic example of creating a summarizer in your CLI.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot; tabindex=&quot;-1&quot;&gt;Next steps &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this post, it will feel a bit static and restricted. To change the input text to get a summary you will need to change the file and run the command again. Thereby, in the &lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/&quot;&gt;next part&lt;/a&gt; of this series, you will be able to input a URL to an API. Then the system will scrape the text from that URL and then summarize it.&lt;/p&gt;
&lt;p&gt;It will involve some code refactoring and restructuring to make the code reusable, stay tuned for &lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/&quot;&gt;part 2&lt;/a&gt; where you will convert this code to a more flexible solution with an Express JS API. If you are eager to look at the API code, it is available as an open-source &lt;a href=&quot;https://github.com/geshan/summarizer-gemini&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this post, you learned how to play around with the Vertex AI interface to create a Gemini Pro 1.0 powered summarizer. Then, you pulled in the code to your local on a &lt;code&gt;cli.js&lt;/code&gt; file and changed the code to give a synchronous output compared to a streaming one. I hope it was a good start, more goodness to follow in the &lt;a href=&quot;https://geshan.com.np/blog/2024/02/gemini-vertex-ai-nodejs-api/&quot;&gt;next part&lt;/a&gt;. Keep exploring Gen AI and Gemini!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use Google Cloud Shell Editor to deploy a project from GitHub to Cloud Run</title>
		<link href="https://geshan.com.np/blog/2024/01/cloud-shell-editor/"/>
		<updated>2024-01-22T12:45:42Z</updated>
		<id>https://geshan.com.np/blog/2024/01/cloud-shell-editor/</id>
		<content type="html">&lt;p&gt;Google Cloud Shell Editor is like having a VS code editor inside of your browser that can be used to get most things done. In this post, you will use the Google Cloud Shell editor to pull in code from an open-source repository and deploy it to Cloud Run without leaving your browser. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/01cloud-shell-editor.jpg&quot; title=&quot;How to use Google Cloud Shell Editor to deploy a project from GitHub to Cloud Run&quot; alt=&quot;How to use Google Cloud Shell Editor to deploy a project from GitHub to Cloud Run&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#google-cloud-shell-terminal&quot;&gt;Google Cloud Shell Terminal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#cloud-shell-editor&quot;&gt;Cloud Shell Editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#example-code-to-pull-in-from-github&quot;&gt;Example code to pull in from GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#make-a-small-change&quot;&gt;Make a small change&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#deploy-code-to-cloud-run&quot;&gt;Deploy code to Cloud Run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#check-the-working-app&quot;&gt;Check the working app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;google-cloud-shell-terminal&quot; tabindex=&quot;-1&quot;&gt;Google Cloud Shell Terminal &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#google-cloud-shell-terminal&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Google Cloud Shell is your online command center for Google Cloud. It&#39;s a pre-configured command line environment accessible directly from your web browser. You click an icon on the top right corner with a &lt;code&gt;&amp;gt;_&lt;/code&gt; sign, after you log in to your Google Cloud console to activate Cloud shell. After it is activated, it will open Cloud shell and you have access to a full-fledged interactive shell environment with bash, as seen below&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/02google-cloud-shell-terminal.jpg&quot; title=&quot;Google Cloud Shell terminal window in action&quot; alt=&quot;Google Cloud Shell terminal window in action&quot; /&gt;
&lt;p&gt;When it first appears, it is only half of the screen. You can pull it and expand it to be as long as you like. I have made it cover almost all of the browse space available.&lt;/p&gt;
&lt;p&gt;You get a temporary Compute Engine Virtual machine that can be used for a maximum of 60 hours a week (official doc says &lt;a href=&quot;https://cloud.google.com/shell/docs/quotas-limits&quot;&gt;50&lt;/a&gt; hours). It has &lt;code&gt;gcloud&lt;/code&gt; command the Google Cloud SDK pre-installed and also has languages like Python, Java, Go and Node.js installed on it. You also get &lt;a href=&quot;https://cloud.google.com/shell&quot;&gt;5 GB&lt;/a&gt; of persistent storage. If you need a CLI tool, chances are it might already be there. If it is not there you can &lt;code&gt;apt-get&lt;/code&gt; and get it but remember it is an ephemeral machine.&lt;/p&gt;
&lt;p&gt;In addition to the shell terminal, you also get the Google Cloud Shell Editor which is a version of VS code inside the browser. That is discussed next with a code example which is deployed to Google Cloud Run.&lt;/p&gt;
&lt;h2 id=&quot;cloud-shell-editor&quot; tabindex=&quot;-1&quot;&gt;Cloud Shell Editor &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#cloud-shell-editor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Google Cloud Shell Editor is a web-based code editor that&#39;s included with every Cloud Shell instance. It lets you develop, build, debug, and deploy cloud-based applications directly from your browser, without needing to set up any local development environment. This online code editor has support the languages like JavaScript (Node.js), Java, Python and Go lang with features like syntax highlighting, code completion, linting, and debugging. You can access the Cloud Shell Code Editor by clicking the &lt;code&gt;Open Editor&lt;/code&gt; button&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/03open-editor.jpg&quot; title=&quot;Open the Google Cloud Shell editor&quot; alt=&quot;Open the Google Cloud Shell editor&quot; /&gt;
&lt;p&gt;At first, you will get the legacy editor, to use the latest editor click the &lt;code&gt;Try the new editor&lt;/code&gt; button, as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/04try-new-editor.jpg&quot; title=&quot;Use the new Google Cloud Shell Editor - not the legacy one&quot; alt=&quot;Use the new Google Cloud Shell Editor - not the legacy one&quot; /&gt;
&lt;p&gt;If all goes well, after you authorize and the machine is provisioned in some seconds (not minutes), you will see the Google Cloud Shell Editor as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/05google-cloud-shell-editor.jpg&quot; title=&quot;The new Google Cloud Shell Editor ready for use, looks similar to VS Code&quot; alt=&quot;The new Google Cloud Shell Editor ready for use, looks similar to VS Code&quot; /&gt;
&lt;p&gt;Hurray! You have a full-on VS-Code like editor inside your browser that great. In the next part, you will pull in a simple Node.js Express app and make some changes to it then deploy it to Google Cloud Run without leaving the browser window.&lt;/p&gt;
&lt;h2 id=&quot;example-code-to-pull-in-from-github&quot; tabindex=&quot;-1&quot;&gt;Example code to pull in from GitHub &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#example-code-to-pull-in-from-github&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this tutorial, you will use an example that creates a fictional landing page for a podcast called the “Eventually Podcast”. You can give your email address and &lt;code&gt;Sign up&lt;/code&gt; to know when the podcast is launched, pretty simple. You can read about how it is made in this blog post about &lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/&quot;&gt;Next.js Express tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To pull in the code on your Google Cloud Shell machine VM you can run the following commands within the Google Cloud Shell Editor’s CLI editor. You can start a terminal window by clicking the hamburger menu then going to &lt;code&gt;Terminal &amp;gt; New Terminal&lt;/code&gt; or hitting the relevant shortcut as per your operating system.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/06cloud-shell-editor-terminal.jpg&quot; title=&quot;Open the terminal inside the Google Cloud Shell editor&quot; alt=&quot;Open the terminal inside the Google Cloud Shell editor&quot; /&gt;
&lt;p&gt;After that, you will see then the terminal inside your Google Cloud Shell environment as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/07cloud-shell-editor-terminal-open.jpg&quot; title=&quot;Access the terminal inside the Google Cloud Shell editor&quot; alt=&quot;Access the terminal inside the Google Cloud Shell editor&quot; /&gt;
&lt;p&gt;You can use the main terminal if you choose to but staying inside the editor and using this terminal is better. You can run the following commands to get the needed code from GitHub in the &lt;code&gt;projects&lt;/code&gt; folder:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; projects &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; projects&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone &lt;span class=&quot;token parameter variable&quot;&gt;--branch&lt;/span&gt; no-docker https://github.com/geshan/nodejs-express-tutorial.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line creates the &lt;code&gt;projects&lt;/code&gt; folder and goes into it, the second line clones the repository needed for this example. There are a couple of things you should understand about the &lt;code&gt;git clone&lt;/code&gt;. First is that it is cloning the &lt;code&gt;no-docker&lt;/code&gt; branch, not the master branch and the second is it is using the &lt;code&gt;https&lt;/code&gt; url not the &lt;code&gt;git@github.com…&lt;/code&gt; URL to make things simple and jump the authentication hoop. When the commands are done it will look like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/08cloud-shell-git-clone.jpg&quot; title=&quot;Create projects folder and clone the GitHub repository using HTTPs&quot; alt=&quot;Create projects folder and clone the GitHub repository using HTTPs&quot; /&gt;
&lt;p&gt;Great! At this point, you have the code that you need in your Google Cloud Shell VM. Next, you will make a small change to get a feel of using the Google Cloud Shell Editor.&lt;/p&gt;
&lt;h2 id=&quot;make-a-small-change&quot; tabindex=&quot;-1&quot;&gt;Make a small change &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#make-a-small-change&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given the needed code is on the virtual machine at &lt;code&gt;~/projects/nodejs-express-tutorial&lt;/code&gt;, it can be added to the code editor following the instructions below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open &lt;code&gt;Explorer&lt;/code&gt; (if it is not open) - the first icon on the editor’s left bar&lt;/li&gt;
&lt;li&gt;Then click &lt;code&gt;Open Folder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After that add &lt;code&gt;projects&lt;/code&gt; to the path (which will be your home folder)&lt;/li&gt;
&lt;li&gt;Then select &lt;code&gt;nodejs-express-tutorial&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After that hit ok&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That looks like the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/09cloud-editor-open-project.jpg&quot; title=&quot;Open the project in the cloud shell editor&quot; alt=&quot;Open the project in the cloud shell editor&quot; /&gt;
&lt;p&gt;It will take some time and the code will be loaded on the editor, open the &lt;code&gt;index.js&lt;/code&gt; file as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/10cloud-shell-editor-open-file.jpg&quot; title=&quot;Open the right file from the project in the cloud shell editor&quot; alt=&quot;Open the right file from the project in the cloud shell editor&quot; /&gt;
&lt;p&gt;As you can see the syntax highlight is also there for the JavaScript file. Then add &lt;code&gt; on Google Cloud Run.&lt;/code&gt; on the line no. 18 after &lt;code&gt;amazing people&lt;/code&gt; as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/11edit-file.jpg&quot; title=&quot;Edit the open file to add desired content on the Google Cloud Shell Editor&quot; alt=&quot;Edit the open file to add desired content on the Google Cloud Shell Editor&quot; /&gt;
&lt;p&gt;Now save the file, it is as easy as using an editor on your local machine. You can bring up the terminal again and see if the changes are reflected with a &lt;code&gt;git status&lt;/code&gt; command which will show something like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/12file-edited.jpg&quot; title=&quot;Save the edited file on the Google Cloud Shell Editor&quot; alt=&quot;Save the edited file on the Google Cloud Shell Editor&quot; /&gt;
&lt;p&gt;In the next section, you will deploy this code to Google Cloud Run.&lt;/p&gt;
&lt;h2 id=&quot;deploy-code-to-cloud-run&quot; tabindex=&quot;-1&quot;&gt;Deploy code to Cloud Run &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#deploy-code-to-cloud-run&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As everything is integrated and authenticated. To deploy the code (even without dockerizing) you can run the following &lt;code&gt;gcloud&lt;/code&gt; command and it will deploy the app to Google Cloud Run from the source. As this is a &lt;code&gt;Node.js&lt;/code&gt; application which is one of the &lt;a href=&quot;https://cloud.google.com/run/docs/deploying-source-code&quot;&gt;supported languages&lt;/a&gt; to be from source by Google Cloud Run, it will work even without having a Dockerfile.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gcloud run deploy eventually-podcast &lt;span class=&quot;token parameter variable&quot;&gt;--source&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; --allow-unauthenticated &lt;span class=&quot;token parameter variable&quot;&gt;--region&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;us-central1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you are asking the service to be called &lt;code&gt;eventually-podcast&lt;/code&gt; when deploying to Cloud Run from the source code available in the current folder &lt;code&gt;.&lt;/code&gt; and make it accessible without any authentication. For this example, you chose &lt;code&gt;us-central1&lt;/code&gt; as the region, which can be changed depending on where you want to deploy the app. You can specify other parameters too like memory, cpu, and other. Read it in the &lt;a href=&quot;https://cloud.google.com/sdk/gcloud/reference/run/deploy&quot;&gt;official documentation&lt;/a&gt; of &lt;code&gt;gcloud run deploy&lt;/code&gt; or ask Duet AI. When the command is executed from the &lt;code&gt;nodejs-express-tutorial&lt;/code&gt; folder it will look like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/13deploy-to-cloud-run.jpg&quot; title=&quot;Start deploying the code to Google Cloud Run from source which used Buildpacks&quot; alt=&quot;Start deploying the code to Google Cloud Run from source which used Buildpacks&quot; /&gt;
&lt;p&gt;It will take some minutes to build the image from the source using &lt;a href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/%E2%80%8Bhttps://cloud.google.com/docs/buildpacks/overview&quot;&gt;buildpacks&lt;/a&gt; and then deploy it to Google Cloud Run. You might need to authorize some permissions if you are doing so for the first time. Many things happen in the background to get this job done. Once done it will look as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/14deployed-to-cloud-run.jpg&quot; title=&quot;Code is deployed to Cloud Run and you get a working HTTPS URL to try out&quot; alt=&quot;Code is deployed to Cloud Run and you get a working HTTPS URL to try out&quot; /&gt;
&lt;p&gt;You will see a Cloud Run URL ending with &lt;code&gt;.run.app&lt;/code&gt; where the app is running now.&lt;/p&gt;
&lt;h2 id=&quot;check-the-working-app&quot; tabindex=&quot;-1&quot;&gt;Check the working app &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#check-the-working-app&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When you open the given URL on your browser you can see the app running on Google Cloud Run and also the change you made (highlighted in the screenshot below) as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/15running-app.jpg&quot; title=&quot;The eventually podcast app is running successfully on Google Cloud Run&quot; alt=&quot;The eventually podcast app is running successfully on Google Cloud Run&quot; /&gt;
&lt;p&gt;You can verify it by going to your Cloud Run services list page or by clicking the &lt;code&gt;Cloud Code&lt;/code&gt;  icon (the 6th icon on the left side) and then expanding &lt;code&gt;Cloud Run&lt;/code&gt; in it as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/cloud-shell-editor/16check-editor-cloud-run.jpg&quot; title=&quot;Quick check of the Cloud Run service in Cloud Code inside the Google Cloud Shell Editor&quot; alt=&quot;Quick check of the Cloud Run service in Cloud Code inside the Google Cloud Shell Editor&quot; /&gt;
&lt;p&gt;There you have it, a step-by-step guide to getting code from any open-source GitHub repository (without generating any SSH key), then making a small change and deploying it to Google Cloud Run without leaving your browser.&lt;/p&gt;
&lt;p&gt;As a side note:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google Cloud Shell Editor can be one of the fastest and easiest ways to use and experience Google’s &lt;a href=&quot;https://cloud.google.com/duet-ai&quot;&gt;Duet AI&lt;/a&gt; for developers on a code editor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That could be a good topic for another blog post. Anyhow, you can try some of your Gen AI and prompt engineering chops following this post on &lt;a href=&quot;https://geshan.com.np/blog/2023/12/nodejs-duet-ai-vs-code/&quot;&gt;Node.js and Duet AI on VS Code&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/cloud-shell-editor/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this post, you were introduced to Google Cloud Shell Terminal and Google Cloud Shell Editor. Then you pulled code from a GitHub repository and used the Cloud Shell Editor to make a minor change. After that, you deployed it successfully to Google Cloud Run with a single command, without using Docker. Finally, you could see the app working with an HTTPS URL that ended in &lt;code&gt;.run.app&lt;/code&gt;. As the app has unauthenticated access, it can be accessed by anyone in the world.&lt;/p&gt;
&lt;p&gt;I hope you will utilize both the Cloud Shell terminal and Cloud Shell editor to your advantage and business benefits. Keep learning!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to Use Enums in TypeScript for Cleaner Code</title>
		<link href="https://geshan.com.np/blog/2024/01/typescript-enum/"/>
		<updated>2024-01-02T12:35:42Z</updated>
		<id>https://geshan.com.np/blog/2024/01/typescript-enum/</id>
		<content type="html">&lt;p&gt;TypeScript has emerged as a powerful tool that brings static typing to JavaScript, enhancing code maintainability and reducing bugs. One of TypeScript&#39;s features that significantly contributes to code clarity and organization is Enum, short for enumeration. In this blog post, you will learn more about Enums in TypeScript, why and how to use them, let’s get going!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/typescript-enum/01typescript-enum.jpg&quot; title=&quot;How to Use Enums in TypeScript for Cleaner Code&quot; alt=&quot;How to Use Enums in TypeScript for Cleaner Code&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#what-are-enums&quot;&gt;What are Enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#why-use-typescript-enums&quot;&gt;Why Use TypeScript Enums&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#readability-and-intention&quot;&gt;Readability and Intention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#code-maintainability&quot;&gt;Code Maintainability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#autocompletion-support&quot;&gt;Autocompletion Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#avoiding-magic-values&quot;&gt;Avoiding Magic Values&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#how-to-use-enums-in-typescript&quot;&gt;How to Use Enums in TypeScript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#example---order-status&quot;&gt;Example - Order Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#order-status-with-numeric-enums&quot;&gt;Order Status with Numeric Enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#order-status-with-string-enums&quot;&gt;Order Status with String Enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#heterogeneous-enums&quot;&gt;Heterogeneous Enums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#more-about-enums&quot;&gt;More about Enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-are-enums&quot; tabindex=&quot;-1&quot;&gt;What are Enums &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#what-are-enums&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Enums, short for enumerations, are a feature of languages that allows developers to define a set of named constants, allowing developers to represent a group of related values in a more meaningful and readable way. These named constants represent a distinct set of values that are related in some way.&lt;/p&gt;
&lt;p&gt;Enums are available in other languages like &lt;a href=&quot;https://weyprecht.de/2019/10/16/enums-in-csharp-and-java/&quot;&gt;Java and C#&lt;/a&gt;, even databases like &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/enum.html&quot;&gt;MySQL&lt;/a&gt; and &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/enum.html&quot;&gt;Postgres&lt;/a&gt; have Enum type.  Unfortunately, JavaScript does not support Enums natively, even though a workaround can be to use a regular JavaScript object as a proxy Enum. TypeScript, on the other hand, has support for Enums. In TypeScript, Enum makes it possible to create a symbolic name for a set of values, providing more meaningful names to improve code readability.&lt;/p&gt;
&lt;p&gt;Let&#39;s dive deeper into the structure of Enums in TypeScript. Enum declarations begin with the &lt;code&gt;enum&lt;/code&gt; keyword, followed by the name of the enumeration. Inside the braces, you list the possible values of the enum, each separated by a comma. Below is a simple Enum for traffic lights:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; TrafficLights &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  Red&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Yello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Green&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, you have created an enum named &lt;code&gt;TrafficLights&lt;/code&gt; with three possible values: &lt;code&gt;Red&lt;/code&gt;, &lt;code&gt;Yello&lt;/code&gt;, and &lt;code&gt;Green&lt;/code&gt;. By default, TypeScript assigns numeric values starting from 0 to each enum member. In this case, &lt;code&gt;Red&lt;/code&gt; will have the value 0, &lt;code&gt;Yellow&lt;/code&gt; will have 1, and so on.&lt;/p&gt;
&lt;p&gt;In the next section, you will learn why to use Enums in Typescript.&lt;/p&gt;
&lt;h2 id=&quot;why-use-typescript-enums&quot; tabindex=&quot;-1&quot;&gt;Why Use TypeScript Enums &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#why-use-typescript-enums&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that you understand what Enums are in general and have seen a simple TypeScript example, let&#39;s explore why you might want to use them in your TypeScript projects.&lt;/p&gt;
&lt;h3 id=&quot;readability-and-intention&quot; tabindex=&quot;-1&quot;&gt;Readability and Intention &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#readability-and-intention&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Enums improve the readability of your code by replacing magic numbers or strings with meaningful names. Instead of using &lt;code&gt;if (status === 1)&lt;/code&gt;, you can write &lt;code&gt;if (status === OrderStatus.Processing)&lt;/code&gt;, making your code self-explanatory and reducing the likelihood of errors.&lt;/p&gt;
&lt;h3 id=&quot;code-maintainability&quot; tabindex=&quot;-1&quot;&gt;Code Maintainability &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#code-maintainability&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Enums make your code more maintainable by centralizing the definition of related constants. If you ever need to add, remove, or modify a value, you can do so in one place – the enum declaration; rather than hunting through your codebase for every occurrence of a particular constant. It is also helpful to replace existing values by searching for the enum.&lt;/p&gt;
&lt;h3 id=&quot;autocompletion-support&quot; tabindex=&quot;-1&quot;&gt;Autocompletion Support &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#autocompletion-support&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Integrated development environments (IDEs) that support TypeScript, such as &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;, provide autocompletion for enum members. This accelerates the coding process, minimizes the risk of typos, and decreases the possibility of introducing a bug.&lt;/p&gt;
&lt;h3 id=&quot;avoiding-magic-values&quot; tabindex=&quot;-1&quot;&gt;Avoiding Magic Values &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#avoiding-magic-values&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can avoid magic values with Enums. Using Enums properly &amp;quot;magic values&amp;quot; scattered throughout your code can be centralized in a single location. Magic values are hard-coded constants that lack clear context. Enums provide a named representation, adding clarity to your codebase. For example &lt;code&gt;if (platform === 0)&lt;/code&gt; is much harder to read vs &lt;code&gt;if (platform === platforms.mobile)&lt;/code&gt;, here the 0 is the magic value.&lt;/p&gt;
&lt;p&gt;In the next part, you will learn how to use Typescript Enums with an example of order statuses.&lt;/p&gt;
&lt;h2 id=&quot;how-to-use-enums-in-typescript&quot; tabindex=&quot;-1&quot;&gt;How to Use Enums in TypeScript &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#how-to-use-enums-in-typescript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that you have established the benefits of using Enums, let&#39;s walk through practical examples of how to implement them in TypeScript. For this, you will use order statuses as an example. If you have placed an order on any e-commerce website it will have some status like placed, processing (packed), shipped, and delivered for the happy path. It can also have other statuses like canceled, returned, etc but we will not include them.&lt;/p&gt;
&lt;h3 id=&quot;example---order-status&quot; tabindex=&quot;-1&quot;&gt;Example - Order Status &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#example---order-status&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Consider a scenario where you&#39;re working on an e-commerce platform, and you need to represent different order statuses. Instead of using numeric or string literals, Enums provide a cleaner solution.&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; OrderStatus &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  Placed&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Packed&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Shipped&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Delivered&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, we&#39;ve defined an enum named &lt;code&gt;OrderStatus&lt;/code&gt; with four possible values: &lt;code&gt;Placed&lt;/code&gt;, &lt;code&gt;Packed&lt;/code&gt;, &lt;code&gt;Shipped&lt;/code&gt;, and &lt;code&gt;Delivered&lt;/code&gt;.  More on what the values will be for the above Emum in the next segment.&lt;/p&gt;
&lt;h3 id=&quot;order-status-with-numeric-enums&quot; tabindex=&quot;-1&quot;&gt;Order Status with Numeric Enums &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#order-status-with-numeric-enums&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By default, TypeScript assigns numeric values starting from 0 to each enum member. So, for the above example, &lt;code&gt;Placed&lt;/code&gt; will have a value of 0 and &lt;code&gt;Delivered&lt;/code&gt; will have value of 3. However, you can customize these values if needed, as seen below.&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; OrderStatus &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  Placed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Packed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Shipped &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Delivered &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, &lt;code&gt;OrderStatus.Placed&lt;/code&gt; will have the value 1, &lt;code&gt;OrderStatus.Packed&lt;/code&gt; will have 2, and so on. The following code will also behave the same as the above example:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; OrderStatus &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  Placed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Packed&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Shipped&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Delivered&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can try out all the examples locally with TypeScript or on the &lt;a href=&quot;https://www.typescriptlang.org/play&quot;&gt;TypeScript Playground&lt;/a&gt; without installing anything on your local machine. Below is an example of the auto-incremental values running on the &lt;a href=&quot;https://www.typescriptlang.org/play?#code/KYOwrgtgBA8gTgE2HAygFwIZrAZygbwCgooAFAGwwGNgEoBeKARgBpizqBrWtklACwCWAB2E92AEWDlBAN2TiAvoUJUA9iBxrywAHTk1AcwAU8JKkzYcu0l1oBKIA&quot;&gt;TypeScript Playground&lt;/a&gt;:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/typescript-enum/02typescript-enum-playground.jpg&quot; title=&quot;Order Status TypeScript enum example running on TypeScript playground&quot; alt=&quot;Order Status TypeScript enum example running on TypeScript playground&quot; /&gt;
&lt;p&gt;You can run all the code examples in this blog post on TypeScript playgroud to see how it run and what it compiles to in the form of JavaScript. Next, you will look into Order Status enum with strings.&lt;/p&gt;
&lt;h3 id=&quot;order-status-with-string-enums&quot; tabindex=&quot;-1&quot;&gt;Order Status with String Enums &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#order-status-with-string-enums&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In addition to numeric enums, TypeScript supports string enums, where each enum member is initialized with a string value.&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; OrderStatus &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  Pending &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Pending&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Processing &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Processing&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Shipped &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Shipped&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Delivered &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Delivered&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Canceled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Canceled&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach can be beneficial when you want more descriptive values or use the enum values as keys in an object.&lt;/p&gt;
&lt;p&gt;Next, you will learn about more concepts related to TypeScript emums like Heteregenous enums and extracting object types of Enums.&lt;/p&gt;
&lt;h3 id=&quot;heterogeneous-enums&quot; tabindex=&quot;-1&quot;&gt;Heterogeneous Enums &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#heterogeneous-enums&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Unlike other languages, TypeScript allows for heterogeneous enums, where some members have numeric values, and others have string values. You can also mix up numbers and strings as the values for Enums which is called Heterogenous Enums, as seen below:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; Status &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  Success &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  NotFound &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Not Found&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  Error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Internal Server Error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This flexibility can be useful in scenarios where a mix of data types is required, but that is not recommended in the official &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/enums.html#heterogeneous-enums&quot;&gt;TypeScript docs&lt;/a&gt;. Subsequently, there are some useful concepts about TypeScript Enums that would be great for you to know about.&lt;/p&gt;
&lt;h2 id=&quot;more-about-enums&quot; tabindex=&quot;-1&quot;&gt;More about Enums &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#more-about-enums&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are more things to Enums than the ones already mentioned in this post. It would be useful for you to know about &lt;a href=&quot;https://levelup.gitconnected.com/introduction-to-typescript-enums-const-and-ambient-enums-1fe686b67495&quot;&gt;Ambient Enums&lt;/a&gt;, which are basically like a redefinition of existing enums. Similarly it would be helpful to know about &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-enums-in-typescript#extracting-the-object-type-of-enums&quot;&gt;exrtracting object type of Enums&lt;/a&gt;, that can make it easier to use Enum as a Type in TypeScript. Other couple of interesting things about Enums that would be handy for you to know are, how enums are represented on &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/enums.html#enums-at-runtime&quot;&gt;runtime&lt;/a&gt; and &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/enums.html#enums-at-compile-time&quot;&gt;compile time&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2024/01/typescript-enum/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In conclusion, Enums in TypeScript are a powerful tool for improving code readability, maintainability, and intention. By providing named constants, Enums make your code more self-explanatory and less error-prone. Whether you&#39;re representing order statuses, HTTP status codes, or any other set of related values, Enums offer a cleaner and more organized solution.&lt;/p&gt;
&lt;p&gt;As a software engineer, leveraging Enums in TypeScript is not just a best practice; it&#39;s a step towards writing more robust and maintainable code. Embrace Enums, and witness the transformation of your code into a clearer and more expressive form.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>2023 year in review: Blogging, public speaking, interviews, building communities, etc</title>
		<link href="https://geshan.com.np/blog/2023/12/review-2023/"/>
		<updated>2023-12-26T12:47:53Z</updated>
		<id>https://geshan.com.np/blog/2023/12/review-2023/</id>
		<content type="html">&lt;p&gt;Like &lt;a href=&quot;https://geshan.com.np/blog/2022/12/recap-2022/&quot;&gt;previous&lt;/a&gt; &lt;a href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/&quot;&gt;years&lt;/a&gt;, I would like to write a quick recap of the things I have done in 2023. Taking some time to reflect on the things achieved this year from a professional standpoint would be a great look back, let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/review-2023/01review-2023.jpg&quot; title=&quot;2023 year in review: Blogging, public speaking, interviews, building communities, etc&quot; alt=&quot;2023 year in review: Blogging, public speaking, interviews, building communities, etc&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#highlights&quot;&gt;Highlights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#interviews-for-2-podcasts&quot;&gt;Interviews for 2 podcasts&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#harkas-podcast&quot;&gt;Harka’s podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#careersy-podcast&quot;&gt;Careersy podcast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#blogging-and-writing-in-2023&quot;&gt;Blogging and writing in 2023&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#geshan.com.np&quot;&gt;Geshan.com.np&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#most-viewed-blog-posts-of-2023&quot;&gt;Most viewed blog posts of 2023&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#traffic-is-down-(thanks-to-llms%2C-especially-chatgpt)&quot;&gt;Traffic is down  (thanks to LLMs, especially ChatGPT)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#community-building&quot;&gt;Community building&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#gdg-cloud-sydney&quot;&gt;GDG Cloud Sydney&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#other-gdg-communities&quot;&gt;Other GDG communities&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#gdg-darwin&quot;&gt;GDG Darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#gdg-canberra&quot;&gt;GDG Canberra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#more-coming-soon&quot;&gt;More coming soon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#mentor-at-gdg-devfest-kathmandu&quot;&gt;Mentor at GDG Devfest Kathmandu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#talks-and-events&quot;&gt;Talks and events&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#helped-organize-google-i%2Fo-extended-sydney&quot;&gt;Helped organize Google I/O Extended Sydney&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#conferences&quot;&gt;Conferences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#side-project---speakers-camp&quot;&gt;Side project - Speakers camp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;highlights&quot; tabindex=&quot;-1&quot;&gt;Highlights &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#highlights&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are some of the highlights of the year 2023 from a professional and tech point of view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I was invited for 2 interviews, one in Dubai (taken in the Nepali language) by Harka for his podcast and another one in Sydney by Eli (from &lt;a href=&quot;https://www.careersycoaching.com/&quot;&gt;Carrersy&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Published 25+1 (this review) posts on this blog. Compared to 2023, in the past 12 months, the traffic has gone up by 5% or so but the last 3 months is showing a downward trend. Thanks to LLMs and Google Algorithm changes. I have written 1 post for Simply Wall St. tech and 3 posts for Meticulous, this year.&lt;/li&gt;
&lt;li&gt;The side project for the year was Speakers Camp, where I helped foster 3+ new speakers, more on this later.&lt;/li&gt;
&lt;li&gt;I did 7 public talks this year with 1 being virtual. One of the talks was in Melbourne and another one was in Brisbane. I also did 2 panel discussions as well.&lt;/li&gt;
&lt;li&gt;Growing communities has been a big thing for me this year, especially with a focus on GDG Cloud Sydney community (and other GDG Communities)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have been with Simply Wall St. since 2022, it will be 2 years soon that I have been working with SWS and it has been a great experience. The &lt;a href=&quot;https://medium.com/simplywallst/flexible-working-at-simply-wall-st-a13d5a4fdd82&quot;&gt;flexibility&lt;/a&gt; SWS provides is unparalleled and the &lt;a href=&quot;https://medium.com/simplywallst/5-compelling-reasons-to-work-for-simply-wall-st-tech-49ab9878b283&quot;&gt;tech side of things&lt;/a&gt; is amazing too. Which leads us to the 2 podcast interview I did this year.&lt;/p&gt;
&lt;h2 id=&quot;interviews-for-2-podcasts&quot; tabindex=&quot;-1&quot;&gt;Interviews for 2 podcasts &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#interviews-for-2-podcasts&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I did 2 podcast interviews (some people did not reply to my email, sadly). At least on one, I self-invited myself, and on the other Eli invited me to be a guest. The first one was Harka’s podcast as discussed next:&lt;/p&gt;
&lt;h3 id=&quot;harka%E2%80%99s-podcast&quot; tabindex=&quot;-1&quot;&gt;Harka’s podcast &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#harka%E2%80%99s-podcast&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Harka Lopchan (not Sampang) started his &lt;a href=&quot;https://www.youtube.com/channel/UC5qC4CaoAhJnqrL4NaJWHrw&quot;&gt;podcast&lt;/a&gt; in early 2022. When we went to Dubai in March this year, I self-invited myself as a guest on his podcast. I knew him when I lived in Dubai and we had met a few times before 2018. We discussed a lot of things in this 1 hr 2 min episode from immigration to tech and from Nepal’s economy to blogging. It is a good podcast for anyone interested in migrating to a new country and tech. This podcast is in Nepali language, below is the YouTube video and Spotify:&lt;/p&gt;
&lt;div style=&quot;position: relative;
width: 100%;
height: 0;
padding-bottom: 56.25%; margin-bottom: 1rem;&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/GasVbk2wUHY&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; style=&quot;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;If you would like to listen to the audio version, it is available on &lt;a href=&quot;https://open.spotify.com/episode/1mGcMCcB0zdMWIkbWY4cUo&quot;&gt;Spotify&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the amount of time, energy, and dedication he devotes to this podcast, I wish him 100K and more subscribers soon. Now there are Nepali celebrities, singers, and other personalities as guests in his podcast. I wish him all the best.&lt;/p&gt;
&lt;p&gt;Then in April, I did another podcast with Eli which was released in May.&lt;/p&gt;
&lt;h3 id=&quot;careersy-podcast&quot; tabindex=&quot;-1&quot;&gt;Careersy podcast &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#careersy-podcast&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/eligunduz/?originalSubdomain=au&quot;&gt;Eli&lt;/a&gt; works as a recruiter for Atlassian and he also runs Carrersy for career coaching. It was good to have that discussion with him regarding my career, tech stuff, and things like working remotely. The podcast is below and on &lt;a href=&quot;https://open.spotify.com/episode/14PKPmvxiB2fgIfkQTtuZ5&quot;&gt;Spotify&lt;/a&gt; too:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/episode/14PKPmvxiB2fgIfkQTtuZ5&quot;&gt;https://open.spotify.com/episode/14PKPmvxiB2fgIfkQTtuZ5&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.25%;&quot;&gt;&lt;iframe src=&quot;https://open.spotify.com/embed/episode/14PKPmvxiB2fgIfkQTtuZ5/video?utm_source=oembed&quot; style=&quot;top: 0; left: 0; width: 100%; height: 100%; position: absolute; border: 0;&quot; allowfullscreen=&quot;&quot; scrolling=&quot;no&quot; allow=&quot;clipboard-write; encrypted-media; fullscreen; picture-in-picture;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;Let’s discuss some writing and blogging in the next section.&lt;/p&gt;
&lt;h2 id=&quot;blogging-and-writing-in-2023&quot; tabindex=&quot;-1&quot;&gt;Blogging and writing in 2023 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#blogging-and-writing-in-2023&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have been blogging since 2007, crunching some numbers in the 227 posts on this blog it has 347306 words with an average of ~1530 words per post. More on this, next.&lt;/p&gt;
&lt;h3 id=&quot;geshan.com.np&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;http://geshan.com.np/&quot;&gt;Geshan.com.np&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#geshan.com.np&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This year I wrote 25+1 (this review) posts with 2 posts each month 3 in July and 3 in December were the 2 exception months. This year I have written posts on &lt;a href=&quot;https://geshan.com.np/blog/categories/postgres/&quot;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&quot;https://geshan.com.np/blog/2023/12/review-2023/%E2%80%8B/blog/categories/jest/&quot;&gt;Jest&lt;/a&gt;, Axios, &lt;a href=&quot;https://geshan.com.np/blog/categories/typescript/&quot;&gt;Typescript&lt;/a&gt;, Node.js, &lt;a href=&quot;https://geshan.com.np/blog/categories/gen-ai/&quot;&gt;Gen AI&lt;/a&gt;, Next.js, &lt;a href=&quot;https://geshan.com.np/blog/categories/docker/&quot;&gt;Docker&lt;/a&gt; and other people skills topics too. Even though the traffic has reduced significantly I aim to keep writing blogs in 2024.&lt;/p&gt;
&lt;h3 id=&quot;most-viewed-blog-posts-of-2023&quot; tabindex=&quot;-1&quot;&gt;Most viewed blog posts of 2023 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#most-viewed-blog-posts-of-2023&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The 5 most popular (by views) posts written in this year 2023 are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/01/nextjs-docker/&quot;&gt;How to use Next.js with Docker and Docker compose a beginner&#39;s guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/03/mongodb-docker-compose/&quot;&gt;How to run MongoDB with Docker and Docker Compose a Step-by-Step guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/06/elasticsearch-docker/&quot;&gt;A beginner&#39;s guide to running Elasticsearch with Docker and Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/06/nextjs-env-variables/&quot;&gt;How to use environment variables in Next.js (includes a working example app)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/04/delete-cascade-postgres/&quot;&gt;How to use ON DELETE CASCADE in Postgres with an example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looks like things about Docker get more views :). Next, I will discuss the traffic trends of this blog.&lt;/p&gt;
&lt;h3 id=&quot;traffic-is-down-(thanks-to-llms%2C-especially-chatgpt)&quot; tabindex=&quot;-1&quot;&gt;Traffic is down  (thanks to LLMs, especially ChatGPT) &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#traffic-is-down-(thanks-to-llms%2C-especially-chatgpt)&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I think it is a mix of multiple things but possibly Google’s search traffic for core technical topics has gone down this year after Nov 2022. For example, if you want to run a specific test with Jest, earlier most software engineers would Google it (where my blog post would pop up in the top 5) but now many software engineers will ask the same question to a LLM like ChatGPT or Bard. This surely means traffic to tech blogs like mine and even stack overflow have decreased a lot in 2023. In an official &lt;a href=&quot;https://stackoverflow.blog/2023/08/08/insights-into-stack-overflows-traffic/&quot;&gt;blog post&lt;/a&gt;, Stack Overflow revealed:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Conversely, in April of this year, we saw an above average traffic decrease (~14%), which we can likely attribute to developers trying GPT-4 after it was released in March. Our traffic also changes based on search algorithms, which have a big influence on how our content is discovered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am not going to go into numbers but the situation is bleak, particularly in the last 4 months which might be triggered by Google’s algorithm changes too. Anyhow I will strive to write the usual 2 blog posts a month in 2024 unless I find that it is not beneficial to the readers/audience anymore. Speaking of which, similar web paints the below picture of this blog which was at 358,133 global rank last year this time.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/review-2023/02geshan-blog-2023.jpg&quot; title=&quot;Traffic for this blog as mentioned by Similar web&quot; alt=&quot;Traffic for this blog as mentioned by Similar web&quot; /&gt;
&lt;p&gt;In the next section, coming out of the virtual world let’s step into “IRL - in real life” of communities and meet humans in the flesh.&lt;/p&gt;
&lt;h2 id=&quot;community-building&quot; tabindex=&quot;-1&quot;&gt;Community building &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#community-building&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Your network is your net worth, full stop. If you do not expand your network, when there is a need (particularly a professional one), it will be difficult for you to get the best outcome for the situation. That is also one of the reasons I have dove into community building and nurturing this year.&lt;/p&gt;
&lt;h3 id=&quot;gdg-cloud-sydney&quot; tabindex=&quot;-1&quot;&gt;GDG Cloud Sydney &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#gdg-cloud-sydney&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I started hosting the &lt;a href=&quot;https://www.meetup.com/gdgcloudsydney/&quot;&gt;GDC Cloud Sydney&lt;/a&gt; meetup in March 2023 this year. After I became a co-organizer and assembled a great organizing team, we have done at least &lt;a href=&quot;https://www.meetup.com/gdgcloudsydney/events/?type=past&quot;&gt;one meetup&lt;/a&gt; a month till Nov-2023.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/review-2023/04gdg-cloud-sydney.jpg&quot; title=&quot;Random photo infront of the Google logo in one of the GDG Cloud Sydney meetups&quot; alt=&quot;Random photo infront of the Google logo in one of the GDG Cloud Sydney meetups&quot; /&gt;
&lt;p&gt;When I looked back at the stats of the meetup group, from March 2023 more than 900 people have joined the group and we have seen more than 1450 RSVPs for our meetups. We have also reached more than 3000 members in mid-October this year.&lt;/p&gt;
&lt;h3 id=&quot;other-gdg-communities&quot; tabindex=&quot;-1&quot;&gt;Other GDG communities &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#other-gdg-communities&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have also helped establish or revive existing Google Developer Groups (GDG) communities across Australia. With a big help from Matt, the community manager at Google this feat has been enjoyable.&lt;/p&gt;
&lt;h4 id=&quot;gdg-darwin&quot; tabindex=&quot;-1&quot;&gt;GDG Darwin &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#gdg-darwin&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I helped &lt;a href=&quot;https://www.linkedin.com/in/sujanrdm/?originalSubdomain=au&quot;&gt;Sujan&lt;/a&gt; start &lt;a href=&quot;https://www.meetup.com/gdg-darwin/&quot;&gt;GDG Darwin&lt;/a&gt; which did &lt;a href=&quot;https://www.meetup.com/gdg-darwin/events/?type=past&quot;&gt;3+ meetups&lt;/a&gt; in 2023. Great job by Sujan and the team. It is amazing that Sujan needed only minor guidance and he has taken this big task on his own and executed it successfully. Kudos, to more meetups in Darwin for GDG Darwin.&lt;/p&gt;
&lt;h4 id=&quot;gdg-canberra&quot; tabindex=&quot;-1&quot;&gt;GDG Canberra &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#gdg-canberra&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Then, there is the recently started &lt;a href=&quot;https://www.meetup.com/gdg-canberra/&quot;&gt;GDG Canberra&lt;/a&gt; headed by &lt;a href=&quot;https://www.linkedin.com/in/kiran-gautam/&quot;&gt;Kiran&lt;/a&gt;. The team in Canberra did the &lt;a href=&quot;https://www.meetup.com/gdg-canberra/events/297134615/&quot;&gt;first meetup&lt;/a&gt; in November and another one is planned for late &lt;a href=&quot;https://www.meetup.com/gdg-canberra/events/298065370/&quot;&gt;Jan-2024&lt;/a&gt;. Also a big thanks to &lt;a href=&quot;https://www.abhishekhmaharjan.com/&quot;&gt;Abhishek&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/ramesh-dhoju-6311849b/?originalSubdomain=au&quot;&gt;Ramesh&lt;/a&gt;, and &lt;a href=&quot;https://www.linkedin.com/in/tijanmdr/?originalSubdomain=au&quot;&gt;Tijan&lt;/a&gt; for helping out at GDG Canberra being amazing co-organizers.&lt;/p&gt;
&lt;h4 id=&quot;more-coming-soon&quot; tabindex=&quot;-1&quot;&gt;More coming soon &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#more-coming-soon&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A couple of GDG groups are brewing in Australia, details to follow. The thing here is you need to be part of the community and real-life (in-person) events are even more important after the 2+ years of isolation we have witnessed due to COVID-19. Hopefully, at least two new GDGs will be formed and active in Australian cities by Q1 of 2024, fingers crossed.&lt;/p&gt;
&lt;p&gt;I have been involved in communities since 2006. The main issue for communities not sustaining for long is not having proper backing for financial and operational needs. The other important thing is having great succession planning, if the organizers leave the community should not fall. This is where leaning onto a big company like Google helps sustain communities for a long time.&lt;/p&gt;
&lt;h4 id=&quot;mentor-at-gdg-devfest-kathmandu&quot; tabindex=&quot;-1&quot;&gt;Mentor at GDG Devfest Kathmandu &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#mentor-at-gdg-devfest-kathmandu&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I also got a chance to mentor a couple of speakers for &lt;a href=&quot;https://gdg.community.dev/events/details/google-gdg-kathmandu-presents-devfest-kathmandu-2023/&quot;&gt;GDG Devfest Kathmandu&lt;/a&gt;, which I suppose was helpful for the speakers. Thanks to &lt;a href=&quot;https://www.linkedin.com/in/bibekdhkl/&quot;&gt;Bibek&lt;/a&gt; and the GDG Kathmandu team for this opportunity.&lt;/p&gt;
&lt;p&gt;Next, we will discuss the talks I have given and events I have been a part of.&lt;/p&gt;
&lt;h2 id=&quot;talks-and-events&quot; tabindex=&quot;-1&quot;&gt;Talks and events &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#talks-and-events&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I also got a chance to do 7 talks (one virtual) and 2-panel discussions. I was a judge at a hackathon too. I used 3 talks across 7 events and one of them was presented virtually and another one was done at a university.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/review-2023/03speaking.jpg&quot; title=&quot;Select speaking engagements from 2023&quot; alt=&quot;Select speaking engagements from 2023&quot; /&gt;
&lt;p&gt;I was also part of 2 panel discussions one at Google Sydney in Apr-2023 about Career and groundbreaking technologies.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/review-2023/05panels.jpg&quot; title=&quot;A couple of Panel discussions from 2023&quot; alt=&quot;A couple of Panel discussions from 2023&quot; /&gt;
&lt;p&gt;The second panel discussion was at GDG Devfest Brisbane which included things like career, and other techy things. You can watch the view of that panel discussion below:&lt;/p&gt;
&lt;div style=&quot;position: relative;
width: 100%;
height: 0;
padding-bottom: 56.25%; margin-bottom: 1rem;&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/SVdpDh2uwuQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; style=&quot;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;I also participated as a Judge for a Hackathon at Dented Code Academy in April. It was an interesting event to be a part of:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/review-2023/06judge.jpg&quot; title=&quot;Judging a hackathon at Dented Code Academy&quot; alt=&quot;Judging a hackathon at Dented Code Academy&quot; /&gt;
&lt;p&gt;Now let&#39;s move on to organizing an event a conference in Sydney.&lt;/p&gt;
&lt;h3 id=&quot;helped-organize-google-i%2Fo-extended-sydney&quot; tabindex=&quot;-1&quot;&gt;Helped organize Google I/O Extended Sydney &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#helped-organize-google-i%2Fo-extended-sydney&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Speaking of conferences, I also helped organize &lt;a href=&quot;https://gdg.community.dev/events/details/google-gdg-sydney-presents-google-io-2023-extended/&quot;&gt;Google I/O Extended Sydney 2023&lt;/a&gt;. My contribution was mostly on the part of selecting talks and helping shape the content rather than the logistics side of things. The logistics part of the day was very well managed by &lt;a href=&quot;https://www.linkedin.com/in/arorakartik/&quot;&gt;Kartik Arora&lt;/a&gt; and a team of volunteers which I helped to assemble.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/review-2023/07gio-extended.jpg&quot; title=&quot;A team photo after the Google I/O Extended Sydney 2023 conference&quot; alt=&quot;A team photo after the Google I/O Extended Sydney 2023 conference&quot; /&gt;
&lt;p&gt;I also helped organize an event focused at students liasing with GDSC USyd and GDSC UNSW too.&lt;/p&gt;
&lt;p&gt;Time to discuss about conferences, next.&lt;/p&gt;
&lt;h3 id=&quot;conferences&quot; tabindex=&quot;-1&quot;&gt;Conferences &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#conferences&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And speaking more of the conference, I attended 4 conferences this year and spoke at 2 of them. Both the conferences I spoke at were not in Sydney but they were in Australia, one in Melbourne and another one in Brisbane.&lt;/p&gt;
&lt;p&gt;I helped organize Google I/O Sydney 2023, so it was obvious that I would attend it (even if it was only in the afternoon). Then in Aug, I attended Cloudflare Connect 2023. The best part of the conference was the discussion with Atlassian co-founder Mike Cannon Brookes.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/review-2023/08cf-connect.jpg&quot; title=&quot;Mike Cannon Brookes at Cloudflare Connect 2023 Sydney&quot; alt=&quot;Mike Cannon Brookes at Cloudflare Connect 2023 Sydney&quot; /&gt;
&lt;p&gt;I gave a talk at the GDG Devfest Melbourne 2023 in October and the same talk about &lt;a href=&quot;https://geshan.com.np/blog/2023/04/serverless-containers/&quot;&gt;serverless containers&lt;/a&gt; at GDG Devfest Brisbane 2023 in December. Both the conferences were very well organized and visiting Brisbane was a great experience.&lt;/p&gt;
&lt;p&gt;Talking about speaking I helped 4 people get into speaking at meetups, that story is next.&lt;/p&gt;
&lt;h2 id=&quot;side-project---speakers-camp&quot; tabindex=&quot;-1&quot;&gt;Side project - Speakers camp &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#side-project---speakers-camp&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have a side project each year, which does not necessarily need to be code or a product. I like helping people as last year it was Bloggers’ Union, this year it was Speakers Camp. The basic idea is to push, help, and motivate people to get into public speaking of any form, especially speaking at meetups which has a lower bar than speaking at conferences.&lt;/p&gt;
&lt;p&gt;The 4 speakers I had helped in some form be it content, delivery, or finding a slot at a meetup were Prasiddha (Pras), Kushal, Sagar, and Ashis. Their talks varied in content, from serverless functions to Machine Learning and Flutter. Below is a clip of Pras thanking me for mentoring/pushing him to do public speaking.&lt;/p&gt;
&lt;div style=&quot;position: relative;
width: 100%;
height: 0;
padding-bottom: 56.25%; margin-bottom: 1rem;&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/KxwsOMLEV4Q?si=Ip1sD4l4EX80rvpo&amp;amp;clip=UgkxcO4aoa_V9LQLnftMu7uHdMQQvEeLe-0M&amp;amp;clipt=EImWXhjBwmA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; style=&quot;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;And some of the other speakers are here too:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/review-2023/09speakers.jpg&quot; title=&quot;4 new Nepali tech speakers in Sydney mentored by me in 2023&quot; alt=&quot;4 new Nepali tech speakers in Sydney mentored by me in 2023&quot; /&gt;
&lt;p&gt;At least two more are in the pipeline for Q1 of 2024, hopefully, more speakers will overcome their fear of public speaking and break into it.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/review-2023/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All in all, this has been a great year in terms of professional things done. I hope to continue blogging, public speaking, organizing meetups, and helping out the community in general in 2024 too.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Good software engineering is about finding a solution at the correct layer with boring technology</title>
		<link href="https://geshan.com.np/blog/2023/12/good-software-engineering/"/>
		<updated>2023-12-21T12:21:53Z</updated>
		<id>https://geshan.com.np/blog/2023/12/good-software-engineering/</id>
		<content type="html">&lt;p&gt;In the ever-evolving landscape of technology, the importance of good software engineering cannot be overstated. It&#39;s the core of efficient, scalable, and maintainable software solutions. While there are various methodologies and practices, a key aspect often overlooked is the art of finding the right solution at the correct layer and level of abstraction. On top of that, reliable software systems are best built with boring technology. You will learn more about these topics in this post, let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/good-software-engineering/01good-software-engineering.jpg&quot; title=&quot;Good software engineering is about finding a solution at the correct layer with boring technology&quot; alt=&quot;Good software engineering is about finding a solution at the correct layer with boring technology&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#select-the-right-layer-for-your-solution&quot;&gt;Select the Right Layer for Your Solution&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#database-vs.-code&quot;&gt;Database vs. Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#code-layers%3A-controller%2C-service%2C-and-repository&quot;&gt;Code Layers: Controller, Service, and Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#code-or-not-code&quot;&gt;Code or not code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#choose-boring-technology&quot;&gt;Choose Boring Technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#measure-learn-and-adapt&quot;&gt;Measure, Learn, and Adapt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Good software engineering is not just about writing code that works; it&#39;s about writing code that stands the test of time, is easily maintainable, and can adapt to the changing needs of the business. This involves making crucial decisions about where and how different components of your system should interact while it is stable, scaleable, and resilient.&lt;/p&gt;
&lt;p&gt;In addition to that, your choice of technology for each layer also plays a vital role in how reliable, easily recoverable, and &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/&quot;&gt;resilient software&lt;/a&gt; you can deliver. Another important aspect of this discussion is &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/&quot;&gt;software scalability&lt;/a&gt;. In the next section, you will learn about selecting the right layer for your solution.&lt;/p&gt;
&lt;h2 id=&quot;select-the-right-layer-for-your-solution&quot; tabindex=&quot;-1&quot;&gt;Select the Right Layer for Your Solution &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#select-the-right-layer-for-your-solution&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Depending on the context, you will need to find the right layer of the technology for your feature/solution or the fix for a bug. As with most things in software engineering, the best answer is “It depends”. Still, many a time you might want to engineer your solution at the right layer of a &lt;a href=&quot;https://www.ibm.com/topics/three-tier-architecture&quot;&gt;3 tier or an N-tier&lt;/a&gt; application. Let’s explore some of the facets of this realm:&lt;/p&gt;
&lt;h3 id=&quot;database-vs.-code&quot; tabindex=&quot;-1&quot;&gt;Database vs. Code &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#database-vs.-code&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the first decisions a software engineer faces is determining where to handle certain aspects of their application logic—whether in the database or the code. While databases are excellent for managing and querying data, they are not the place for complex business logic. Striking the right balance between keeping your database simple and handling logic in your codebase is essential.&lt;/p&gt;
&lt;p&gt;Recently I discussed with the team whether a piece of logic can go in as an SQL query or should be in the code. After a quick cost-benefit analysis, putting in the solution as a SQL select query might be a cleaner way to do it but as we know scaling a relational database is a lot more harder than scaling a dockerized application. Thereby, the Slack thread ended in agreeing to place the logic in the application code rather than running it on the database server. Still, you should know that &lt;a href=&quot;https://geshan.com.np/blog/2018/12/you-can-do-it-in-sql/&quot;&gt;you can do it in SQL&lt;/a&gt;, whether to run the logic on the DB server is a choice based on trade-offs as it depends.&lt;/p&gt;
&lt;h3 id=&quot;code-layers%3A-controller%2C-service%2C-and-repository&quot; tabindex=&quot;-1&quot;&gt;Code Layers: Controller, Service, and Repository &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#code-layers%3A-controller%2C-service%2C-and-repository&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Within the codebase, it&#39;s crucial to identify the appropriate layer for specific functionalities. The controller layer handles user input, the service layer encapsulates business logic, and the repository layer manages data storage and retrieval. Deciding which layer should house certain functionalities is akin to placing puzzle pieces together, ensuring a cohesive and understandable structure.&lt;/p&gt;
&lt;p&gt;Choosing the right layer means understanding the responsibilities of each and keeping them focused on their core tasks. For instance, business logic should reside in the service layer, leaving the controller layer to manage input and output, and the repository layer to handle data operations.&lt;/p&gt;
&lt;p&gt;This also points a bit towards the &lt;a href=&quot;https://levelup.gitconnected.com/single-responsibility-principle-a-beginners-note-cb1eaba1fecd&quot;&gt;single responsibility principle&lt;/a&gt;. Anyhow, even if you don’t write strictly object-oriented programming, in any web related work there will always be a route -&amp;gt; linked to a controller of some sort. Some business logic will need to be written somewhere, which is generally a service, and depending on your layers and levels some code will interact with the data layer. The data layer in most cases will be a relational database or a non-relational database. When you write your solution think precisely where how the parts will be spread and how it will affect a later change to the feature.&lt;/p&gt;
&lt;h3 id=&quot;code-or-not-code&quot; tabindex=&quot;-1&quot;&gt;Code or not code &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#code-or-not-code&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes the solution or bug fix is not in the code it might be in a configuration or a setting. I remember a bug we had many years back with persisting a session. We looked very hard into the code but it turned out to be a configuration on the Memcached server we were using to store the session data for sticky sessions.&lt;/p&gt;
&lt;p&gt;Similarly, let&#39;s say there is a slow-performing application. You can run 100s of tests and a lot of performance testing to squeeze out the last drop of juice on your application-level code. But that difficult-to-make performant (read faster) issue could be easily solved by adding a couple of database indexes on the right columns or a group of columns which is also called a &lt;a href=&quot;https://planetscale.com/learn/courses/mysql-for-developers/indexes/composite-indexes&quot;&gt;composite index&lt;/a&gt;. The moral of the story is to think a bit outside of the box and try to find a solution outside of the code too.&lt;/p&gt;
&lt;p&gt;In the next section, you will learn about &lt;a href=&quot;https://mcfunley.com/choose-boring-technology&quot;&gt;choosing boring technology&lt;/a&gt; where the interesting part is, it helps you sleep much better.&lt;/p&gt;
&lt;h2 id=&quot;choose-boring-technology&quot; tabindex=&quot;-1&quot;&gt;Choose Boring Technology &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#choose-boring-technology&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the fast-paced world of technology, the allure of using the latest and most cutting-edge tools can be tempting. However, good software engineering often means &lt;a href=&quot;https://boringtechnology.club/&quot;&gt;choosing boring technology&lt;/a&gt;. Boring technology is reliable, well-established, and has a proven track record. If not anything, it gives a much higher chance of you having a good night’s sleep and when you are on-call the phone will not ring much.&lt;/p&gt;
&lt;p&gt;While it might not be as exciting as the latest framework, boring technology is more likely to be well-documented, have a large community of users, and provide long-term support. This stability is crucial for the longevity of your software, as it reduces the risk of unexpected issues and makes it easier to find talent familiar with the tools you&#39;re using.&lt;/p&gt;
&lt;p&gt;Boring technology has very little unknown unknowns, which means if there is an issue it is usually not a completely new issue and can be solved relatively quickly. Again boring technology might mean different things to different teams.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a team has been doing Rust for the last 6 years (released in 2015, so possible) then Rust might be a boring technology for them versus a team that has been doing only Javascript (Node.js/Typescript) in the backend for the past 5 years.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The same can be said for a team using MySQL for 10 years vs a team using MongoDb for 10 years (Mongo released in 2009, so it is possible too).&lt;/p&gt;
&lt;p&gt;Still, relying on battle-tested technologies that have been proven to work at a much higher scale and workload than what your company generally has is a much safer bet compared to the new language, framework, or database in the market.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This does not mean to never try a new technology (language/framework or database), but you should experiment with a new thing in an experiment (that will be used by 100s of people) not the main money earner service of the company. If that service goes down the company loses 1000s of dollars each minute.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can also use new things in your side project for learning, so why not? Well, all this depends on the simple principle of measuring, learning, and adapting which is discussed next.&lt;/p&gt;
&lt;h2 id=&quot;measure%2C-learn%2C-and-adapt&quot; tabindex=&quot;-1&quot;&gt;Measure, Learn, and Adapt &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#measure%2C-learn%2C-and-adapt&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Good software engineering involves an iterative process of measurement, learning, and adaptation. Monitoring the performance of your system, gathering user feedback, and learning from both successes and failures are integral parts of the software development lifecycle.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For instance, even after doing all the tricks in the book if your MySQL or Postgres does not deliver fast enough performance then it is surely time to introduce a layer of caching with an in-memory database like Redis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case, redis will have a key-value pair or the data you need for that page in a denormalized form.&lt;/p&gt;
&lt;p&gt;By measuring the performance of your application, you can identify bottlenecks, optimize code, and improve user experience. User feedback provides valuable insights into how your software is being used and what improvements can be made. Being open to learning from experiences, both positive and negative, allows you to adapt your approach, refine your processes, and continuously enhance your software.&lt;/p&gt;
&lt;p&gt;In today’s age application performance monitoring (APM) software also helps you a lot to view logs and see the response times of your software system.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can also know the resource consumption of the software you developed and delivered in almost real-time. This helps you roll back a wrong release or course-correct a change you made weeks or even months back in a more empirical way with real data on hand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bottom line, invest in an APM software to know what happening in your software. If dog is a man&#39;s best friend, logs are a software engineer&#39;s best friend. Embrace &lt;a href=&quot;https://geshan.com.np/blog/2019/03/follow-these-logging-best-practices-to-get-the-most-out-of-application-level-logging-slides/&quot;&gt;application level logging&lt;/a&gt; from today.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/good-software-engineering/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In conclusion, good software engineering is a multifaceted discipline that goes beyond just writing functional code. It involves making informed decisions about where to place different elements of your system, choosing reliable and proven technologies, following established best practices, and embracing a culture of continuous improvement.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You cannot improve what you cannot measure - Peter Drucker; applies equally to software systems too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By selecting the right layer for your solution, choosing boring but reliable technology, and adopting a mindset of measurement and adaptation, you pave the way for software that not only meets current requirements but also evolves with the dynamic nature of technology and business needs.&lt;/p&gt;
&lt;p&gt;In essence, good software engineering is about finding the solution at the correct layers and levels, creating a foundation for robust, scalable, and future-proof software systems. Always keep learning!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to write and deploy a basic Node.js API with Duet AI on VS Code a step-by-step guide</title>
		<link href="https://geshan.com.np/blog/2023/12/nodejs-duet-ai-vs-code/"/>
		<updated>2023-12-18T12:15:52Z</updated>
		<id>https://geshan.com.np/blog/2023/12/nodejs-duet-ai-vs-code/</id>
		<content type="html">&lt;p&gt;As developers, we constantly dance between writing code, managing infrastructure, and keeping tabs on deployment and logs. Wouldn&#39;t having an AI teammate that simplifies these tasks be amazing? Duet AI is a Google AI tool that acts as your coding buddy and streamlines the development process, for most applications including Node.js. In this post, you will learn how to use Duet AI to write a simple Node.js API application and deploy it on Google Cloud Run.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/01nodejs-duet-ai-vs-code.jpg&quot; title=&quot;How to write and deploy a basic Node.js API with Duet AI on VS Code a step-by-step guide&quot; alt=&quot;How to write and deploy a basic Node.js API with Duet AI on VS Code a step-by-step guide&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/nodejs-duet-ai-vs-code/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/nodejs-duet-ai-vs-code/#install-duet-ai-on-vs-code&quot;&gt;Install Duet AI on VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/nodejs-duet-ai-vs-code/#writing-a-simple-node.js-api-with-duet-ai&quot;&gt;Writing a simple Node.js API with Duet AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/nodejs-duet-ai-vs-code/#deploy-to-cloud-run-with-duet-ai&quot;&gt;Deploy to cloud run with Duet AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/12/nodejs-duet-ai-vs-code/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;install-duet-ai-on-vs-code&quot; tabindex=&quot;-1&quot;&gt;Install Duet AI on VS Code &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/nodejs-duet-ai-vs-code/#install-duet-ai-on-vs-code&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can install the Google Cloud Code (Duet AI) extension to &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; or IntelliJ/&lt;a href=&quot;https://www.jetbrains.com/&quot;&gt;JetBrains&lt;/a&gt; IDE. For this blog post, you will use VS Code. You can follow the &lt;a href=&quot;https://cloud.google.com/code/docs/vscode/install&quot;&gt;official guide&lt;/a&gt; to install the Code Cloud extension on your VS Code. Make sure you have linked the right Google Cloud Project where you have enabled Duet AI. After the installation, your VS Code should look like the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/02duet-ai-installed.jpg&quot; title=&quot;Duet AI (Cloud Code) installed on VS Code&quot; alt=&quot;Duet AI (Cloud Code) installed on VS Code&quot; /&gt;
&lt;p&gt;Please take note of the things I have highlighted in the screenshot, the Google Cloud Project you are connected to, and the Duet AI Icon on the bottom right of VS Code. One more thing you should configure properly is the languages you want Duet AI to support, which can be reached in the Google Cloud Code/Duet AI settings as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/03duet-ai-settings-link.jpg&quot; title=&quot;Duet AI (Cloud Code) settings on VS Code&quot; alt=&quot;Duet AI (Cloud Code) settings on VS Code&quot; /&gt;
&lt;p&gt;Then change the settings to include the programming languages you want Duet AI to support, you will find it after scrolling down a bit and you might need to add the languages of your choice:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/04duet-ai-settings-languages.jpg&quot; title=&quot;Duet AI (Cloud Code) languages list on VS Code&quot; alt=&quot;Duet AI (Cloud Code) languages list on VS Code&quot; /&gt;
&lt;p&gt;Then you are good to go. In the next section, you will learn how to write a simple Node.js API with Duet AI on VS Code.&lt;/p&gt;
&lt;h2 id=&quot;writing-a-simple-node.js-api-with-duet-ai&quot; tabindex=&quot;-1&quot;&gt;Writing a simple Node.js API with Duet AI &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/nodejs-duet-ai-vs-code/#writing-a-simple-node.js-api-with-duet-ai&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can either start a new project on your own or clone this open-source GitHub &lt;a href=&quot;https://github.com/geshan/nodejs-duet-ai&quot;&gt;repository&lt;/a&gt; by running:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone git@github.com:geshan/nodejs-duet-ai.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the repository is cloned, you can go into it with &lt;code&gt;cd nodejs-duet-ai&lt;/code&gt; and open it in VS Code. Let&#39;s try to initialize the repository with NPM and install Express.js.&lt;/p&gt;
&lt;p&gt;To do this, you can ask Duet AI to help you with the following prompt:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;How do I initialize a Node.js project with NPM?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That resulted in:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/05duet-ai-npm-init.jpg&quot; title=&quot;Duet AI (Cloud Code) on VS Code helping to initialize a Node.js project with NPM&quot; alt=&quot;Duet AI (Cloud Code) on VS Code helping to initialize a Node.js project with NPM&quot; /&gt;
&lt;p&gt;It gave out the instructions to initialize the project with NPM and also how to add Express.js to the project, as seen above. But, to keep things simple you can run &lt;code&gt;npm init -y&lt;/code&gt; to just get the &lt;code&gt;package.json&lt;/code&gt; file set up as I have done above.&lt;/p&gt;
&lt;p&gt;As the next step, you will install &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; framework to this project. You can ask Duet AI to help you with the following prompt:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;How do I install and save Express.js to the package.json file?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It came back with good instructions but not that great as the &lt;code&gt;dependencies&lt;/code&gt; part was not there in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/06duet-ai-express.jpg&quot; title=&quot;Duet AI (Cloud Code) on VS Code helping to add Express.js to a Node.js project&quot; alt=&quot;Duet AI (Cloud Code) on VS Code helping to add Express.js to a Node.js project&quot; /&gt;
&lt;p&gt;Even though the suggestion was good but not right for the scenario. So you can run &lt;code&gt;npm install --save express&lt;/code&gt; to install express as well as add it to the &lt;code&gt;package.json&lt;/code&gt; file, as seen in the above screenshot.&lt;/p&gt;
&lt;p&gt;One thing to notice here (which will be true for most/all AI assistants) is, that they can give you a first draft (v1) which kind of works.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You as the software engineer will need to improvise on the given solution to make it work. Then you will also have to optimize it for performance and scalability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can also follow this &lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/&quot;&gt;Node.js Express&lt;/a&gt; step-by-step tutorial if you like to create a 1 page Node.js Express application. I also created a &lt;code&gt;index.js&lt;/code&gt; file with a basic Node.js Express server running on port 8080 copying and changing the code given by Duet AI. The &lt;code&gt;index.js&lt;/code&gt; looks like the below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Server listening on port &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, you want to add an &amp;quot;OK&amp;quot; route to your Node.js Express application. You can ask Duet AI to help you with the following prompt:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;how do I add an ok route to express.js?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It replied with the following which is useable this time, I added it as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/07duet-ai-express-route.jpg&quot; title=&quot;Duet AI (Cloud Code) on VS Code helping to add Express.js route&quot; alt=&quot;Duet AI (Cloud Code) on VS Code helping to add Express.js route&quot; /&gt;
&lt;p&gt;After that, while adding the route it had a suggestion too:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/08duet-ai-express-suggest.jpg&quot; title=&quot;Duet AI (Cloud Code) on VS Code suggesting a new route&quot; alt=&quot;Duet AI (Cloud Code) on VS Code suggesting a new route&quot; /&gt;
&lt;p&gt;Then you can run the server and see the &lt;code&gt;ok&lt;/code&gt; route is working as expected by running &lt;code&gt;node index.js&lt;/code&gt;. It will look as follows on your browser: &lt;code&gt;http://localhost:8080/&lt;/code&gt;:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/09express-running-02.jpg&quot; title=&quot;Express running on port 8080&quot; alt=&quot;Express running on port 8080&quot; /&gt;
&lt;p&gt;Now it is time to add a dummy JSON response, so you can ask Duet AI to help you with the following prompt:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;How can I GET Route with Express.js that returns some blog posts as JSON?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That resulted in:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/10duet-ai-dummy-json.jpg&quot; title=&quot;Duet AI (Cloud Code) on VS Code suggesting a new route with JSON response for posts&quot; alt=&quot;Duet AI (Cloud Code) on VS Code suggesting a new route with JSON response for posts&quot; /&gt;
&lt;p&gt;You can copy and paste that suggestion to your &lt;code&gt;index.js&lt;/code&gt; file and run the server again. You can see the dummy JSON response for posts at &lt;code&gt;http://localhost:8000/posts&lt;/code&gt; as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/11express-posts-json.jpg&quot; title=&quot;Express running on port 8080 with posts JSON&quot; alt=&quot;Express running on port 8080 with posts JSON&quot; /&gt;
&lt;p&gt;Now you have the basic Node.js API running locally with much help from Duet AI. In the next section, you will learn how to deploy this Node.js API on Google Cloud Run from VS Code using Duet AI.&lt;/p&gt;
&lt;h2 id=&quot;deploy-to-cloud-run-with-duet-ai&quot; tabindex=&quot;-1&quot;&gt;Deploy to cloud run with Duet AI &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/nodejs-duet-ai-vs-code/#deploy-to-cloud-run-with-duet-ai&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To deploy your app to Google Cloud Run, you will need to create a Dockerfile. You can ask Duet AI to help you with this too. Type in the following prompt to get some assistance:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Can you give me an optimized dockerfile for this Node.js Express project?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Duet AI came back with the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/12duet-ai-dockerfile.jpg&quot; title=&quot;Duet AI suggesting a Dockerfile for a Node.js app&quot; alt=&quot;Duet AI suggesting a Dockerfile for a Node.js app&quot; /&gt;
&lt;p&gt;So you can copy the suggested code and create a file named &lt;code&gt;dockerfile&lt;/code&gt; in the root of your project like the below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM node:16-slim

EXPOSE 8080

WORKDIR /usr/src/app

COPY package.json ./

RUN npm install

COPY . ./

CMD [ &amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;dockerfile&lt;/code&gt; can be made better by implementing multiple things like using Node version 20 the latest LTS as well as using a &lt;a href=&quot;https://geshan.com.np/blog/2019/11/how-to-use-docker-multi-stage-build/&quot;&gt;multi-stage build&lt;/a&gt;. But for now we are going to use this dockerfile with just one line added &lt;code&gt;EXPOSE 8080&lt;/code&gt; to make it work with Google Cloud Run.&lt;/p&gt;
&lt;p&gt;You can test the Dockerfile by running &lt;code&gt;docker build -t node-app .&lt;/code&gt; but we will deploy this to Google Cloud Run next. Duet AI as Google Cloud Run support built into it, you can read more about &lt;a href=&quot;https://geshan.com.np/blog/2023/04/serverless-containers/&quot;&gt;serverless containers&lt;/a&gt; if you like.&lt;/p&gt;
&lt;p&gt;If you open your VS Code command palette and type &lt;code&gt;cloud run&lt;/code&gt;, you will see:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/13duet-ai-cloud-run.jpg&quot; title=&quot;Duet AI integrated with Cloud Run&quot; alt=&quot;Duet AI integrated with Cloud Run&quot; /&gt;
&lt;p&gt;When you select that you can deploy your current source code directly to Google Cloud Run without leaving your editor (VS Code). It will take you to the settings page like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/14duet-ai-cloud-run-settings-01.jpg&quot; title=&quot;Duet AI integrated with Cloud Run service settings&quot; alt=&quot;Duet AI integrated with Cloud Run service settings&quot; /&gt;
&lt;p&gt;In this settings section for Cloud Run, you can set the name of the service (which will take the name of the folder by default), then you can also select the region. After that you can specify the authentication, as you want it to be public the &amp;quot;Allow unauthenticated invocations&amp;quot; is selected. These settings are similar to &lt;a href=&quot;https://cloud.google.com/run/docs/deploying&quot;&gt;deploying&lt;/a&gt; a Cloud Run service from the Google Cloud Console interface.&lt;/p&gt;
&lt;p&gt;When you scroll down you will see more settings as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/15duet-ai-cloud-run-settings-02.jpg&quot; title=&quot;Duet AI integrated with Cloud Run service settings for building&quot; alt=&quot;Duet AI integrated with Cloud Run service settings for building&quot; /&gt;
&lt;p&gt;In this part, you will specify the revision setting and more importantly you will select &lt;code&gt;Cloud Build&lt;/code&gt; to build your dockerfile on Google &lt;a href=&quot;https://cloud.google.com/build&quot;&gt;Cloud Build&lt;/a&gt; not your local. This will also push the container to the artifact repository automatically.&lt;/p&gt;
&lt;p&gt;After that at the end, you will find the &lt;code&gt;Deploy&lt;/code&gt; button to deploy your service to Google Cloud Run.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/16duet-ai-cloud-run-settings-03.jpg&quot; title=&quot;Duet AI integrated with Cloud Run service settings for using Dockerfile&quot; alt=&quot;Duet AI integrated with Cloud Run service settings for using Dockerfile&quot; /&gt;
&lt;p&gt;The settings selected here for using Docker and dockerfile are correct. You could also use &lt;code&gt;cloudbuild.yaml&lt;/code&gt; file but that is out of scope for this post. Next, you can click &amp;quot;Deploy&amp;quot; to deploy your service to Google Cloud Run. That will lead to:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/17duet-ai-cloud-run-deploying.jpg&quot; title=&quot;Duet AI deploying Node.js service to Cloud Run&quot; alt=&quot;Duet AI deploying Node.js service to Cloud Run&quot; /&gt;
&lt;p&gt;You can view detailed logs by clicing &lt;code&gt;Show detailed logs&lt;/code&gt;, which will show you something like:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/18duet-ai-cloud-run-logs.jpg&quot; title=&quot;Duet AI deploying Node.js service to Cloud Run logs&quot; alt=&quot;Duet AI deploying Node.js service to Cloud Run logs&quot; /&gt;
&lt;p&gt;As you had selected the build to run on Cloud Build, you can see the process run on Cloud Build in some time like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/19cloud-build.jpg&quot; title=&quot;Docker build and push on Cloud Build from Duet AI&quot; alt=&quot;Docker build and push on Cloud Build from Duet AI&quot; /&gt;
&lt;p&gt;It will take some minutes for the whole process to finish, if all of it goes fine you will see a URL where your service will be running on Google Cloud run as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/20cloud-run-deployed.jpg&quot; title=&quot;App deployed on Cloud Run with Duet AI&quot; alt=&quot;App deployed on Cloud Run with Duet AI&quot; /&gt;
&lt;p&gt;Then, you can visit that &lt;code&gt;URL/posts&lt;/code&gt; to see if the app is running properly, and you should be able to see:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/21cloud-run-ok.jpg&quot; title=&quot;App deployed on Cloud Run with Duet AI and running well&quot; alt=&quot;App deployed on Cloud Run with Duet AI and running well&quot; /&gt;
&lt;p&gt;You can also check the Cloud Run stats on the service page as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-duet-ai-vs-code/22cloud-run-stats.jpg&quot; title=&quot;App deployed on Cloud Run with Duet AI and running well with stats&quot; alt=&quot;App deployed on Cloud Run with Duet AI and running well with stats&quot; /&gt;
&lt;p&gt;There you have it, a way to develop a very simple Node.js API with Duet AI. Then you can deploy the app to Cloud Run without leaving your editor/IDE.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/12/nodejs-duet-ai-vs-code/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this post, you learned the basics of Duet AI to create your Node.js API and deploy it on Google Cloud Run. As you have seen Duet AI is very useful for software engineers. It enhances your coding experience and simplifies deployment too.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By working alongside Duet AI, you can streamline your development workflow, focus on innovation, and bring your ideas to life faster than ever before.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, go ahead, give Duet AI a try, and let your AI teammate take care of the heavy lifting while you code with confidence!&lt;/p&gt;
&lt;p&gt;Duet AI also offers additional features like code explanations, refactoring suggestions, and security recommendations. Explore these functionalities to unlock even more potential from your sidekick, Keep exploring!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Jest mock implementation: A beginner’s guide to replacing function implementation for tests</title>
		<link href="https://geshan.com.np/blog/2023/11/jest-mockimplementation/"/>
		<updated>2023-11-25T11:43:54Z</updated>
		<id>https://geshan.com.np/blog/2023/11/jest-mockimplementation/</id>
		<content type="html">&lt;p&gt;Jest Mock Implementation is a technique that lets you replace the internal logic of a function with a custom implementation during test execution. This can be immensely helpful in scenarios where you want to isolate a specific piece of code for testing without affecting the behavior of other components. In this blog post, you will learn how to use Jest Mock Implementation and how to leverage it effectively. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/jest-mockimplementation/01jest-mockimplementation.jpg&quot; title=&quot;Jest mock implementation: A beginner’s guide to replacing function implementation for tests&quot; alt=&quot;Jest mock implementation: A beginner’s guide to replacing function implementation for tests&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/11/jest-mockimplementation/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/11/jest-mockimplementation/#jest-mock-implementation-an-intro&quot;&gt;Jest Mock implementation an intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/11/jest-mockimplementation/#when-to-use-jest-mockimlementation&quot;&gt;When to use Jest mockImlementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/11/jest-mockimplementation/#how-to-use-mockimplementation-with-jest&quot;&gt;How to use mockImplementation with Jest&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/11/jest-mockimplementation/#example-with-process-exit-and-console&quot;&gt;Example with Process exit and console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/11/jest-mockimplementation/#tests-using-jest-mockimplenentation&quot;&gt;Tests using Jest mockImplenentation.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/11/jest-mockimplementation/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;jest-mock-implementation-an-intro&quot; tabindex=&quot;-1&quot;&gt;Jest Mock implementation an intro &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/11/jest-mockimplementation/#jest-mock-implementation-an-intro&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jestjs.io/docs/mock-function-api#mockfnmockimplementationfn&quot;&gt;Jest mockImplementation&lt;/a&gt; enables developers to replace the original implementation of a function with a mock function, allowing them to control the function&#39;s behavior and verify specific interactions. This technique proves particularly beneficial when testing code that interacts with external dependencies, such as APIs, databases, or filesystem operations.&lt;/p&gt;
&lt;p&gt;Jest mockIementaiton accepts a function that will replace the real implementation. You can also use &lt;a href=&quot;https://jestjs.io/docs/mock-function-api#mockfnmockimplementationoncefn&quot;&gt;Jest mockimplemantationOnce&lt;/a&gt; to only mock the implementation once. For example,  if the same function is called three times you can call &lt;code&gt;mockFn.mockImplemenationOnce&lt;/code&gt; two times to get the mock result and the last call and execute the real function. You will see this in the example in the later section. In the next part, you will learn when to use Jest mockImplementaiton.&lt;/p&gt;
&lt;h2 id=&quot;when-to-use-jest-mockimlementation&quot; tabindex=&quot;-1&quot;&gt;When to use Jest mockImlementation &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/11/jest-mockimplementation/#when-to-use-jest-mockimlementation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jest mockImplementation can be used in multiple scenarios, it is especially useful when used with &lt;a href=&quot;https://www.meticulous.ai/blog/how-to-use-jest-spyon&quot;&gt;Jest spyOn&lt;/a&gt;. Still, there are other useful scenarios when mockImplementation can be used.&lt;/p&gt;
&lt;p&gt;Without going into much detail, Jest mockImplentation is practical when you want to mock and test internal or external dependencies (like Axios), simulate error conditions, and test for the specific error case (like an API returning a 404 for instance). It is also handy to control the function output as needed and also isolate the system under test. In the next section, you will learn about how to use Jest mockImplenentation and Jest mockImplementationOnce with an example script that guesses Nationality from a given name.&lt;/p&gt;
&lt;h2 id=&quot;how-to-use-mockimplementation-with-jest&quot; tabindex=&quot;-1&quot;&gt;How to use mockImplementation with Jest &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/11/jest-mockimplementation/#how-to-use-mockimplementation-with-jest&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As mentioned there are multiple use cases of Jest mockImplemenation. It can be used to do basic mocking, mocking modules, mocking promises, etc. For this tutorial, you will see a simple yet useful example where given a name the script will guess the nationalities of the name with a probability percentage.&lt;/p&gt;
&lt;p&gt;To achieve this, you will use the &lt;a href=&quot;https://nationalize.io/#overview&quot;&gt;Nationalize.io API&lt;/a&gt; to send in the name and get back the percent probability of the nationalities. Technically you will use Node.js 20.x (to use top level await) and utilize the &lt;a href=&quot;https://axios-http.com/&quot;&gt;Axios&lt;/a&gt; library to make the HTTP calls and of course, &lt;a href=&quot;https://jestjs.io/&quot;&gt;Jest&lt;/a&gt; for unit testing. Let’s go ahead!&lt;/p&gt;
&lt;h3 id=&quot;example-with-process-exit-and-console&quot; tabindex=&quot;-1&quot;&gt;Example with Process exit and console &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/11/jest-mockimplementation/#example-with-process-exit-and-console&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Below is the example script (&lt;a href=&quot;https://github.com/geshan/jest-mockImplementation/blob/master/src/nationalityGuesser.js&quot;&gt;src/nationalityGuesser.js&lt;/a&gt;) that does the main work, you can see the full code in this open-source &lt;a href=&quot;https://github.com/geshan/jest-mockImplementation&quot;&gt;GitHub repository&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; axios &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;axios&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;guessNationalities&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://api.nationalize.io/?name=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hasCountryData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; response&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;data&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;country &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;country&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Nationalities for the name &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; are: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;hasCountryData &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;country&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;country_id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;probability &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;, &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;none&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Done!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error occurred: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is a simple script that imports Axios, then in the async function called &lt;code&gt;guessNationalites&lt;/code&gt; takes in the name to guess the nationalities for. After that in the try block it sends a request to the Nationalize API with the name and if the country data is received loops through it and shows the output in the console. Then it also console logs &lt;code&gt;Done!&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In case of any error, it will jump to the catch section and log the error then exit the process with an exit code of 1. By default for successful execution, the &lt;a href=&quot;https://www.cyberciti.biz/faq/linux-bash-exit-status-set-exit-statusin-bash/&quot;&gt;exit code&lt;/a&gt; is 0. This is how it looks like when executed with the name &lt;code&gt;john&lt;/code&gt;.&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/jest-mockimplementation/02jest-mockimplementation-run.jpg&quot; title=&quot;Jest mock implementation example run for name and nationalities guesser script&quot; alt=&quot;Jest mock implementation example run for name and nationalities guesser script&quot; /&gt;
&lt;p&gt;So the API responds with &lt;code&gt;john&lt;/code&gt; is 7.5% Irish, 5.5% Kenyan, 4.9% British and other nationalities. Next you will learn about the test for the above script.&lt;/p&gt;
&lt;h3 id=&quot;tests-using-jest-mockimplenentation.&quot; tabindex=&quot;-1&quot;&gt;Tests using Jest mockImplenentation. &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/11/jest-mockimplementation/#tests-using-jest-mockimplenentation.&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can write test (&lt;a href=&quot;https://github.com/geshan/jest-mockImplementation/blob/master/test/nationalityGuesser.spec.js&quot;&gt;tests/nationalityGuesser.spec.js&lt;/a&gt;) for the above file which will look like the below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; guessNationalities &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;../src/nationalityGuesser.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; axios &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;axios&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;axios&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;guessNationalities&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resetAllMocks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;//without the above reset, in the second test it will take axios.get as the second call&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should return the nationality based on the name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;john&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; consoleLog &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockImplementationOnce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockResolvedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2346926&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;john&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;country_id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;IE&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;probability&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.075&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;country_id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;KE&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;probability&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.055&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;country_id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;GB&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;probability&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.049&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;country_id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;PH&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;probability&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.045&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;country_id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;AU&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;probability&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.045&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;guessNationalities&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://api.nationalize.io/?name=john&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;consoleLog&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;consoleLog&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenNthCalledWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nationalities for the name john are: IE - 7.5%, KE - 5.5%, GB - 4.9%, PH - 4.5%, AU - 4.5%&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;consoleLog&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenNthCalledWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Done!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should handle errors and exit gracefully&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; processExit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;exit&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; consoleError &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockRejectedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;API error&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;guessNationalities&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://api.nationalize.io/?name=error&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;consoleError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;consoleError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error occurred: API error&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; expect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;processExit&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;processExit&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s understand what the test is doing and how Jest mockImlementation is crucial to it. First, you import the module to test that is &lt;code&gt;nationalityGuesser&lt;/code&gt;. Then you import axios and in the next line mock the whole &lt;a href=&quot;https://jestjs.io/docs/mock-functions#mocking-modules&quot;&gt;module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consequently, you start the &lt;code&gt;describe&lt;/code&gt; part of the test with the name of the module under test. After that, you add the &lt;a href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/&quot;&gt;Jest beforeEach&lt;/a&gt; which as the name suggests runs before each test. Here, you call the &lt;code&gt;jest.ResetAllMocks()&lt;/code&gt; to reset the mocks for each test so that older calls made for previous tests do not affect the current test.&lt;/p&gt;
&lt;p&gt;Next, you write the first test that checks &lt;code&gt;should return the nationality based on the name&lt;/code&gt; which is an async function as await will be used in that test. You set the name to test to be &lt;code&gt;john&lt;/code&gt;, then spy on the &lt;code&gt;console.log&lt;/code&gt; method, you add the &lt;code&gt;mockImplentationOnce&lt;/code&gt; which only mocks the first call to &lt;code&gt;console.log&lt;/code&gt; the subsequent calls will work as usual and print the message on the real console. This is seen later when you run the test.&lt;/p&gt;
&lt;p&gt;After that, you add a mock response from nationalize API for the name &lt;code&gt;john&lt;/code&gt; in the &lt;code&gt;mockResolvedValue&lt;/code&gt; of &lt;code&gt;axios.get&lt;/code&gt; call. Till this point it is the Arrange part of the &lt;a href=&quot;https://automationpanda.com/2020/07/07/arrange-act-assert-a-pattern-for-writing-good-tests/&quot;&gt;Arrange Act Assert&lt;/a&gt; pattern followed for good unit tests.&lt;/p&gt;
&lt;p&gt;Then, you call the &lt;code&gt;guessNationalities&lt;/code&gt; function passing &lt;code&gt;john&lt;/code&gt; with an await. After the act, the asserts start next. First, you assert that &lt;code&gt;axios.get&lt;/code&gt; is called once and is called with the right string. For this you use &lt;a href=&quot;https://geshan.com.np/blog/2022/07/jest-tohavebeencalledwith/&quot;&gt;Jest toHaveBeenCalledWith&lt;/a&gt; and make sure the right URL of  &lt;code&gt;https://api.nationalize.io/?name=john&lt;/code&gt; is sent to &lt;code&gt;axios.get&lt;/code&gt;. Subsequently, you make sure that the &lt;code&gt;console.log&lt;/code&gt; is called twice and also check that the parameters passed to it on both occasions are as expected.&lt;/p&gt;
&lt;p&gt;You can also run a &lt;a href=&quot;https://geshan.com.np/blog/2022/07/jest-run-single-test/&quot;&gt;single test with jest&lt;/a&gt; using the &lt;code&gt;-t&lt;/code&gt; flag like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; t -- &lt;span class=&quot;token parameter variable&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;should return the nationality based on the name&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will run only the first test and skip the second one as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/jest-mockimplementation/03jest-mockimplementation-single-test-run.jpg&quot; title=&quot;Jest mock implementation run single jest test&quot; alt=&quot;Jest mock implementation run single jest test&quot; /&gt;
&lt;p&gt;There is one more thing to put careful consideration here, the console shows &lt;code&gt;Done!&lt;/code&gt; but it does not show the &lt;code&gt;Nationalities for the name john…&lt;/code&gt; line. It is because of the line:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; consoleLog &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockImplementationOnce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Due to this the first call to &lt;code&gt;console.log&lt;/code&gt; was mocked but the second call was not mocked resulting in printing the &lt;code&gt;Done!&lt;/code&gt; on the screen.&lt;/p&gt;
&lt;p&gt;Next, you have added a test titled &lt;code&gt;should handle errors and exit gracefully&lt;/code&gt;. In this test the most interesting part is mocking the &lt;code&gt;process.exit&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; processExit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;exit&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you do not do this, it will exit the &lt;code&gt;jest&lt;/code&gt; process and not run the test fully. With this important mock implementation the &lt;code&gt;process.exit&lt;/code&gt; does nothing, which means the &lt;code&gt;jest&lt;/code&gt; process completes the test. You can run your test with &lt;code&gt;npm test&lt;/code&gt; or &lt;code&gt;npm t&lt;/code&gt; on the root of the project. Which looks like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/jest-mockimplementation/04jest-mockimplementation-test-run.jpg&quot; title=&quot;Jest mock implementation run all jest test&quot; alt=&quot;Jest mock implementation run all jest tests&quot; /&gt;
&lt;p&gt;The other mocks and assertions in this second test are the same as the above one. In place of the &lt;code&gt;console.log&lt;/code&gt; it mocks the &lt;code&gt;console.error&lt;/code&gt; as this test case only has an error call and no log calls. If you want to get the code coverage you can run &lt;code&gt;npm run test:cov&lt;/code&gt;. There you have it, now you know how to use both &lt;code&gt;mockImplementation&lt;/code&gt; and &lt;code&gt;mockImplementationOnce&lt;/code&gt; with Jest tests.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/11/jest-mockimplementation/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jest Mock Implementation is a powerful tool that enhances the effectiveness of your tests by allowing you to control and isolate specific parts of your code. Knowing when and how to use Jest Mock Implementation is crucial for writing repeatable and reliable tests. By replacing original function implementations with mock functions, developers can verify specific interactions, simulate error conditions, and effectively test code that interacts with external dependencies.&lt;/p&gt;
&lt;p&gt;In this tutorial, you learned what Jest mock implementation is and when to use it. Then you witnessed a full example of how to use it with a script that guesses Nationalities for a given name.  Whether you&#39;re a seasoned developer or a beginner, mastering Jest mockImplementation will significantly enhance your testing capabilities and contribute to the creation of high-quality software. Keep testing! 🚀&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use Axios with Typescript a beginner’s guide</title>
		<link href="https://geshan.com.np/blog/2023/11/axios-typescript/"/>
		<updated>2023-11-07T11:43:57Z</updated>
		<id>https://geshan.com.np/blog/2023/11/axios-typescript/</id>
		<content type="html">&lt;p&gt;Axios is one of the most popular HTTP client libraries for making requests to REST APIs in JavaScript and TypeScript applications. In this beginner&#39;s guide, you will learn at how to set up and use Axios with any TypeScript project to make API requests and get response data. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/axios-typescript/01axios-typescript.jpg&quot; title=&quot;How to use Axios with Typescript a beginner’s guide&quot; alt=&quot;How to use Axios with Typescript a beginner’s guide&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/11/axios-typescript/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/11/axios-typescript/#axios-introduction&quot;&gt;Axios introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/11/axios-typescript/#how-to-set-up-axios-with-typescript&quot;&gt;How to set up Axios with TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/11/axios-typescript/#axios-typescript-example---most-followed-user-on-github&quot;&gt;Axios TypeScript example - most followed user on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/11/axios-typescript/#axios-post-example-with-typescirpt&quot;&gt;Axios POST example with TypeScirpt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/11/axios-typescript/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;axios-introduction&quot; tabindex=&quot;-1&quot;&gt;Axios introduction &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/11/axios-typescript/#axios-introduction&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://axios-http.com/docs/intro&quot;&gt;Axios&lt;/a&gt; is a promise-based HTTP client for JavaScript that allows us to make requests to REST endpoints. It is isomorphic, meaning it can run in the browser and Node.js too. On the server-side it uses the native node.js HTTP module, while on the client (browser) it uses XMLHttpRequest.&lt;/p&gt;
&lt;p&gt;Some key features of Axios include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make XMLHttpRequests from the browser and Node.js&lt;/li&gt;
&lt;li&gt;Intercept requests and responses with &lt;a href=&quot;https://geshan.com.np/blog/2022/12/axios-interceptors/&quot;&gt;Axios interceptors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Transform request and response data&lt;/li&gt;
&lt;li&gt;Automatically convert JSON data&lt;/li&gt;
&lt;li&gt;Client side support for protecting against XSRF&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Compared to the native &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;fetch API&lt;/a&gt; in JavaScript, Axios provides a simpler API and has built-in support for some commonly needed functionality like transforming JSON data. You can use &lt;a href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/&quot;&gt;Axios retry&lt;/a&gt; to retry failed requests with custom configuration. If you utilize &lt;a href=&quot;https://geshan.com.np/blog/2022/11/axios-timeout/&quot;&gt;timeouts with Axios&lt;/a&gt; it will make your application more efficient.&lt;/p&gt;
&lt;p&gt;Overall, Axios takes a lot of the complexity out of making HTTP requests and handling responses. It simplifies app code and reduces the need for boilerplate request/response handling logic. As per NPM trends (excluding Node fetch as fetch is part of Node core now), Axios is the &lt;a href=&quot;https://npmtrends.com/axios-vs-got-vs-request-vs-superagent&quot;&gt;most popular&lt;/a&gt; HTTP library with over 35 million weekly downloads which is greater than all 3 competitors (Got, Request, Superagent) combined. In the next, section you will get your hands dirty with code.&lt;/p&gt;
&lt;h2 id=&quot;how-to-set-up-axios-with-typescript&quot; tabindex=&quot;-1&quot;&gt;How to set up Axios with TypeScript &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/11/axios-typescript/#how-to-set-up-axios-with-typescript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before you begin to install Axios in a Typescript project, you will need Node.js installed locally. For this tutorial, Node 20.x is used with Typescript 5.1. If you want a starting point with a bare-minimum TypeScript set up clone the example code repository in the &lt;code&gt;nvm-20&lt;/code&gt; branch with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone &lt;span class=&quot;token parameter variable&quot;&gt;-b&lt;/span&gt; nvm-20 git@github.com:geshan/axios-typescript.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you go into the directory with &lt;code&gt;cd axios-typescript&lt;/code&gt; you can run the command below to install Axios (it is v 1.6 at the time of writing):&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; axios&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can use Axios in your TypeScript project. In the next section, you will use Axios to find out who is the most followed user on GitHub using Axios.&lt;/p&gt;
&lt;h2 id=&quot;axios-typescript-example---most-followed-user-on-github&quot; tabindex=&quot;-1&quot;&gt;Axios TypeScript example - most followed user on GitHub &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/11/axios-typescript/#axios-typescript-example---most-followed-user-on-github&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this example, you will try to find out who is the most followed user on GitHub. For this you will need to call two GitHub APIs, the first one search for users with more than 60K followers and sort by followers. Then with the result pick the first user (as it is sorted by followers) and get the user from the get user API of GitHub.&lt;/p&gt;
&lt;p&gt;You will do all the above using Axios in a TypeScript project and the code can be saved in &lt;code&gt;src/index.ts&lt;/code&gt; file. The contents of the &lt;a href=&quot;https://github.com/geshan/axios-typescript/blob/master/src/index.ts&quot;&gt;file&lt;/a&gt; will look like the below:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AxiosResponse&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AxiosRequestConfig&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; RawAxiosRequestHeaders &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;axios&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  baseURL&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://api.github.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;githubFoundUser&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt; login&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;githubUser&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  login&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  followers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AxiosRequestConfig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&#39;Accept&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;application/vnd.github+json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; RawAxiosRequestHeaders&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queryString&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;q=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;followers:&gt;=60000&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;amp;sort=followers&amp;amp;order=desc&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; searchResponse&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AxiosResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/search/users?&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;queryString&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; foundUsers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; githubFoundUser&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; searchResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; username&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; foundUsers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;login&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; userResponse&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AxiosResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/users/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;username&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; user&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; githubUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; userResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; followersCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;followers&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The most followed user on GitHub is &quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;username&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; with &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;followersCount&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; followers.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s go through the main points to note in this Axios TypeScirpt example with GitHub API calls:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You create a client with &lt;code&gt;axios.create&lt;/code&gt; giving it the base URL of the GitHub API&lt;/li&gt;
&lt;li&gt;Then you define two types, as it is TypeScirpt one for found GitHub users and the next one for a GitHub user.&lt;/li&gt;
&lt;li&gt;After that, you define an async Immediately Invoked Function Expression a.k.a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt; so that the code executes when the file runs and await can be used. Another way to do it can be with &lt;a href=&quot;https://www.stefanjudis.com/today-i-learned/top-level-await-is-available-in-node-js-modules/&quot;&gt;top-level await&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In this IIFE, you define an Axios config with a header of  &lt;code&gt;&#39;Accept&#39;: &#39;application/vnd.github+json&#39;&lt;/code&gt; which is &lt;a href=&quot;https://docs.github.com/en/rest/overview/media-types?apiVersion=2022-11-28&quot;&gt;recommended&lt;/a&gt; in the GitHub API docs.&lt;/li&gt;
&lt;li&gt;Following that you construct a query string to search users that have more than 60K followers sorted by most followers first and in the try the GET request to find those users. (&lt;a href=&quot;https://github.com/search?q=followers%3A%3E%3D60000&amp;amp;type=Users&quot;&gt;9 users&lt;/a&gt; are found at the time of writing)&lt;/li&gt;
&lt;li&gt;Next you assign the returned &lt;code&gt;items&lt;/code&gt; in &lt;code&gt;foundUsers&lt;/code&gt; as an array of &lt;code&gt;githubFoundUsers&lt;/code&gt; type&lt;/li&gt;
&lt;li&gt;Then you get the username of the first user (which should be &lt;code&gt;travolds&lt;/code&gt; at the time of writing)&lt;/li&gt;
&lt;li&gt;The second get request is fired with the first user’s username (to get the followers count) and the response’s data is assigned to the user const of type &lt;code&gt;githubUser&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;After that user’s number of followers is assigned to &lt;code&gt;followersCount&lt;/code&gt; const.&lt;/li&gt;
&lt;li&gt;The message of the most followed user on GitHub is logged after that.&lt;/li&gt;
&lt;li&gt;In case of any error that is logged too as the whole code is in a try-catch block.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The output of the above code looks like the below when run with &lt;code&gt;npx ts-node src/index.ts&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The most followed user on GitHub is &amp;quot;torvalds&amp;quot; with 193729 followers.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the most followed user on Github is Linus Travolds the creator of Linux with 193.7K followers. With this simple but useful example, you have the core knowledge of how to use Axios with TypeScript. In the next section, you will learn how to do a POST with Axios and TypeScirpt.&lt;/p&gt;
&lt;h3 id=&quot;axios-post-example-with-typescirpt&quot; tabindex=&quot;-1&quot;&gt;Axios POST example with TypeScirpt &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/11/axios-typescript/#axios-post-example-with-typescirpt&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can make other calls with Axios and Typescript in addition to a GET call. Below is an example of a POST call on HTTPbin where it will send back the same data sent in the POST body. You can save the file in &lt;code&gt;src/post.ts&lt;/code&gt; file with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AxiosResponse&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AxiosRequestConfig&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; RawAxiosRequestHeaders &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;axios&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  baseURL&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://httpbin.org&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AxiosRequestConfig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&#39;Accept&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; RawAxiosRequestHeaders&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello World!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AxiosResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/post&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s go through the main points to note in the above code.&lt;/p&gt;
&lt;p&gt;Most things are similar to the above example. The main difference is in the lines:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello World!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AxiosResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/post&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An HTTP POST call is made here and the data with a message of &lt;code&gt;Hello World!&lt;/code&gt; is passed to the HTTP Bin API. The third parameter is the config which is adding a header with accept JSON. The output of the above code when run with &lt;code&gt;npx ts-node src/post.ts&lt;/code&gt; look like the below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; message: &lt;span class=&quot;token string&quot;&gt;&#39;Hello World!&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to compile TypeScript to JavaScript you can add the following to the &lt;code&gt;scripts&lt;/code&gt; sections of your &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;tsc -p tsconfig.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node dist/index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can run &lt;code&gt;npm run build &amp;amp;&amp;amp; npm start&lt;/code&gt; to see the output of the first example. You can find all the code for your reference in this &lt;a href=&quot;https://github.com/geshan/axios-typescript/&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/11/axios-typescript/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That covers the basics of using Axios with TypeScript to make API calls and handle the response data. You have learned the basics of Axios and its types for making a GET and a POST call in a TypeScript environment. The example is executed on a Node.js environment but it should work the same on a browser too as Axios runs on both the server and the client. I hope you have learned the core and important knowledge of using Axios and TypeScript together, keep coding! 🚀&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use the string_agg function in Postgres with examples</title>
		<link href="https://geshan.com.np/blog/2023/10/postgres-string_agg/"/>
		<updated>2023-10-27T11:52:57Z</updated>
		<id>https://geshan.com.np/blog/2023/10/postgres-string_agg/</id>
		<content type="html">&lt;p&gt;Are you a software engineer who works with PostgreSQL? Do you often find yourself needing to manipulate and aggregate strings in your database? If so, you&#39;re in luck because PostgreSQL provides a powerful function called string_agg. In this blog post, you dive into what string_agg is, how it&#39;s related to MySQL&#39;s group_concat, and walk through a couple of examples using real data. By the end, you&#39;ll have a solid understanding of how to make the most string_agg in your PostgreSQL queries. Let’s get going!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/postgres-string_agg/01postgres-string_agg.jpg&quot; title=&quot;How to use the string_agg function in Postgres with examples&quot; alt=&quot;How to use the string_agg function in Postgres with examples&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#postgres-string-agg&quot;&gt;Postgres string_agg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#related-to-mysql-group-concat&quot;&gt;Related to MySQL group_concat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#example-of-billionaires-data&quot;&gt;Example of billionaires data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#list-the-billionaires-by-country-and-birth-year-with-count-per-country&quot;&gt;List the billionaires by country and birth year with count per country&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#list-the-billionaires-by-category-and-count-per-category&quot;&gt;List the billionaires by category and count per category&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;postgres-string_agg&quot; tabindex=&quot;-1&quot;&gt;Postgres string_agg &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#postgres-string_agg&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Postgres string_agg is an &lt;a href=&quot;https://www.postgresql.org/docs/9.0/functions-aggregate.html&quot;&gt;aggregate function&lt;/a&gt; that allows you to concatenate values from multiple rows into a single string. It is particularly useful when dealing with string aggregation or concatenation in a SQL query. This function can be applied to columns of text, varchar, or other string types. The basic syntax of string_agg is as follows:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;string_agg&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;delimiter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two parts are expression and delimeter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;expression: The expression or column you want to concatenate.&lt;/li&gt;
&lt;li&gt;delimiter: The separator that will be inserted between the concatenated values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For instance, you have customers in multiple countries, and for a campaign, you want to send emails to them. The need is to get all the customer emails grouped by country it can be done with a query that looks like the below:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; country&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; string_agg&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;customer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ‘&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; customer &lt;span class=&quot;token keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;JOIN&lt;/span&gt; country &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; customer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;country_id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; country&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;By&lt;/span&gt; country&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;related-to-mysql-group_concat&quot; tabindex=&quot;-1&quot;&gt;Related to MySQL group_concat &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#related-to-mysql-group_concat&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&#39;re familiar with MySQL, you might have used the &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_group-concat&quot;&gt;group_concat&lt;/a&gt; function. string_agg in Postgres serves a similar purpose as group_concat in MySQL. They both allow you to aggregate and concatenate values from multiple rows into a single string. However, there are some syntax and implementation differences between the two.&lt;/p&gt;
&lt;p&gt;Below is an example of the usage of group_concat taken directly form the MySQL docs:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; student_name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;         GROUP_CONCAT&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;DISTINCT&lt;/span&gt; test_score&lt;br /&gt;                      &lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; test_score &lt;span class=&quot;token keyword&quot;&gt;DESC&lt;/span&gt; SEPARATOR &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; student&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; student_name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the query will get the distinct test_score highest first grouped by student and separated by a space character.&lt;/p&gt;
&lt;p&gt;Now that we have a clear understanding of what string_agg is and how it compares to group_concat, let&#39;s move on to some practical examples using real data of billionaires of the world.&lt;/p&gt;
&lt;h2 id=&quot;example-of-billionaires-data&quot; tabindex=&quot;-1&quot;&gt;Example of billionaires data &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#example-of-billionaires-data&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, you heard it right, the top 100 billionaires of the world. Thankfully, Kaggle has a &lt;a href=&quot;https://www.kaggle.com/datasets/nelgiriyewithana/billionaires-statistics-dataset&quot;&gt;billionaires dataset&lt;/a&gt; of 2023 that lists 2540 billionaires in the world with many fields. I downloaded the CSV and removed most of the fields not relevant to this example. I also took only the top 100 billionaires from that list to create a Postgres table as follows:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;billionaire&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;serial&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;rank&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;worth&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;gender&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;category&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;country&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;city&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;source&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;industries&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;citizenship_country&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;organization&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;birth_year&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;integer&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have deliberately kept the structure very simple and have not added any index or unique indexes to the table as it will have only 100 rows. The goal of this tutorial is to understand the Postgres string_agg function, not something else. The data of the 10 (or 100) billionaires can be inserted with the following insert statement:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;billionaire&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  rank&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; worth&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gender&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; category&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; country&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; city&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;  source&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; industries&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; citizenship_country&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; organization&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; birth_year&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;211000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Bernard Arnault &amp;amp; family&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Fashion &amp;amp; Retail&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;France&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Paris&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;LVMH&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Fashion &amp;amp; Retail&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;France&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;LVMH Moët Hennessy Louis Vuitton&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Chairman and CEO&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1949&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;180000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Elon Musk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Automotive&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Austin&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Tesla, SpaceX&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Automotive&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Tesla&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;CEO&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1971&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;114000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Jeff Bezos&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Technology&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Medina&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Amazon&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Technology&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Amazon&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Chairman and Founder&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1964&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;107000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Larry Ellison&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Technology&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Lanai&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Oracle&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Technology&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Oracle&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;CTO and Founder&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1944&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;106000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Warren Buffett&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Finance &amp;amp; Investments&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Omaha&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Berkshire Hathaway&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Finance &amp;amp; Investments&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Berkshire Hathaway Inc. (Cl A)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;CEO&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1930&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;104000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Bill Gates&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Technology&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Medina&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Microsoft&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Technology&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Bill &amp;amp; Melinda Gates Foundation&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Cochair&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1955&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;94500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Michael Bloomberg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Media &amp;amp; Entertainment&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;New York&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Bloomberg LP&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Media &amp;amp; Entertainment&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Bloomberg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;CEO&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1942&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;93000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Carlos Slim Helu &amp;amp; family&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Telecom&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Mexico&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Mexico City&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Telecom&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Telecom&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Mexico&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;América Móvil&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Honorary Chairman&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1940&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;83400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Mukesh Ambani&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Diversified&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;India&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Mumbai&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Diversified&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Diversified&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;India&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Reliance Industries&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Founder and Chairman&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1957&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;80700&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Steve Ballmer&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Technology&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hunts Point&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Microsoft&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Technology&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;United States&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Los Angeles Clippers&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Owner&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1956&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above is not the full list of top 100 billionares in 2023, it is just the 10. You can get the full list of top 100 in this &lt;a href=&quot;https://gist.github.com/geshan/b2495283109e19a8e19af837a5c8eb50#file-02billionarire-data-sql&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can run &lt;a href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/&quot;&gt;Postgres with Docker&lt;/a&gt; and Docker Compose locally. Still, The easiest way for you to test this without needing to install Postgres locally will be to use ElephantSQL. Their &lt;a href=&quot;https://www.elephantsql.com/plans.html&quot;&gt;free plan&lt;/a&gt; will give you a database with a max of 20MB of data and 5 concurrent connections which is more than enough to try out this example. You can follow their official &lt;a href=&quot;https://www.elephantsql.com/docs/index.html&quot;&gt;getting started documentation&lt;/a&gt; to set up a database and insert the date using the above SQL statements.&lt;/p&gt;
&lt;p&gt;Once you have the database set up with the 100 rows added. You can ask various questions as you will do in the next section.&lt;/p&gt;
&lt;h2 id=&quot;list-the-billionaires-by-country-and-birth-year-with-count-per-country&quot; tabindex=&quot;-1&quot;&gt;List the billionaires by country and birth year with count per country &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#list-the-billionaires-by-country-and-birth-year-with-count-per-country&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get answers to questions like listing all the billionaires by country and year of birth youngest first with the count by country. It can be done easily by using the &lt;code&gt;string_agg&lt;/code&gt; function in Postgres as below:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;&lt;br /&gt;    b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;country&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    STRING_AGG &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;	    b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; - &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;birth_year&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;, &#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;birth_year &lt;span class=&quot;token keyword&quot;&gt;DESC&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; billionaire_birth_year&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; no_of_billionaires&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;&lt;br /&gt;    billionaire b&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt;&lt;br /&gt;    b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;country&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; no_of_billionaires &lt;span class=&quot;token keyword&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output will look like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/postgres-string_agg/02postgres-string_agg-example.jpg&quot; title=&quot;Top 100 Billionares with Birth year by country and count per country&quot; alt=&quot;Top 100 Billionares with Birth year by country and count per country&quot; /&gt;
&lt;p&gt;The output has been truncated with the top 10 rows but it will list all the 20 rows/countries if you run it on ElephantSQL Browser or any other CLI tool like &lt;a href=&quot;https://www.postgresql.org/docs/current/app-psql.html&quot;&gt;psql&lt;/a&gt; or a GUI like &lt;a href=&quot;https://www.jetbrains.com/datagrip/&quot;&gt;DataGrip&lt;/a&gt;. You can already see the power of string_agg function in PostgreSQL. Let’s ask one more question in the next section and that will be all the examples.&lt;/p&gt;
&lt;h2 id=&quot;list-the-billionaires-by-category-and-count-per-category&quot; tabindex=&quot;-1&quot;&gt;List the billionaires by category and count per category &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#list-the-billionaires-by-category-and-count-per-category&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The query this time is which category of work has the most billionaires and list the names alphabetically and number of billionaires by category. It can be achieved by:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;&lt;br /&gt;    b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;category&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    STRING_AGG &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;	    b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;, &#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;ASC&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; billionaire_names&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; no_of_billionaires&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;&lt;br /&gt;    billionaire b&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt;&lt;br /&gt;    b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;category&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; no_of_billionaires &lt;span class=&quot;token keyword&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output will look like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/postgres-string_agg/03postgres-string_agg-billionaires.jpg&quot; title=&quot;Top 100 Billionaires by category and count per category&quot; alt=&quot;Top 100 Billionaires by category and count per category&quot; /&gt;
&lt;p&gt;Surely in 2023, there will be more billionaires making their money from the technology category than any other. For instance, in the top 100 billionaires of the world Real Estate has 2 whereas tech has 16, so work in tech :). You can play around with the data and ask more questions to get more insights with SQL and string_agg.&lt;/p&gt;
&lt;h2 id=&quot;using-string_agg-with-within-group&quot; tabindex=&quot;-1&quot;&gt;Using string_agg with WITHIN GROUP &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#using-string_agg-with-within-group&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to the basic usage of string_agg, PostgreSQL provides an extension to this function called WITHIN GROUP, allowing you to specify the order in which values are concatenated within each group, which is particularly valuable when the sequence of items in the concatenated string is significant.&lt;/p&gt;
&lt;p&gt;The syntax for using WITHIN GROUP is as follows:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;string_agg&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;delimiter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;WITHIN&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; ordering_expression&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The WITHIN GROUP extension in PostgreSQL&#39;s string_agg function enables ordered concatenation, providing control over the sequence of values within each group. This functionality proves especially useful for tasks like listing products sorted by prices.&lt;/p&gt;
&lt;p&gt;Let&#39;s update the aforementioned query to obtain answers to questions such as listing all the billionaires by country and year of birth, with the youngest first, along with the count by country:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;&lt;br /&gt;    b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;country&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    STRING_AGG &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; - &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;birth_year&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;, &#39;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;birth_year &lt;span class=&quot;token keyword&quot;&gt;DESC&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;WITHIN&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;birth_year &lt;span class=&quot;token keyword&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; billionaire_birth_year&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; no_of_billionaires&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;&lt;br /&gt;    billionaire b&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt;&lt;br /&gt;    b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;country&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; no_of_billionaires &lt;span class=&quot;token keyword&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this query, the string_agg function will concatenate billionaire names along with their birth years (ordered by birth year in descending order) within each country group and count the number of billionaires in each country, ultimately sorting the results by the number of billionaires in descending order.&lt;/p&gt;
&lt;p&gt;Did you notice any difference? In this query, we added &#39;WITHIN GROUP&#39;. The key distinction is that the previous query applies the ordering to the entire result set, whereas in this one, we ensure that the concatenation is ordered within each country group as well.&lt;/p&gt;
&lt;p&gt;Why does this matter? Consider a scenario where the order of items in the concatenated string is crucial, such as when creating a comma-separated list of items in a specific sequence. The WITHIN GROUP extension empowers you to control this order, providing a powerful tool for precise string aggregation.&lt;/p&gt;
&lt;p&gt;It&#39;s important to note that if the order of items is not significant for your use case, you can continue to use string_agg without WITHIN GROUP as demonstrated earlier.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/postgres-string_agg/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PostgreSQL&#39;s string_agg function is a powerful tool for string aggregation in SQL queries. It allows you to concatenate values from multiple rows into a single string, making it ideal for tasks such as generating comma-separated lists or creating custom reports.&lt;/p&gt;
&lt;p&gt;In this blog post, you found out what string_agg is and how it relates to MySQL&#39;s group_concat. You also learned its practical use with real data, including listing billionaires by country and category.&lt;/p&gt;
&lt;p&gt;The next time you find yourself working on a PostgreSQL project that involves string aggregation, remember the string_agg function and how it can simplify your queries and data processing. Happy querying!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>There are like nine actual full-stack engineers in the world, and you are NOT one of them</title>
		<link href="https://geshan.com.np/blog/2023/10/full-stack-engineer/"/>
		<updated>2023-10-21T11:45:57Z</updated>
		<id>https://geshan.com.np/blog/2023/10/full-stack-engineer/</id>
		<content type="html">&lt;p&gt;The term “full-stack engineer” is often thrown around in the software industry, particularly in web development. Let me break the news to you, a real full-stack engineer is a mythical unicorn. In this post, you will learn about how and why there are ~nine actual full-stack engineers in this world, and you are not one of them. Still, you can be very successful in your software engineering career, carry on reading to know how.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/full-stack-engineer/01full-stack-engineer.jpg&quot; title=&quot;There are like nine actual full-stack engineers in the world, and you are not one of the unicorns&quot; alt=&quot;There are like nine actual full-stack engineers in the world, and you are not one of the unicorns&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#what-is-a-full-stack-engineer%3F&quot;&gt;What is a full-stack engineer?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#how-are-there-like-nine-full-stack-engineers%2C-really&quot;&gt;How are there like nine full-stack engineers, really&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#there-are-surely-no-junior-full-stack-engineers&quot;&gt;There are surely no junior full-stack engineers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#backend-is-diversified-in-languages&quot;&gt;Backend is diversified in languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#frontend-varies-on-the-framework-aspect&quot;&gt;Frontend varies on the framework aspect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#choose-your-specialization-and-make-it-your-forte&quot;&gt;Choose your specialization and make it your forte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#become-a-t-shaped-product-minded-engineer&quot;&gt;Become a T-Shaped product-minded engineer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-a-full-stack-engineer%3F&quot; tabindex=&quot;-1&quot;&gt;What is a full-stack engineer? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#what-is-a-full-stack-engineer%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A full-stack engineer is a software engineer who can work on both the frontend and backend of a web application. They are proficient in both frontend and backend technologies and can work on all aspects of a web application, from the user interface to the database. They are also known as full-stack developers or full-stack web developers. But really, they are mythical unicorns, let&#39;s understand how in the next section.&lt;/p&gt;
&lt;h2 id=&quot;how-are-there-like-nine-full-stack-engineers%2C-really&quot; tabindex=&quot;-1&quot;&gt;How are there like nine full-stack engineers, really &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#how-are-there-like-nine-full-stack-engineers%2C-really&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As per this post about &lt;a href=&quot;https://cloud.google.com/blog/products/application-development/richard-seroter-on-shifting-down-vs-shifting-left&quot;&gt;Shift left vs shift down&lt;/a&gt; by &lt;a href=&quot;https://seroter.com/about/&quot;&gt;Richard Seroter&lt;/a&gt;. He is the Director of Developer Relations and Outbound Product Management at Google Cloud and has multiple courses on Plural Sight, some of them being about Devops, Java, and Serverless. So he surely knows what he is talking about. Let me pull a quote from that post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are like nine actual “full stack engineers” on planet Earth. Virtually nobody writes a frontend in React, sets up Kubernetes, configures a RabbitMQ instance, provisions space on the SAN, and lights up the top-of-rack switch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When someone advertises for a real “full-stack” engineer they really mean is we have a budget for a person but that person should work as a team of 2-4 people.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So a full stack engineer supposedly can do at least both backend and frontend work equally well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is surely more than one person because a full-stack engineer should know the “full-stack” of the application which even oversimplified looks like the following visually:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/backend-vs-frontend/02backend-frontend.jpg&quot; title=&quot;Backend, Frontend, Full-stack, and Super Stack oversimplified&quot; alt=&quot;Backend, Frontend, Full-stack, and Super Stack oversimplified&quot; /&gt;
&lt;p&gt;Now with that image in your mind, let’s go deeper into why a real full-stack engineer only exists in fictional stories or superhero movies. So in the next part, you will know that, alas, a junior full-stack engineer can never exist.&lt;/p&gt;
&lt;h2 id=&quot;there-are-surely-no-junior-full-stack-engineers&quot; tabindex=&quot;-1&quot;&gt;There are surely no junior full-stack engineers &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#there-are-surely-no-junior-full-stack-engineers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First things first, let&#39;s dispel the myth of junior full-stack engineers. The concept of a junior full-stack engineer is similar to a novice pilot flying a jumbo jet, which is impossible. Full-stack engineering requires a deep understanding of both the front-end and back-end, which typically comes with years and years of experience.&lt;/p&gt;
&lt;p&gt;Junior engineers, who are in the early stages of their careers, are still building their foundational skills and exploring different aspects of development.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#39;s crucial to understand that a strong foundation in a specific area is the first step before branching out into “so-called” full-stack development.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the next section, you will learn more about the backend software work, one of these specific areas.&lt;/p&gt;
&lt;h2 id=&quot;backend-is-diversified-in-languages&quot; tabindex=&quot;-1&quot;&gt;Backend is diversified in languages &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#backend-is-diversified-in-languages&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The backend side of web development is a multifaceted landscape. I have discussed &lt;a href=&quot;https://geshan.com.np/blog/2020/02/difference-between-backend-frontend/#backend-development&quot;&gt;backend development&lt;/a&gt; work in the past too. Backend development work will involve working with at least one backend language like PHP, NodeJs, Ruby, Python, Java, etc which can communicate with a database/datastore. As you can see, there are diverse programming languages and technologies involved.&lt;/p&gt;
&lt;p&gt;Learning one takes time and to master one you will need to invest years of your life. To master all of these languages and their respective ecosystems is a close to impossible task. Not only does each language require time to learn, but keeping up with updates and best practices can be a lot more than a full-time job.&lt;/p&gt;
&lt;p&gt;I did not even touch on the varieties of databases from relational (read SQL) to non-relational databases you might want to learn in the backend realm. Each language and database serves different purposes, and they come with their own sets of strengths and weaknesses.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Being a proficient backend engineer with a combination of a single programming language and one database will take you years. If you are thinking of learning more than one programming language and 2-3 databases and using them in production environments, you are looking at a decade or more of time investment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now you see how rigorous, difficult, and time-consuming being a great backend engineer is. In the next section, you will learn about how the frontend side is fragmented.&lt;/p&gt;
&lt;h2 id=&quot;frontend-varies-on-the-framework-aspect&quot; tabindex=&quot;-1&quot;&gt;Frontend varies on the framework aspect &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#frontend-varies-on-the-framework-aspect&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Frontend development is equally varied, marked by a multitude of frameworks and libraries. Frontend development work encompasses the ability to change how things look and how users interact with the website or web/mobile application. It includes wrangling with HTML, CSS, and our favorite JavaScript. Frontend JavaScirpt is if I can use the word “fragmented” in frameworks.&lt;/p&gt;
&lt;p&gt;Angular, React, Vue.js, Svelte, and many others are part of the landscape. React is the most &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1kODyUrTPWvz5n0fpUovRdxfXsSikVHz6T3h9Kspuk8g/edit#gid=81955775&quot;&gt;popular one&lt;/a&gt; (check the other sheets too). Each of these frameworks has its unique syntax, structure, and set of conventions. Staying proficient in all of them is near impossible, especially given the rapid pace of change in the world of web development. And then a new JavaScirpt framework pops up every other week, and then you hear terms like &lt;a href=&quot;https://www.freecodecamp.org/news/the-cure-to-js-fatigue/&quot;&gt;JavaScript Fatigue&lt;/a&gt;. And then you end up asking &lt;a href=&quot;https://matt-rickard.com/why-is-the-frontend-stack-so-complicated&quot;&gt;why is frontend stack so complicated&lt;/a&gt; and &lt;a href=&quot;https://alexkondov.com/the-hard-things-about-front-end-development/&quot;&gt;hard&lt;/a&gt;. On top of that &lt;a href=&quot;https://geshan.com.np/blog/2022/09/software-engineering-realities/#languages-and-frameworks&quot;&gt;language and frameworks&lt;/a&gt; have popularity cycles, so because React is the most popular now does not mean in 5 years it will still be the most popular.&lt;/p&gt;
&lt;p&gt;There has been a slow use of &lt;a href=&quot;https://webassembly.org/&quot;&gt;Web Assembly&lt;/a&gt; - Wasm. WebAssembly is an exciting development in the world of web technology. It&#39;s a binary instruction format that enables high-performance execution of code on web browsers. With WebAssembly, you can write code in languages like C, C++, and Rust and run it in web applications. But it is far from mainstream as of 2023. Thereby:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Being a great frontend engineer (from a technical point of view), requires years of learning JavaScript and understanding its ever-changing eco-system of build tools, bundlers etc. Then on top of it knowing at least one framework very well. All this equates to, again a decade or more of time investment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So now that you are clear a full-stack engineer is an illusion created by companies who want to replace a team of 2-3 people with one person who is supposed to do all the work. Unless it is a company that has a revenue of less than 6 figures, it would be an impossible task to even attempt. So in the next section, you will learn about the practical path of being a software engineer with focus.&lt;/p&gt;
&lt;h2 id=&quot;choose-your-specialization-and-make-it-your-forte&quot; tabindex=&quot;-1&quot;&gt;Choose your specialization and make it your forte &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#choose-your-specialization-and-make-it-your-forte&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Selecting a specialization and making it your forte is the strategic move in your tech career. You have to choose one path backend, frontend, or even data, cloud, ML – but only one thing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can surely be a great backend engineer who can do some frontend and vice versa.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Regardless of your chosen specialization be it backend, frontend or something else, a strong foundation in the basics is crucial. This is discussed in the &lt;a href=&quot;https://geshan.com.np/blog/2017/02/things-i-wished-i-knew-as-a-junior-developer-slides/&quot;&gt;junior software engineer&lt;/a&gt; post too. With a deep understanding of fundamental programming concepts, data structures, and algorithms, things like HTTP serve as your bedrock. These principles are the keys to solving complex problems and thinking critically as an engineer. Being proficient in the fundamentals allows you to adapt and excel in various contexts and technologies, making you a more valuable asset to your team and organization.&lt;/p&gt;
&lt;p&gt;Even with 15 years of practical work experience in 3 continents and million-dollar companies, I would refrain from calling myself a “full-stack” engineer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This does not mean that I will never touch frontend or backend or vice-versa. I will consider myself a solution provider and as per need, I will deliver end-to-end solutions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Still, as my frontend skills are not as good as my backend skills, I will let the product manager know that if I do the frontend task it will take longer for me to do it than a frontend engineer whose forte is frontend work. That is where you need to understand the T-shaped engineer, discussed next.&lt;/p&gt;
&lt;h2 id=&quot;become-a-t-shaped-product-minded-engineer&quot; tabindex=&quot;-1&quot;&gt;Become a T-Shaped product-minded engineer &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#become-a-t-shaped-product-minded-engineer&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A &lt;a href=&quot;https://alexkondov.com/the-t-shaped-engineer/&quot;&gt;T-shaped engineer&lt;/a&gt; is someone who has broad knowledge across multiple disciplines but focuses on one the most. The concept of a T-shaped engineer is a pragmatic approach to handling the complexity of modern software development.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rather than attempting to master every facet of the tech stack, a T-shaped engineer chooses to go deep in one specific area while maintaining a broader set of skills across the stack.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The vertical line of the &#39;T&#39; represents your depth of knowledge in your chosen specialization, while the horizontal line signifies your understanding of other areas.&lt;/p&gt;
&lt;p&gt;The advantage of being a T-shaped engineer is that you can become an expert in one domain while still being able to communicate and collaborate effectively across various aspects of a project. This allows you to specialize, become proficient, and make a significant impact in your area of choice while remaining versatile enough to adapt to different projects and teams. You can see an illustration of a T-shaped engineer from a &lt;a href=&quot;https://twitter.com/pvukovic/status/1503664394298929157&quot;&gt;tweet&lt;/a&gt; by Peter Vukovic below:&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/full-stack-engineer/02t-shaped-eng.jpg&quot; title=&quot;An example T-shaped engineer with a focus on backend development&quot; alt=&quot;An example T-shaped engineer with a focus on backend development&quot; /&gt;
&lt;p&gt;A T-Shaped &lt;a href=&quot;https://blog.pragmaticengineer.com/the-product-minded-engineer/&quot;&gt;product-minded engineer&lt;/a&gt; would be a great software engineer. Product-minded engineers are developers with a lots of interest in the product itself. They want to understand why decisions are made, and how people use the product, and love to be involved in making product decisions. Product-minded engineers are curious, proactive, and have strong communication skills. They are also able to see the big picture and understand the business goals.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To sum it up, specialize in one domain (be it backend or frontend or something else) but have a border knowledge of the technology landscape then have the business acumen and know about the who, why, and how of the product you are building.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Don’t try to become something impossible to exist and keep up with. Have realistic expectations and become a valuable team member and someone who adds a lot of value to the organization you work for.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/10/full-stack-engineer/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In conclusion, the myth of the full-stack engineer often leads to unrealistic expectations and unnecessary stress for aspiring tech professionals. A junior full-stack engineer is non-existent and it takes years and years (read decades) of experience to become a great Backend engineer. It takes a similar amount of time to become a proficient Frontend engineer and ongoing time investment to keep up to date with the ever-changing landscape of software engineering.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thereby it is humanly not possible to be a real full-stack engineer. You are not one of the nine actual full-stack engineers that probably exist in this world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On the contrary, it is possible to specialize in one area be it backend or frontend or any other, and become a super useful and valuable T-shaped product-minded engineer who adds immense value to the organization.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>A beginner&#39;s guide to retrying failed requests with Axios Retry</title>
		<link href="https://geshan.com.np/blog/2023/09/axios-retry/"/>
		<updated>2023-09-26T11:41:57Z</updated>
		<id>https://geshan.com.np/blog/2023/09/axios-retry/</id>
		<content type="html">&lt;p&gt;In the ever-evolving world of web development, handling HTTP requests is a fundamental task. Whether you&#39;re building a frontend application or a backend service, you&#39;ll likely find yourself dealing with APIs and remote servers. &lt;a href=&quot;https://axios-http.com/docs/intro&quot;&gt;Axios&lt;/a&gt;, a popular JavaScript library, simplifies the process of making HTTP requests. However, what happens when those requests fail? In this beginner’s guide, you will explore how to tackle this issue by using &lt;a href=&quot;https://www.npmjs.com/package/axios-retry&quot;&gt;Axios Retry&lt;/a&gt;, an essential plugin that can save you time and frustration. Let&#39;s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/axios-retry/01axios-retry.jpg&quot; title=&quot;A beginner&#39;s guide to retrying failed requests with Axios Retry&quot; alt=&quot;A beginner&#39;s guide to retrying failed requests with Axios Retry&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#benefits-of-retrying-a-failed-request&quot;&gt;Benefits of Retrying a Failed Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#what-is-axios&quot;&gt;What is Axios?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#why-use-axios-retry&quot;&gt;Why Use Axios Retry&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#axios-retry-config&quot;&gt;Axios retry config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#axios-retry-example&quot;&gt;Axios retry example&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#install-axios-retry&quot;&gt;Install Axios retry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#use-axios-retry-to-retry-failed-requests&quot;&gt;Use axios retry to retry failed requests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#npmtrends-comparison&quot;&gt;NpmTrends comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;benefits-of-retrying-a-failed-request&quot; tabindex=&quot;-1&quot;&gt;Benefits of Retrying a Failed Request &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#benefits-of-retrying-a-failed-request&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before delving into Axios and Axios Retry, let&#39;s understand the importance of retrying failed requests. In a real-world web application, network issues, server errors, or temporary glitches can cause HTTP requests to fail. Retrying failed requests can provide several benefits as listed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improved Reliability: By automatically retrying failed requests, you increase the likelihood of successful data retrieval, improving the overall reliability of your application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enhanced User Experience: Retrying requests silently in the background can ensure a seamless user experience without error messages or interruptions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduced Manual Intervention: Without automated retry mechanisms, developers may need to intervene and manually retry requests, which is neither efficient nor scalable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With the above in mind, in the next part,  you will learn about Axios.&lt;/p&gt;
&lt;h2 id=&quot;what-is-axios%3F&quot; tabindex=&quot;-1&quot;&gt;What is Axios? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#what-is-axios%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://axios-http.com/docs/intro&quot;&gt;Axios&lt;/a&gt; is a promise-based HTTP client for JavaScript, which means it allows you to send asynchronous HTTP requests to REST endpoints or other services. It is widely used in both frontend and backend development due to its simplicity and versatility. With Axios, you can perform various HTTP operations such as GET, POST, PUT, DELETE, and more with ease. Even though there are other alternatives to Axios, it is one of the &lt;a href=&quot;https://npmtrends.com/axios-vs-got-vs-node-fetch-vs-request-vs-superagent&quot;&gt;most popular&lt;/a&gt; HTTP client libraries for both the backend (Node.js) and the front end.&lt;/p&gt;
&lt;p&gt;In the next section, you will learn how to retry failed idempotent requests in Axios using the Axios retry plugin and the why behind it.&lt;/p&gt;
&lt;h2 id=&quot;why-use-axios-retry&quot; tabindex=&quot;-1&quot;&gt;Why Use Axios Retry &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#why-use-axios-retry&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Axios Retry is an Axios plugin that simplifies the process of retrying failed requests. It offers a straightforward way to add resilience to your HTTP requests by allowing you to specify the number of retry attempts and a custom retry delay between each attempt. Here are some compelling reasons to use Axios Retry:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Saves Development Time: Writing custom retry logic for every request can be time-consuming. Axios Retry streamlines this process, saving you development time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Customizable Retry Strategies: You can define custom retry strategies based on the specific needs of your application, such as increasing the delay between retries or limiting the number of attempts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enhances Code Readability: By encapsulating retry logic within &lt;a href=&quot;https://geshan.com.np/blog/2022/12/axios-interceptors/&quot;&gt;Axios interceptors&lt;/a&gt;, your code remains clean and maintainable, improving readability.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Axios retry plugin has a flexible config you can use, which is described in the next section.&lt;/p&gt;
&lt;h3 id=&quot;axios-retry-config&quot; tabindex=&quot;-1&quot;&gt;Axios retry config &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#axios-retry-config&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can find some code examples in the Axios retry &lt;a href=&quot;https://github.com/softonic/axios-retry&quot;&gt;GitHub&lt;/a&gt; repository. It also lists down the configuration options with their type, default values, and description of what it does in a neatly organized &lt;a href=&quot;https://github.com/softonic/axios-retry#options&quot;&gt;table&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main configs from that table are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Retries - number of retries to do when the request fails.&lt;/li&gt;
&lt;li&gt;Retry condition - the condition should pass for the next retry to take place. By default, it retries on 5xx errors on idempotent requests.&lt;/li&gt;
&lt;li&gt;Retry delay - the delay in milliseconds between retrieved requests. &lt;a href=&quot;https://developers.google.com/analytics/devguides/reporting/core/v3/errors#backoff&quot;&gt;Exponential backoff&lt;/a&gt; is one of the best strategies for it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is an example that uses all the above configs.&lt;/p&gt;
&lt;h2 id=&quot;axios-retry-example&quot; tabindex=&quot;-1&quot;&gt;Axios retry example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#axios-retry-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s dive into a practical example to demonstrate how Axios Retry works. Consider a scenario where you&#39;re making an API request, and the server returns a 500 Internal Server Error. Without Axios Retry or any other retry mechanism, the request will fail and stop on the first failure like a 500 response from the server.&lt;/p&gt;
&lt;p&gt;Now, let&#39;s see how to achieve retrying with some rules using Axios Retry, next.&lt;/p&gt;
&lt;h3 id=&quot;install-axios-retry&quot; tabindex=&quot;-1&quot;&gt;Install Axios retry &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#install-axios-retry&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For the scope of this example, you will use Axios and Axios retry. To install both of them with NPM you can run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; axios axios-retry&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the time of writing, the latest version of Axios was 1.5.0, and Axios retry was 3.8.0. If you want to only install Axios retry you can run &lt;code&gt;npm install axios-retry&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For this example, you will send an HTTP GET request to a dummy server by Postman called Postman Echo and retry on the failure. The code for retrying the failed example can be found in the following section.&lt;/p&gt;
&lt;h3 id=&quot;use-axios-retry-to-retry-failed-requests&quot; tabindex=&quot;-1&quot;&gt;Use axios retry to retry failed requests &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#use-axios-retry-to-retry-failed-requests&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For the request retry example, while calling the Postman Echo test server, you will follow some rules. The rules are, that you will retry 3 times and there will be a delay of more than 1 * no. of retries second + random number of milliseconds between each retry – this is the &lt;a href=&quot;https://cloud.google.com/iot/docs/how-tos/exponential-backoff#example_algorithm&quot;&gt;exponential backoff&lt;/a&gt; algorithm. The retry will be done only in the case of &lt;code&gt;500&lt;/code&gt; and &lt;code&gt;501&lt;/code&gt; response codes.&lt;/p&gt;
&lt;p&gt;Just to complete the circuit, you will change the request URL after 2 retries to a URL that sends back a 200 response so that the third retry is not required. You will also log the number of retries and response status if the request is successful. Below is the code that follows all these rules in a file named &lt;code&gt;index.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; axios &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;axios&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; axiosRetry &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;axios-retry&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;axiosRetry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;axios&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br /&gt;   &lt;span class=&quot;token literal-property property&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token function-variable function&quot;&gt;retryDelay&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; axiosRetry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exponentialDelay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token function&quot;&gt;retryCondition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;//retry only if status is 500 or 501&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;onRetry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;retryCount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; requestConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;retry count: &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; retryCount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;retryCount &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        requestConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://postman-echo.com/status/200&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://postman-echo.com/status/500&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;inside async:&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error occurred: &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You first import &lt;code&gt;axios&lt;/code&gt; and &lt;code&gt;axois retry&lt;/code&gt; in the above script. Then set the config for Axios retry to follow all the above defined rules of 3 retries and exponential backoff.&lt;/p&gt;
&lt;p&gt;Then in the async function, you call the Postman Echo endpoint that always sends back a 500. If you are using Node 18+ and &lt;code&gt;module&lt;/code&gt; in package.json you can try &lt;a href=&quot;https://github.com/geshan/axios-retry/blob/master/index.js#L34-L36&quot;&gt;top-level await&lt;/a&gt; too.  In case of an error, it is logged. If the response comes back successfully the status code is logged.&lt;/p&gt;
&lt;p&gt;Another interesting aspect to note here is, that each retry attempt number is logged in the &lt;code&gt;onRetry&lt;/code&gt; function. After retry no. 2, you change the request URL to become successful. To make the requests more resilient you can also add a &lt;a href=&quot;https://geshan.com.np/blog/2022/11/axios-timeout/&quot;&gt;timeout to Axios&lt;/a&gt; request. The script runs like below when you run it with &lt;code&gt;time node index.js&lt;/code&gt; (you can also use &lt;code&gt;node index.js&lt;/code&gt;, time is used here to see how long the whole script takes:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/axios-retry/02axios-retry-script-run.jpg&quot; title=&quot;Axios retry script with 3 retries and exponetial backoff output&quot; alt=&quot;Axios retry script with 3 retries and exponetial backoff output&quot; /&gt;
&lt;p&gt;Because of the exponential backoff, the script takes 11.5 seconds to run after 2 retires. You can find this code in an open source &lt;a href=&quot;https://github.com/geshan/axios-retry&quot;&gt;GitHub repository&lt;/a&gt; for your reference. In the next section, you will learn about how do other alternatives to Axios retry compare to it.&lt;/p&gt;
&lt;h2 id=&quot;npmtrends-comparison&quot; tabindex=&quot;-1&quot;&gt;NpmTrends comparison &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#npmtrends-comparison&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are not many alternatives to Axois Retry. One of them is Retry Axois but it is not as popular as the Axios Retry. Of course, you can whip up your own solution using &lt;a href=&quot;https://geshan.com.np/blog/2022/12/axios-interceptors/&quot;&gt;Axois interceptors&lt;/a&gt; but that won’t be an optimal solution. Below is a quick comparison of the alternatives retry Axios and Axios retry interceptor from &lt;a href=&quot;https://npmtrends.com/axios-retry-vs-axios-retry-interceptor-vs-retry-axios&quot;&gt;NPM Trends&lt;/a&gt; :&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/axios-retry/03axios-retry-alt-comparision.jpg&quot; title=&quot;Axios retry popularity comparision to its alternatives&quot; alt=&quot;Axios retry popularity comparision to its alternatives&quot; /&gt;
&lt;p&gt;As you can see, Axios Retry currently has more than 2.5 million downloads per week whereas Retry Axios has around 600K downloads per week. Similarly, &lt;code&gt;axios-retry-interceptor&lt;/code&gt; has only around 50 downloads per week. So, it is safe to say that Axios Retry is the most popular retry plugin/library for retrying requests in Axios.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/axios-retry/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this beginner&#39;s guide, you have explored the world of Axios Retry and its significance in handling failed HTTP requests. You have seen how Axios Retry simplifies the process of adding retry mechanisms to your Axios requests, saving you time and improving your application&#39;s reliability. By applying this knowledge, you can enhance the resilience of your web applications and provide a more seamless experience to your users.&lt;/p&gt;
&lt;p&gt;You also witnessed an example of Axios retry with exponential backoff with 3 retries. The reference code is on &lt;a href=&quot;https://github.com/geshan/axios-retry&quot;&gt;GitHub&lt;/a&gt;. Then you knew about alternatives to Axios Retry and they are not as popular as Axios Retry.&lt;/p&gt;
&lt;p&gt;So, the next time you find yourself wrestling with failed requests, remember to use Axios Retry and let it work its magic to bring reliability and resilience to your web development projects. Happy coding!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to Use LIMIT in Postgres Delete in two roundabout ways</title>
		<link href="https://geshan.com.np/blog/2023/09/postgres-delete-limit/"/>
		<updated>2023-09-14T11:47:52Z</updated>
		<id>https://geshan.com.np/blog/2023/09/postgres-delete-limit/</id>
		<content type="html">&lt;p&gt;Postgres is a very popular and feature-rich database. However, unlike other database management systems like MySQL, you cannot use the &lt;code&gt;LIMIT&lt;/code&gt; keyword in Delete or Update statements. You can only use it in a select statement. In this blog post, you will learn about a couple of workarounds that can help delete rows on a Posgrest table with an arbitrary limit, let’s get going!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/postgres-delete-limit/01postgres-delete-limit.jpg&quot; title=&quot;How to Use LIMIT in Postgres Delete in two roundabout ways&quot; alt=&quot;How to Use LIMIT in Postgres Delete in two roundabout ways&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/#the-example-quotes-schema&quot;&gt;The example quotes schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/#mysql-delete-allows-limit&quot;&gt;MySQL Delete allows LIMIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/#postgres-delete-does-not-allow-limit&quot;&gt;Postgres Delete does not allow LIMIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/#solution-1%3A-use-delete-with-where-in-and-select&quot;&gt;Solution 1: Use DELETE with WHERE IN and SELECT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/#solution-2%3A-use-common-table-expression-(cte)&quot;&gt;Solution 2: Use Common Table Expression (CTE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;the-example-quotes-schema&quot; tabindex=&quot;-1&quot;&gt;The example quotes schema &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/#the-example-quotes-schema&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the scope of this blog post, you will use a simple schema with 2 tables, author and quote. This schema has been conveniently borrowed from another post on this blog about &lt;a href=&quot;https://geshan.com.np/blog/2023/04/delete-cascade-postgres/&quot;&gt;Cascade delete in Postgres&lt;/a&gt; database. The schema looks like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/delete-cascade-postgres/02author-quotes-er.jpg&quot; title=&quot;Entity relationship (ER) diagram of Author and Quotes relationship&quot; alt=&quot;Entity relationship (ER) diagram of Author and Quotes relationship&quot; /&gt;
&lt;p&gt;You can create the schema with the following create table statements:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; author &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    id &lt;span class=&quot;token keyword&quot;&gt;SERIAL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    name &lt;span class=&quot;token keyword&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varying&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    created_at &lt;span class=&quot;token keyword&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;time&lt;/span&gt; zone &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    updated_at &lt;span class=&quot;token keyword&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;time&lt;/span&gt; zone &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    id &lt;span class=&quot;token keyword&quot;&gt;SERIAL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    quote &lt;span class=&quot;token keyword&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varying&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UNIQUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    author_id &lt;span class=&quot;token keyword&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;REFERENCES&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    created_at &lt;span class=&quot;token keyword&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;time&lt;/span&gt; zone &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    updated_at &lt;span class=&quot;token keyword&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;time&lt;/span&gt; zone &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To insert some data you can run the following insert statements:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Martin Fowler&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Bjarne Stroustrup&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;John Johnson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;br /&gt; &lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author_id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;If you have to spend effort looking at a fragment of code and figuring out what it is doing, then you should extract it into a function and name the function after the &quot;what&quot;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;If you think it is simple, then you have misunderstood the problem.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;First, solve the problem. Then, write the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that if you delete the author all the related quotes will be deleted due to the ON DELETE CASCADE, which is discussed in the above-mentioned post. The create table will be pretty similar even in other flavors of databases like MySQL, which you are doing to know about next.&lt;/p&gt;
&lt;h2 id=&quot;mysql-delete-allows-limit&quot; tabindex=&quot;-1&quot;&gt;MySQL Delete allows LIMIT &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/#mysql-delete-allows-limit&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before you dive into how to achieve DELETE with LIMIT in Postgres, let&#39;s briefly mention that some database management systems, like MySQL, allow you to use the LIMIT clause directly with the DELETE statement. This can be quite convenient, as it allows you to limit the number of rows deleted in a single query. For example, if you want to delete only 1 quote by author ID 2 (Bjarne Stroustrup) from the above schema it can be done with the following query:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; quote &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; author_id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above MySQL example, only 1 row that matches the author condition will be deleted. Unfortunately, Postgres does not offer this feature natively. In Postgres &lt;a href=&quot;https://www.postgresql.org/docs/current/queries-limit.html&quot;&gt;LIMIT&lt;/a&gt; can only be used in Select statements. More on that in the next section.&lt;/p&gt;
&lt;h2 id=&quot;postgres-delete-does-not-allow-limit&quot; tabindex=&quot;-1&quot;&gt;Postgres Delete does not allow LIMIT &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/#postgres-delete-does-not-allow-limit&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Postgres, a powerful and versatile relational database system, doesn&#39;t support the LIMIT clause directly in the DELETE statement. This can be a limitation when you want to delete a specific number of rows from a table without writing complex queries or scripts.&lt;/p&gt;
&lt;p&gt;So, how can you achieve similar functionality in Postgres? Let&#39;s explore two common workarounds.&lt;/p&gt;
&lt;h2 id=&quot;solution-1%3A-use-delete-with-where-in-and-select&quot; tabindex=&quot;-1&quot;&gt;Solution 1: Use DELETE with WHERE IN and SELECT &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/#solution-1%3A-use-delete-with-where-in-and-select&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One way to delete a limited number of rows in Postgres is by combining the DELETE statement with a WHERE condition that uses the IN clause along with a subquery. Here&#39;s how you can delete only 1 row for user id 2, similar to the above MySQL exmaple:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; quote &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;IN&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; id  &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; quote &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; author_id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, you use a subquery to select the IDs of the rows from the quote table you want to delete, limiting the result set to 1 row. Then, you use the DELETE statement with a WHERE clause that specifies the IDs to delete. This effectively limits the number of rows deleted to 1 for the user id 2. It is more like &lt;a href=&quot;https://ryanstutorials.net/linuxtutorial/piping.php#piping&quot;&gt;piping&lt;/a&gt; in bash where the output of one command is used as the input for the next command.&lt;/p&gt;
&lt;p&gt;This approach provides a workaround to achieve the desired result, but it&#39;s essential to note that it may not be the most efficient solution for large tables. The subquery in the IN clause can impact performance, especially when dealing with extensive datasets. You will also need to think of the CASCADE effects where it might seem like only 1 row is being deleted but due to related rows and other rows related to the children&#39;s rows, it can delete 100s or 1000s of rows too. Next, you will learn about another solution to achieve limit while deleting records in Postgres.&lt;/p&gt;
&lt;h2 id=&quot;solution-2%3A-use-common-table-expression-(cte)&quot; tabindex=&quot;-1&quot;&gt;Solution 2: Use Common Table Expression (CTE) &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/#solution-2%3A-use-common-table-expression-(cte)&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another approach to achieving a limited DELETE operation in Postgres is by using a Common Table Expression (CTE). A CTE allows you to define a temporary result set that you can reference within your DELETE statement. Here&#39;s how you can use it to delete only 1 quote for author id 2:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;WITH&lt;/span&gt; rows_to_delete &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; id&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; quote&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; author_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; quote&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; id &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; rows_to_delete&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this solution, you first create a CTE called &amp;quot;rows_to_delete&amp;quot; that selects the IDs of the rows to be deleted, limited to 1 row for the author ID 2. Then, you use the DELETE statement with a WHERE clause that references the CTE to perform the deletion.&lt;/p&gt;
&lt;p&gt;Using a CTE can be a more efficient and cleaner way to achieve the desired result compared to the subquery approach. It separates the query logic into distinct parts, making the query easier to read and maintain. The same logic of cascade delete applies to this method too. You can test it out on &lt;a href=&quot;http://sqlfiddle.com/#!17/8bd76/1&quot;&gt;SQLFiddle&lt;/a&gt; too.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/09/postgres-delete-limit/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While Postgres does not provide a native LIMIT clause for the DELETE statement like some other database systems, you can still achieve the same functionality using workarounds. In this comprehensive exploration, you learned about two common methods: using DELETE with WHERE IN and SELECT and leveraging Common Table Expressions (CTEs). These techniques allow you to limit the number of rows deleted in a roundabout way, providing you with greater control over your data manipulation operations in Postgres.&lt;/p&gt;
&lt;p&gt;Additionally, it&#39;s crucial to consider database design and indexing when dealing with large datasets to ensure efficient DELETE operations. Proper indexing and query optimization can significantly improve the performance of your database queries, including DELETE statements. You can use the same approach with Update statements too.&lt;/p&gt;
&lt;p&gt;In conclusion, mastering these workarounds will empower you to efficiently manage your data in Postgres, even when faced with the absence of a native LIMIT clause in the DELETE statement. By understanding these techniques, you can make more informed decisions about how to manipulate your data effectively and efficiently in your Postgres database. Keep learning!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Setting up environment variables in Docker Compose an almost complete guide</title>
		<link href="https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/"/>
		<updated>2023-08-28T11:07:57Z</updated>
		<id>https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/</id>
		<content type="html">&lt;p&gt;Docker Compose is a powerful tool for orchestrating multi-container applications. It allows software engineers to define and manage environment variables seamlessly. In the realm of modern software development and containerization, environment variables play a pivotal role in configuring applications and services. They offer a flexible way to manage settings, credentials, and other secret and dynamic values without hardcoding them into code. In this comprehensive guide, you will delve into the intricacies of setting up environment variables in Docker Compose, covering everything from the basics to best practices. Let&#39;s get going!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/docker-compose-environment-variables/01docker-compose-environment-variables.jpg&quot; title=&quot;Setting up environment variables in Docker Compose an almost complete guide&quot; alt=&quot;Setting up environment variables in Docker Compose an almost complete guide&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#using-mysql-container-as-an-example&quot;&gt;Using MySQL container as an example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#how-to-define-environment-variables-in-docker-run&quot;&gt;How to define environment variables in Docker run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#adding-environment-variables-in-the-docker-compose-file&quot;&gt;Adding environment variables in the Docker compose file&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#substitute-from-shell-or-env-file&quot;&gt;Substitute from shell or .env file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#pass-the-env-file-with---env-file-argument&quot;&gt;Pass the env file with --env-file argument&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#putting-environment-variable-in-an-external-file&quot;&gt;Putting environment variable in an external file&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#use-the-env_file-attribute&quot;&gt;Use the env_file attribute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#docker-compose-environment-variables-precedence&quot;&gt;Docker compose environment variables precedence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#best-practices-for-docker-compose-environment-variables&quot;&gt;Best practices for Docker compose environment variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before you go to the code section, the following are some prerequisites:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You have docker and docker-compose installed on your local machine. This post will make use of Docker 24.0.2 and docker-compose v 2.18.1 on a Mac. Docker compose can be run with &lt;code&gt;docker-compose&lt;/code&gt; or &lt;code&gt;docker compose&lt;/code&gt; command in this version of docker and docker-compose.&lt;/li&gt;
&lt;li&gt;Prior experience with docker and docker-compose will be helpful.&lt;/li&gt;
&lt;li&gt;Knowledge of MySQL and injecting environment variables will be useful but not necessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the context of this guide, you will use docker-compose in a development setting only. You are not expected to use docker-compose to orchestrate or scale containers. Scaling and orchestrating containers is done in a better way by Kubernetes. Given the requisites are mentioned, in the next section you will learn about MySQL container as an example for the whole post.&lt;/p&gt;
&lt;h2 id=&quot;using-mysql-container-as-an-example&quot; tabindex=&quot;-1&quot;&gt;Using MySQL container as an example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#using-mysql-container-as-an-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this post, you will use a MySQL 8.1 container as an example. You will first run the container without docker-compose and inject some environment variables. Then you will learn how to run the same MySQL container with docker compose and two main ways to inject those same environment variables.&lt;/p&gt;
&lt;h2 id=&quot;how-to-define-environment-variables-in-docker-run&quot; tabindex=&quot;-1&quot;&gt;How to define environment variables in Docker run &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#how-to-define-environment-variables-in-docker-run&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can easily run a MySQL 8.1 container pulling the Docker image from DockerHub with the &lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-run&quot;&gt;Docker run&lt;/a&gt; command. First run &lt;code&gt;mkdir /tmp/mysql-data&lt;/code&gt; to create a folder to hold the MySQL data then run the &lt;code&gt;docker run&lt;/code&gt; command as follows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--name&lt;/span&gt; mysql81 &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-v&lt;/span&gt; /tmp/mysql-data:/var/lib/mysql &lt;span class=&quot;token parameter variable&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;mauFJcuf5dhRMQrjj &lt;span class=&quot;token parameter variable&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;testing &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3306&lt;/span&gt;:3306 &lt;span class=&quot;token parameter variable&quot;&gt;-it&lt;/span&gt; mysql:8.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The parameters in the above docker run command are doing the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the option &lt;code&gt;--name&lt;/code&gt; is used to assign the container the name &amp;quot;mysql8&amp;quot;. If this option is not provided, Docker will assign a random name to the container&lt;/li&gt;
&lt;li&gt;To ensure the container is removed when it stops, the --rm flag is utilized&lt;/li&gt;
&lt;li&gt;A volume -v is attached to /tmp/mysql-data and /var/lib/mysql, ensuring that the data is retained between container restarts. However, this data will be removed when the host machine restarts, given its location in /tmp.&lt;/li&gt;
&lt;li&gt;Environment variables -e are set to configure the MySQL instance. For instance, &lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt; is set to &amp;quot;mauFJcuf5dhRMQrjj&amp;quot; for the root user&#39;s password, and &lt;code&gt;MYSQL_DATABASE&lt;/code&gt; is set to &amp;quot;testing&amp;quot; to initialize a database named &amp;quot;testing&amp;quot;. This is the main focus here.&lt;/li&gt;
&lt;li&gt;The option &lt;code&gt;-p 3306:3306&lt;/code&gt; maps the host port 3306 to the container&#39;s port 3306. Port 3306 is MySQL&#39;s default port, and you can choose to map to a different host port, such as 3307:3306, which would link the local port 3307 to the container&#39;s port 3306.&lt;/li&gt;
&lt;li&gt;The combination of -it ensures that the container runs interactively, allowing the display of all logs as a terminal is allocated. We&#39;re using the official MySQL image version 8.1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When it runs successfully it will show an output like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-compose-environment-variables/02docker-run.jpg&quot; title=&quot;Docker run with environment variables&quot; alt=&quot;Docker run with environment variables&quot; /&gt;
&lt;p&gt;If you want you can go into the container using the &lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-exec&quot;&gt;docker exec&lt;/a&gt; command.&lt;/p&gt;
&lt;h2 id=&quot;adding-environment-variables-in-the-docker-compose-file&quot; tabindex=&quot;-1&quot;&gt;Adding environment variables in the Docker compose file &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#adding-environment-variables-in-the-docker-compose-file&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can run the same MySQL container much more easily, without the need to remember all the parameters more declaratively with a &lt;code&gt;docker-compose.yml&lt;/code&gt; file which looks like the below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  db:&lt;br /&gt;    image: mysql:8.1&lt;br /&gt;    cap_add:&lt;br /&gt;      - SYS_NICE&lt;br /&gt;    restart: always&lt;br /&gt;    environment:&lt;br /&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;quotes&lt;br /&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;mauFJcuf5dhRMQrjj&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token string&quot;&gt;&#39;3306:3306&#39;&lt;/span&gt;&lt;br /&gt;    volumes:&lt;br /&gt;      - db:/var/lib/mysql&lt;br /&gt;      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql&lt;br /&gt;volumes:&lt;br /&gt;  db:&lt;br /&gt;    driver: &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the environment variables are passed using the &lt;code&gt;environment&lt;/code&gt; attribute. An init file is used to load the database with a sample quotes schema and some data, you can see the &lt;a href=&quot;https://github.com/geshan/docker-compose-env-vars/blob/master/db/init.sql&quot;&gt;file&lt;/a&gt; and its content in this &lt;a href=&quot;https://github.com/geshan/docker-compose-env-vars&quot;&gt;GitHub repository&lt;/a&gt;. You can learn more about &lt;a href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#running-mysql-with-docker-compose&quot;&gt;Docker-compose and MySQL&lt;/a&gt; by reading this tutorial. For now, let&#39;s focus on the environment variable part.&lt;/p&gt;
&lt;p&gt;As you can see above, the environment variables are part of the docker-compose file, and the sensitive variables are not replaced by another file or OS/shell variables. You will learn substitution in the next section.&lt;/p&gt;
&lt;h3 id=&quot;substitute-from-shell-or-.env-file&quot; tabindex=&quot;-1&quot;&gt;Substitute from shell or .env file &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#substitute-from-shell-or-.env-file&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To make the environment variables more obscure and not easily visible in the docker-compose.yml file you can substitute them. It can be substituted either from a &lt;code&gt;.env&lt;/code&gt; file or from a shell variable. You can add a file named &lt;code&gt;.env&lt;/code&gt; on the same level as your &lt;code&gt;docker-compose.yml&lt;/code&gt; file with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;quotes&lt;br /&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;mauFJcuf5dhRMQrjj&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can change your docker-compose file to look like the below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  db:&lt;br /&gt;    image: mysql:8.1&lt;br /&gt;    cap_add:&lt;br /&gt;      - SYS_NICE&lt;br /&gt;    restart: always&lt;br /&gt;    environment:&lt;br /&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;${MYSQL_DATABASE}&lt;/span&gt;&lt;br /&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;${MYSQL_ROOT_PASSWORD}&lt;/span&gt;&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token string&quot;&gt;&#39;3306:3306&#39;&lt;/span&gt;&lt;br /&gt;    volumes:&lt;br /&gt;      - db:/var/lib/mysql&lt;br /&gt;      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql&lt;br /&gt;volumes:&lt;br /&gt;  db:&lt;br /&gt;    driver: &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the variables &lt;code&gt;${MYSQL_DATABASE}&lt;/code&gt; and &lt;code&gt;${MYSQL_ROOT_PASSWORD}&lt;/code&gt; will be replaced by the values store in the &lt;code&gt;.env&lt;/code&gt; file. You can check the final &lt;code&gt;docker-compose.yml&lt;/code&gt; file that will be used for docker-compose commands by running &lt;code&gt;docker compose -f docker-compose-02-env-file.yml config&lt;/code&gt; it will show you the compiled file as below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-compose-environment-variables/03environment-attr.jpg&quot; title=&quot;Docker compose environment variable substituted from file&quot; alt=&quot;Docker compose environment variable substituted from file&quot; /&gt;
&lt;p&gt;You can also set the variable as Shell variables and it will also be used. For example you can set the &lt;code&gt;MYSQL_DATABASE&lt;/code&gt; variable to &lt;code&gt;test&lt;/code&gt; by executing &lt;code&gt;export MYSQL_DATABASE=test&lt;/code&gt;. After that if you run &lt;code&gt;docker compose -f docker-compose-02-env-file.yml config&lt;/code&gt; you will see:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-compose-environment-variables/04env-from-shell.jpg&quot; title=&quot;Docker compose environment variable substituted from shell&quot; alt=&quot;Docker compose environment variable substituted from shell&quot; /&gt;
&lt;p&gt;In addition to the environment variables, you can also replace other things in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file with this pattern. For instance, if you want to put &lt;code&gt;image: mysql:{MYSQL_VERSION}&lt;/code&gt; and get it replaced with a value from &lt;code&gt;.env&lt;/code&gt; or shell variable it can be done too.&lt;/p&gt;
&lt;h3 id=&quot;pass-the-env-file-with---env-file-argument&quot; tabindex=&quot;-1&quot;&gt;Pass the env file with --env-file argument &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#pass-the-env-file-with---env-file-argument&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you need to use a different set of environment variables for different environments on the fly then you can do it using &lt;code&gt;--env-file&lt;/code&gt; argument with docker-compose commands. This will substitute the variable on the &lt;code&gt;docker-compose.yml&lt;/code&gt; file for each command. Below is a &lt;code&gt;.env.test&lt;/code&gt; file with the following variables:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;quotes_test&lt;br /&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;test&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use this file while testing, you can use the command shown next:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; compose --env-file .env.test &lt;span class=&quot;token parameter variable&quot;&gt;-f&lt;/span&gt; docker-compose-02-env-file.yml config &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will use the &lt;code&gt;.env.test&lt;/code&gt; file for the environment variables and the used &lt;code&gt;docker-compose.yml&lt;/code&gt; file will look like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-compose-environment-variables/05env-test-file.jpg&quot; title=&quot;Docker compose environment variable substituted from test env file&quot; alt=&quot;Docker compose environment variable substituted from test env file&quot; /&gt;
&lt;p&gt;If you don’t want to list your environment variables in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file with the `environment1 attribute, that is possible. For that, you will need to use an external file, which will be elaborated in the next section.&lt;/p&gt;
&lt;h2 id=&quot;putting-environment-variable-in-an-external-file&quot; tabindex=&quot;-1&quot;&gt;Putting environment variable in an external file &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#putting-environment-variable-in-an-external-file&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can put all your environment variables in an external file like a &lt;code&gt;.env&lt;/code&gt; file. You can use the same &lt;code&gt;.env&lt;/code&gt; file from the above example that has the &lt;code&gt;MYSQL_DATABASE&lt;/code&gt; and &lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt; variables. To use this file to feed in the environment variable for the running docker container you will use the &lt;code&gt;env_file&lt;/code&gt; &lt;a href=&quot;https://docs.docker.com/compose/compose-file/05-services/#env_file&quot;&gt;attribute&lt;/a&gt;. It is discussed in the next section.&lt;/p&gt;
&lt;h3 id=&quot;use-the-env_file-attribute&quot; tabindex=&quot;-1&quot;&gt;Use the env_file attribute &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#use-the-env_file-attribute&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you want you can also pass multiple files using the &lt;code&gt;env_file&lt;/code&gt; attribute in docker-compose. To run the MySQL container with the &lt;code&gt;env_file&lt;/code&gt; attribute, it will be changed to look as follows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;services:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  db:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    image: mysql:8.1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    cap_add:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - SYS_NICE&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    restart: always&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    env_file:&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      - .env&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    ports:&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - &lt;span class=&quot;token string&quot;&gt;&#39;3306:3306&#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    volumes:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - db:/var/lib/mysql&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;volumes:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  db:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    driver: &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The file has been saved as &lt;code&gt;docker-compose-03-env-file-attr.yml&lt;/code&gt; and you can check the final docker compose file with &lt;code&gt;docker compose -f docker-compose-03-env-file-attr.yml config&lt;/code&gt;. It will look similar to the above file with the &lt;code&gt;environment&lt;/code&gt; variable. But this one is taking the environment variables from an external file with the &lt;code&gt;env_file&lt;/code&gt; attribute.&lt;/p&gt;
&lt;h2 id=&quot;docker-compose-environment-variables-precedence&quot; tabindex=&quot;-1&quot;&gt;Docker compose environment variables precedence &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#docker-compose-environment-variables-precedence&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are multiple ways to pass the environment variables in docker compose. So an order is needed to decide what method takes precedence over the other.  The priority is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Configured via docker compose run -e in the &lt;a href=&quot;https://docs.docker.com/compose/environment-variables/set-environment-variables/#set-environment-variables-with-docker-compose-run---env&quot;&gt;command-line interface&lt;/a&gt; (CLI).&lt;/li&gt;
&lt;li&gt;Substituted from your &lt;a href=&quot;https://docs.docker.com/compose/environment-variables/set-environment-variables/#substitute-from-the-shell&quot;&gt;shell&lt;/a&gt; environment variables.&lt;/li&gt;
&lt;li&gt;Defined through the &lt;a href=&quot;https://docs.docker.com/compose/environment-variables/set-environment-variables/#use-the-environment-attribute&quot;&gt;environment attribute&lt;/a&gt; in the Compose file.&lt;/li&gt;
&lt;li&gt;Utilization of the --env-file &lt;a href=&quot;https://docs.docker.com/compose/environment-variables/set-environment-variables/#substitute-with---env-file&quot;&gt;argument&lt;/a&gt; in the CLI.&lt;/li&gt;
&lt;li&gt;Leverage of the env_file &lt;a href=&quot;https://docs.docker.com/compose/environment-variables/set-environment-variables/#use-the-env_file-attribute&quot;&gt;attribute&lt;/a&gt; in the Compose file.&lt;/li&gt;
&lt;li&gt;Establishment within an &lt;a href=&quot;https://docs.docker.com/compose/environment-variables/set-environment-variables/#substitute-with-an-env-file&quot;&gt;.env&lt;/a&gt; file positioned at the root of your project directory.&lt;/li&gt;
&lt;li&gt;Set within a container image utilizing the &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#env&quot;&gt;ENV&lt;/a&gt; directive. Worth noting is that any ARG or ENV settings within a Dockerfile come into play only if no Docker Compose entries for environment, env_file, or run --env are present.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So now you know that if you set a bash variable it will override setting the same environment variable on a file passed with &lt;code&gt;--env-file&lt;/code&gt;. So be careful about the precedence of the variables to get your desired output.&lt;/p&gt;
&lt;p&gt;All the examples of this post are in this &lt;a href=&quot;https://github.com/geshan/docker-compose-env-vars&quot;&gt;GitHub repository&lt;/a&gt; for your reference. Some best practices regarding docker-compose environment variables are discussed next.&lt;/p&gt;
&lt;h2 id=&quot;best-practices-for-docker-compose-environment-variables&quot; tabindex=&quot;-1&quot;&gt;Best practices for Docker compose environment variables &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#best-practices-for-docker-compose-environment-variables&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are some best practices for using environment variables in a docker-compose file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use environment variables to store sensitive data, such as passwords and API keys. This will help to keep your data secure and prevent it from being exposed. * Substitute them from the shell/OS environment variable on a docker-compose file.&lt;/li&gt;
&lt;li&gt;Use a consistent naming convention for environment variables. This will make it easier to track and manage your environment variables.&lt;/li&gt;
&lt;li&gt;Use a version control system to track changes to environment variables. This will help you to keep track of changes to your environment variables and identify any potential security vulnerabilities.&lt;/li&gt;
&lt;li&gt;Use a secrets management tool to store sensitive data. This will help to keep your data secure and prevent it from being exposed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those are some practices you should remember for docker-compose environment variables and environment variables in general.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/docker-compose-environment-variables/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this guide, you learned how to put environment variables with a regular docker run command. Then you were guided to use environment variables with the &lt;code&gt;environment&lt;/code&gt; attribute in a docker-compose file for a MySQL container. After that, you used some environment variable substitution from shell and &lt;code&gt;.env&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;You also learned to use the &lt;code&gt;env_file&lt;/code&gt; attribute of the docker-compose file to put the environment variables in an external file. Toward the end, you found out about the precedence of environment variables in docker-compose and finally learned some best practices for them.&lt;/p&gt;
&lt;p&gt;I hope now you are more confident about using environment variables properly in the docker-compose context. Happy dockerizing your apps!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>A beginner&#39;s guide to type casting in TypeScript with examples</title>
		<link href="https://geshan.com.np/blog/2023/08/typescript-cast/"/>
		<updated>2023-08-05T11:05:57Z</updated>
		<id>https://geshan.com.np/blog/2023/08/typescript-cast/</id>
		<content type="html">&lt;p&gt;TypeScript, known as a superset of JavaScript, is a powerful programming language that adds static typing to JavaScript. One essential aspect of TypeScript is type casting, also known as type assertions or type conversion, which allows developers to explicitly change the type of a value when needed. In this blog post, we will explore the concept of type casting in TypeScript, its usage, and best practices, supported by illustrative examples. Let&#39;s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/typescript-cast/01typescript-cast.jpg&quot; title=&quot;A beginner&#39;s guide to type casting in TypeScript with examples&quot; alt=&quot;A beginner&#39;s guide to type casting in TypeScript with examples&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#typescript-intro&quot;&gt;TypeScript Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#popularity-of-typescript&quot;&gt;Popularity of Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#type-casting-in-typescript&quot;&gt;Type Casting in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#typescript-implicit-types&quot;&gt;TypeScript Implicit Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#implicit-type-in-function-return-types&quot;&gt;Implicit Type in Function Return Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#when-to-use-typescript-cast&quot;&gt;When to Use TypeScript Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#how-to-use-typescript-cast&quot;&gt;How to Use TypeScript Cast&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#example-with-as&quot;&gt;Example with as&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#example-using-angle-brackets&quot;&gt;Example using Angle Brackets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#when-to-choose-as-vs.-angle-brackets&quot;&gt;When to Choose as vs. Angle Brackets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#caution-about-type-casting-in-typescript&quot;&gt;Caution about Type Casting in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;typescript-intro&quot; tabindex=&quot;-1&quot;&gt;TypeScript Intro &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#typescript-intro&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TypeScript is an open-source programming language developed by Microsoft that extends JavaScript by adding optional static typing. It is transpiled into plain JavaScript code and allows developers to catch type-related errors early during development.&lt;/p&gt;
&lt;p&gt;By providing a way to specify types for variables, functions, and objects, TypeScript enhances code predictability and enables better tooling support. The TypeScript compiler checks the code for type correctness and offers better tooling support, making it easier to maintain and scale projects. In the next section, you will learn about the popularity of TypeScript over the years.&lt;/p&gt;
&lt;h2 id=&quot;popularity-of-typescript&quot; tabindex=&quot;-1&quot;&gt;Popularity of Typescript &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#popularity-of-typescript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TypeScript has gained a lot of popularity in the past 10 years due to its many benefits over JavaScript. TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. This means that you can use all of the features of JavaScript in TypeScript, but with the added benefits of type safety.&lt;/p&gt;
&lt;p&gt;Compared to one of the few competitors of TypeScript like &lt;a href=&quot;https://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt;, TypeScript has gained a lot of popularity. The below graph shows the popularity of TypeScript over the years.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/typescript-cast/02typescript-popularity.jpg&quot; title=&quot;Popularity of TypeScript has soared significantly in the past 10 years&quot; alt=&quot;Popularity of TypeScript has soared significantly in the past 10 years&quot; /&gt;
&lt;p&gt;Next, you will learn about type casting in TypeScript.&lt;/p&gt;
&lt;h2 id=&quot;type-casting-in-typescript&quot; tabindex=&quot;-1&quot;&gt;Type Casting in TypeScript &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#type-casting-in-typescript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Type casting, also known as type assertions or type conversion, is the process of explicitly informing the TypeScript compiler about the specific type of a value when it cannot be inferred automatically. In TypeScript, type casting is useful when working with variables whose type may change during runtime, or when we know more about a value&#39;s type than the compiler does.&lt;/p&gt;
&lt;h2 id=&quot;typescript-implicit-types&quot; tabindex=&quot;-1&quot;&gt;TypeScript Implicit Types &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#typescript-implicit-types&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before diving into type casting, it&#39;s essential to understand TypeScript&#39;s implicit type inference. TypeScript automatically infers the type of variables based on their assigned values. For example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// TypeScript infers age as type number&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// TypeScript infers name as type string&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above example, TypeScript implicitly determines the types of age and name based on the values they are assigned.&lt;/p&gt;
&lt;h2 id=&quot;implicit-type-in-function-return-types&quot; tabindex=&quot;-1&quot;&gt;Implicit Type in Function Return Types &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#implicit-type-in-function-return-types&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TypeScript&#39;s implicit type inference is not limited to variables. It extends to function return types as well. When a function returns a value, TypeScript automatically infers the return type based on the function&#39;s implementation.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; number&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// TypeScript infers the return type as number&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, TypeScript infers that the return type of the add function is a number because the function returns the sum of two numbers.&lt;/p&gt;
&lt;h2 id=&quot;when-to-use-typescript-cast&quot; tabindex=&quot;-1&quot;&gt;When to Use TypeScript Cast &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#when-to-use-typescript-cast&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Type casting is used in various situations where the TypeScript compiler requires additional information about the type of a value. Some common scenarios include:&lt;/p&gt;
&lt;p&gt;String Type to Return Type Conversion: When a function returns a value as a string, but you need to use it as a specific type, type casting can be utilized to convert the string to the desired type.&lt;/p&gt;
&lt;p&gt;Type Safety and Type Guards: In cases where you want to narrow down a union type to a specific type (type guard), type casting assists in confirming the actual type of the value.&lt;/p&gt;
&lt;p&gt;Working with Specific Types: When dealing with third-party libraries or external APIs, the returned values may not be typed correctly. Type casting enables developers to assert the correct types for these values.&lt;/p&gt;
&lt;p&gt;In the following section, you will learn about how to use type casitng in TypeScript.&lt;/p&gt;
&lt;h2 id=&quot;how-to-use-typescript-cast&quot; tabindex=&quot;-1&quot;&gt;How to Use TypeScript Cast &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#how-to-use-typescript-cast&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TypeScript provides two primary methods for type casting: using the &lt;code&gt;as&lt;/code&gt; keyword and using angle brackets (&amp;lt;&amp;gt;). Let&#39;s explore examples of both methods:&lt;/p&gt;
&lt;h3 id=&quot;example-with-as&quot; tabindex=&quot;-1&quot;&gt;Example with as &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#example-with-as&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Consider a scenario where a function returns a value as a string, but you need to treat it as a number for further calculations. The example might seem a bit force so you can focus on the syntax rather than the semantics. Here&#39;s how you can use as for type casting:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; convertedResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;convertedResult&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Output: 50&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the multiply function returns the result as a string, but we explicitly use the &lt;code&gt;as&lt;/code&gt; keyword to cast it to the number type in the convertedResult variable.&lt;/p&gt;
&lt;p&gt;Below is another example with a custom-defined type:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Person &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    age&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Person&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPartialPerson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Partial&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Person&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    name&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Partial&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Person&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCastedPerson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Person &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    age&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Person&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;John&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { name: &#39;John&#39;, age: 30 }&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; partialPerson &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPartialPerson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;partialPerson&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { name: &#39;Jack&#39; }&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; castedPerson &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCastedPerson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;castedPerson&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { age: 32 }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above example, you can see a custom type called &lt;code&gt;Person&lt;/code&gt; being defined with &lt;code&gt;name&lt;/code&gt; as a string and &lt;code&gt;age&lt;/code&gt; as a number. The first function &lt;code&gt;getPerson&lt;/code&gt; sends back a full person type. You could have also made the age parameter a &lt;a href=&quot;https://geshan.com.np/blog/2022/06/typescript-optional-parameters/&quot;&gt;TypeScript optional parameter&lt;/a&gt; with a default value of like 30.&lt;/p&gt;
&lt;p&gt;The second example &lt;code&gt;getPartialPerson&lt;/code&gt; sends only a partial type removing the name attribute from the &lt;code&gt;Person&lt;/code&gt; type. The TypeScript &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype&quot;&gt;Partial&lt;/a&gt; utility type is also very useful in uniti testing scenario when you use a fixture which as a type. You can also utilize the &lt;code&gt;as unknown as Person&lt;/code&gt; or your own type in the testing scenario to refrain from defining all the attributes for a type with a lot of attributes. Similar example can also be seen for &lt;a href=&quot;https://geshan.com.np/blog/2022/07/jest-tohavebeencalledwith/#jest-tohavebeencalledwith-partial-array-and-object&quot;&gt;partial array and object types with Jest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The last example named &lt;code&gt;getCastedPerson&lt;/code&gt; supposedly sends back a Person type but as it is force cast the name is omitted and sends back an object with just the age. This is a forced type cast that does not comply with the defined type.&lt;/p&gt;
&lt;h3 id=&quot;example-using-angle-brackets&quot; tabindex=&quot;-1&quot;&gt;Example using Angle Brackets &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#example-using-angle-brackets&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using angle brackets (&amp;lt;&amp;gt;) for type casting is an alternative method, although it is less commonly used due to possible conflicts with &lt;a href=&quot;https://react.dev/learn/writing-markup-with-jsx&quot;&gt;JSX syntax&lt;/a&gt; if you are using TypeScript with a library like React. Here&#39;s the equivalent example using angle brackets:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; convertedResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;convertedResult&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Output: 50 not ‘50’&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both methods achieve the same result, but using as is recommended for better compatibility and consistency in TypeScript code. Next, you wll know when to choose the &lt;code&gt;as&lt;/code&gt; keyword vs. the angle brackets syntax.&lt;/p&gt;
&lt;h3 id=&quot;when-to-choose-as-vs.-angle-brackets&quot; tabindex=&quot;-1&quot;&gt;When to Choose as vs. Angle Brackets &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#when-to-choose-as-vs.-angle-brackets&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The as keyword and the angle brackets (&amp;lt;&amp;gt;) operator are both valid ways to perform type casting in TypeScript. However, there are some cases where one is preferable to the other.&lt;/p&gt;
&lt;p&gt;The as keyword is generally preferred when you are sure of the type of the value you are casting. For example, if you know that the value of str is a string, you can safely use the as keyword to cast it to a number.&lt;/p&gt;
&lt;p&gt;The angle brackets (&amp;lt;&amp;gt;) operator is generally preferred when you are not sure of the type of the value you are casting. For example, if you are receiving a value from an API, you might not know what type the value is. In this case, you can use the angle brackets (&amp;lt;&amp;gt;) operator to cast the value to a specific type.&lt;/p&gt;
&lt;h2 id=&quot;caution-about-type-casting-in-typescript&quot; tabindex=&quot;-1&quot;&gt;Caution about Type Casting in TypeScript &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#caution-about-type-casting-in-typescript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While type casting is a powerful tool, it should be used with caution to avoid potential pitfalls. Some important considerations include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compatibility: Ensure that the target type aligns with the actual value&#39;s type. Incorrect type casting may lead to runtime errors and unexpected behavior.&lt;/li&gt;
&lt;li&gt;Type Guarding: Whenever possible, use type guards to narrow down the type of a value before resorting to type casting. Type guards enhance code safety and reduce the risk of errors.&lt;/li&gt;
&lt;li&gt;Compiler Warnings: Be mindful of the TypeScript compiler warnings related to type casting. These warnings can help catch potential issues early on and improve code quality.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every tool comes with its one pros and cons and it applies to Type casting as well. Know the tradeoffs and don’t overuse type casting to the point that the whole Type system of TypeScript can feel dysfunctional. Use it optiamally and in the right ways.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/08/typescript-cast/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Type casting, or type assertions, in TypeScript allows developers to explicitly specify the type of a value when needed. By understanding how to use as and angle brackets for type casting, developers can enhance type safety and flexibility in their code. Remember to use type casting judiciously, and always consider other options such as type guards before resorting to explicit type conversions.&lt;/p&gt;
&lt;p&gt;TypeScript&#39;s static typing and type casting capabilities offer significant advantages, making it a popular choice for building robust and scalable applications. As you continue to explore TypeScript, mastering type casting will undoubtedly strengthen your skills as a proficient TypeScript engineer, leading to more reliable and maintainable codebases.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to Use PostgreSQL COALESCE effectively with examples</title>
		<link href="https://geshan.com.np/blog/2023/07/postgresql-coalesce/"/>
		<updated>2023-07-29T10:45:52Z</updated>
		<id>https://geshan.com.np/blog/2023/07/postgresql-coalesce/</id>
		<content type="html">&lt;p&gt;In the world of database management systems, PostgreSQL (Postgres) is a popular choice due to its robust features and flexibility. One powerful function it offers is COALESCE, which allows you to handle null values effectively. In this blog post, you will explore what PostgreSQL COALESCE is, learn when it is useful, and see examples to demonstrate how to use it effectively. Let&#39;s get going!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/postgresql-coalesce/01postgresql-coalesce.jpg&quot; title=&quot;How to Use PostgreSQL COALESCE effectively with examples&quot; alt=&quot;How to Use PostgreSQL COALESCE effectively with examples&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#what-is-postgresql&quot;&gt;What is PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#postgresql-coalesce&quot;&gt;PostgreSQL COALESCE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#when-to-use-coalesce&quot;&gt;When to Use COALESCE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#how-to-use-postgresql-coalesce-with-examples&quot;&gt;How to Use PostgreSQL COALESCE (with Examples)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#replace-null-with-a-value&quot;&gt;Replace null with a value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#select-a-different-value-from-another-field&quot;&gt;Select a different value from another field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#replace-the-null-value-in-join-with-a-fallback-value&quot;&gt;Replace the null value in join with a fallback value&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-postgresql&quot; tabindex=&quot;-1&quot;&gt;What is PostgreSQL &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#what-is-postgresql&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PostgreSQL, often simply Postgres, is a free and open-source database management system (DBMS) with a long history of active development and a strong, proven feature set that has earned it a solid reputation for reliability, data integrity, and performance.&lt;/p&gt;
&lt;p&gt;PostgreSQL is a true multi-user, multi-threaded database management system that can handle a wide range of workloads, from small personal databases to large, mission-critical applications. It supports a wide range of data types and operations, including full-text search, spatial data, and JSON data. It is also a &lt;a href=&quot;https://arctype.com/blog/postgres-ordbms-explainer/&quot;&gt;object-oriented&lt;/a&gt; relational database management system.&lt;/p&gt;
&lt;p&gt;PostgreSQL is also highly extensible, with a large community of developers contributing to the project. This means that there is a wide range of extensions available for PostgreSQL, covering everything from performance tuning to data modeling to security. You can know more about PostgreSQL in the video below (in just 100 seconds):&lt;/p&gt;
&lt;div style=&quot;position: relative;
width: 100%;
height: 0;
padding-bottom: 56.25%; margin-bottom: 1rem;&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/n2Fluyr3lbc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; style=&quot;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;There are many useful features of PostgreSQL, one of them is the built-in Coalesce function. It can be used while selecting data from table(s) which makes your life a lot easier. In the next section, you will learn what is Coalesce in PostgreSQL.&lt;/p&gt;
&lt;h2 id=&quot;postgresql-coalesce&quot; tabindex=&quot;-1&quot;&gt;PostgreSQL COALESCE &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#postgresql-coalesce&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;COALESCE is a built-in function in Postgres that takes multiple arguments and returns the first non-null value from those arguments. It evaluates the arguments in the order specified and stops as soon as it encounters a non-null value. If all the arguments are null, COALESCE returns null. For example, if you have a column of values that are sometimes null, you can use COALESCE to return a default value for those null values.&lt;/p&gt;
&lt;p&gt;COALESCE is a very useful function for dealing with null values in Postgres. It can be used to ensure that all values in a column are non-null or to return a default value for null values. In the next section, you will out in a bit more detail when to use COALESCE in PostgreSQL.&lt;/p&gt;
&lt;h2 id=&quot;when-to-use-coalesce&quot; tabindex=&quot;-1&quot;&gt;When to Use COALESCE &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#when-to-use-coalesce&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are several scenarios where using COALESCE in PostgreSQL can be beneficial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Handling Null Values: When dealing with database queries or data manipulation, it&#39;s common to encounter null values. COALESCE helps you replace null values with alternative non-null values, making your queries or calculations more reliable and consistent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Conditional Value Selection: COALESCE allows you to select a preferred value from a list of options based on specific conditions. This is especially useful when working with conditional logic in your queries with &lt;code&gt;SELECT COALESCE&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Displaying Default Values: If you want to display a default value when a column contains a null value, COALESCE can be used to provide a fallback value for better data presentation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, you will learn about how to use the PostgreSQL COALESCE function with some examples.&lt;/p&gt;
&lt;h2 id=&quot;how-to-use-postgresql-coalesce-(with-examples)&quot; tabindex=&quot;-1&quot;&gt;How to Use PostgreSQL COALESCE (with Examples) &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#how-to-use-postgresql-coalesce-(with-examples)&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To demonstrate how to use COALESCE effectively, let&#39;s consider an example. Here is a simple &lt;a href=&quot;https://www.lucidchart.com/pages/er-diagrams&quot;&gt;ER-Diagram&lt;/a&gt; of users and blog posts. One user can have 0 or more blog posts and one blog post will have exactly one author (user). It looks like the below as designed in &lt;a href=&quot;https://dbdiagram.io/d/64c4f31602bd1c4a5ee64183&quot;&gt;DB Diagram&lt;/a&gt;:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/postgresql-coalesce/02postgresql-coalesce-erd.jpg&quot; title=&quot;ER-Diagram with users and blog posts for PostgreSQL Coalesce examples&quot; alt=&quot;ER-Diagram with users and blog posts for PostgreSQL Coalesce examples&quot; /&gt;
&lt;p&gt;The above schema when exported to Postgres will result in something as follows:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;serial&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;first_name&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;middle_name&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;last_name&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;role&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;created_at&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;blog_posts&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;serial&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;body&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;excerpt&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;user_id&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;status&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;created_at&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;blog_posts&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;REFERENCES&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can add some data in these two tables executing the following INSERT statements:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; users &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;first_name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; middle_name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; last_name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; role&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;John&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Doe&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;admin&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Jane&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Doe&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;author&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;John&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;White&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;author&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; blog_posts &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; body&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; excerpt&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; user_id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is my first post&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is my first post&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;published&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello Again&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is my second post&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is my second post&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;published&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is my first post 1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is my post&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;published&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello Again2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is my second post - draft&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;draft&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you inserted 3 users, John Doe, Jane Doe, and John White. After that you inserted 4 blog posts 2 for John Doe and then the next 2 for John White. Notice that John While user no. 3 does not have a middle name and also has not written any blog posts. You will use this for the example queries. You can find the above schema and data set as a &lt;a href=&quot;http://sqlfiddle.com/#!17/c72b73/25&quot;&gt;SQL fiddle&lt;/a&gt; if you want to try it on your own on the browser without the need to install anything.&lt;/p&gt;
&lt;p&gt;You can also host the above database structure and data on a free hosted service like  &lt;a href=&quot;https://neon.tech/&quot;&gt;Neon&lt;/a&gt; or &lt;a href=&quot;https://www.elephantsql.com/&quot;&gt;Elephant SQL&lt;/a&gt;. You can also opt to put it on your local machine as a &lt;a href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/&quot;&gt;Postgres Docker&lt;/a&gt; container if you wish.&lt;/p&gt;
&lt;h3 id=&quot;replace-null-with-a-value&quot; tabindex=&quot;-1&quot;&gt;Replace null with a value &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#replace-null-with-a-value&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As the first example, your task is to select the “full name” of all the users. Now one (or more) of the users can have a &lt;code&gt;null&lt;/code&gt; middle name as many people don’t have a middle name. In the data set “John Whilte” does not have a middle name so you can select the full name of all users with:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;br /&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CONCAT_WS&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; first_name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;COALESCE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;middle_name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; last_name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; full_name &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you are using &lt;code&gt;CONCAT_WS&lt;/code&gt; to concatenate the selected columns with a &lt;code&gt; &lt;/code&gt; space in between. Then you are utilizing the handy &lt;code&gt;COALESCE&lt;/code&gt; function for the middle name as it can be null, when the middle name is null you are selecting an empty string. This will result in the following which shows the full name of &lt;code&gt;John White&lt;/code&gt; without any issues even when his middle name is null:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/postgresql-coalesce/03postgresql-coalesce-null-mn.jpg&quot; title=&quot;PostgreSQL coalesce example of null middle name while selecting full name&quot; alt=&quot;PostgreSQL coalesce example of null middle name while selecting full name&quot; /&gt;
&lt;p&gt;Have a look at the third row in the result, the full name is as expected &lt;code&gt;John White&lt;/code&gt; without any middle name.&lt;/p&gt;
&lt;h3 id=&quot;select-a-different-value-from-another-field&quot; tabindex=&quot;-1&quot;&gt;Select a different value from another field &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#select-a-different-value-from-another-field&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For the next example, in the &lt;code&gt;blog posts&lt;/code&gt; table, the &lt;code&gt;excerpt&lt;/code&gt; column can be &lt;code&gt;null&lt;/code&gt;. So the task is, if the excerpt field is null then select the first x (say 5) characters from the body field. This can be done with:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;&lt;br /&gt;  blog_posts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; blog_post_id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;  first_name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;COALESCE&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;excerpt&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;&lt;br /&gt;  blog_posts &lt;span class=&quot;token keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;JOIN&lt;/span&gt; users &lt;span class=&quot;token keyword&quot;&gt;on&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; blog_posts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user_id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will result in:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/postgresql-coalesce/04postgresql-coalesce-excerpt.jpg&quot; title=&quot;PostgreSQL coalesce example of selecting expert as the first 5 characters of the body&quot; alt=&quot;PostgreSQL coalesce example of selecting expert as the first 5 characters of the body&quot; /&gt;
&lt;p&gt;In the above query, you are using the &lt;code&gt;LEFT&lt;/code&gt; function to select the first 5 characters of the body if the excerpt is null. This can be seen in the last row of the result which shows &lt;code&gt;This &lt;/code&gt; those are the first 5 characters of the &lt;code&gt;body&lt;/code&gt; column as the excerpt is null.&lt;/p&gt;
&lt;p&gt;Another example of a similar task can be in the case of a product in an e-commerce store. The use-case is if the product is in discount select the &lt;code&gt;discounted_price&lt;/code&gt; else select the &lt;code&gt;price&lt;/code&gt; which is the regular price.&lt;/p&gt;
&lt;p&gt;Coalesce can also be used with table joins, which you will learn next.&lt;/p&gt;
&lt;h3 id=&quot;replace-the-null-value-in-join-with-a-fallback-value&quot; tabindex=&quot;-1&quot;&gt;Replace the null value in join with a fallback value &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#replace-the-null-value-in-join-with-a-fallback-value&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The last task with the above data structure and the data set is to select all users and blog post titles even if the user does not have any blog posts. If the user does not have any blog post it should show &lt;code&gt;no title&lt;/code&gt; for that user which will be the user id 2 with the name &lt;code&gt;Jane&lt;/code&gt; in the above data set. It can be done with a left join as follows:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;&lt;br /&gt;  users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;COALESCE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;blog_posts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;&lt;br /&gt;  users &lt;span class=&quot;token keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;JOIN&lt;/span&gt; blog_posts &lt;span class=&quot;token keyword&quot;&gt;on&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; blog_posts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user_id&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above query will result in:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/postgresql-coalesce/05postgresql-coalesce-left-join.jpg&quot; title=&quot;PostgreSQL coalesce example of left join and replace missing value&quot; alt=&quot;PostgreSQL coalesce example of left join and replace missing value&quot; /&gt;
&lt;p&gt;The left join was used in the above query to list all the users even if the user did not have any blog posts. This is seen in the last row of the results. I hope the above 3 examples were useful to understand how to use PostgreSQL COALESCE.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/postgresql-coalesce/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PostgreSQL COALESCE function is a powerful function that allows you to handle null values effectively in your database queries. By using COALESCE function, you can replace null values, perform conditional value selection, and display default values as needed. Understanding and leveraging the capabilities of COALESCE enhances the reliability and readability of your SQL queries.&lt;/p&gt;
&lt;p&gt;In this blog post, you learned the concept of PostgreSQL COALESCE and its applications. By incorporating COALESCE into your database operations, you can handle null values with ease and improve the accuracy of your data manipulations.&lt;/p&gt;
&lt;p&gt;Remember to experiment with COALESCE in your own projects, exploring its versatility and finding creative ways to enhance your SQL queries. Happy coding with Postgres!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to undo a git rebase, a beginner&#39;s guide with an easy example</title>
		<link href="https://geshan.com.np/blog/2023/07/undo-git-rebase/"/>
		<updated>2023-07-22T11:40:52Z</updated>
		<id>https://geshan.com.np/blog/2023/07/undo-git-rebase/</id>
		<content type="html">&lt;p&gt;Git is the most popular distributed version control system. It is very powerful and valuable too. Git Rebase is done when the main (master) branch has moved ahead and you need to apply the changes from the main branch to your branch while maintaining the history. In this post, you will learn how to undo a git-rebase. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/undo-git-rebase/01undo-git-rebase.jpg&quot; title=&quot;How to undo a git rebase the easy way&quot; alt=&quot;How to undo a git rebase the easy way&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/undo-git-rebase/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/07/undo-git-rebase/#what-is-git-rebase%3F&quot;&gt;What is Git Rebase?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/07/undo-git-rebase/#when-you-would-need-to-undo-a-rebase&quot;&gt;When You Would Need to Undo a Rebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/07/undo-git-rebase/#how-to-undo-a-git-rebase&quot;&gt;How to Undo a Git Rebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/07/undo-git-rebase/#important-considerations&quot;&gt;Important Considerations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2023/07/undo-git-rebase/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-git-rebase%3F&quot; tabindex=&quot;-1&quot;&gt;What is Git Rebase? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/undo-git-rebase/#what-is-git-rebase%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Git rebase is a way to rearrange your commits so that they appear in a linear history. This is useful when you want to integrate changes from multiple branches into a single branch, or when you want to fix a mistake in a commit. It is often used to integrate changes from one branch into another or to squash multiple commits into one.&lt;/p&gt;
&lt;p&gt;When you rebase, Git takes the commits from your current branch and applies them on top of the tip of another branch. This means that the commits in your current branch will be rewritten to appear as if they were made on top of the other branch. Git rebase is a powerful tool that can help you keep your Git history clean and organized. It&#39;s a good idea to learn how to use it if you&#39;re working with git regularly.&lt;/p&gt;
&lt;p&gt;Rebase can be a useful tool for keeping your Git history clean and organized. It can also be helpful for collaborating on projects with other people.&lt;/p&gt;
&lt;p&gt;The most common use of rebase is to apply your commits (or changes) on top of a shared branch like master/main where other changes are coming in frequently. For instance, you started work on &lt;code&gt;your-feature-branch&lt;/code&gt; 3 days back. You added 5 commits in the past 3 days but your teammates have merged 7 commits to the main/master branch. Now as it is time to open a pull/merge request you will apply 5 of your commits on top of the 7 merged commits. This is best done by rebasing &lt;code&gt;your-feature-branch&lt;/code&gt; with the master branch before you open the pull/merge request.&lt;/p&gt;
&lt;p&gt;Git rebase is also useful when you want to fix a mistake in a commit. Let&#39;s say you&#39;ve made a &lt;code&gt;commit&lt;/code&gt;, and then you realize that you made a mistake. You could delete the commit and make a new one, but this would lose your work.&lt;/p&gt;
&lt;p&gt;A better way to fix a mistake is to use git rebase. With git rebase, you can edit the commit that you made a mistake in. This will create a new commit with the changes that you want to make. The old commit will still be there, but it will be marked as &amp;quot;rewritten.&amp;quot;&lt;/p&gt;
&lt;p&gt;Git rebase is a powerful tool that can help you to keep your Git history clean and organized. It&#39;s a good idea to learn how to use it if you&#39;re working with git regularly. But sometimes you will need to undo a rebase, you will know about some cases to undo a Git rebase in the next section.&lt;/p&gt;
&lt;h2 id=&quot;when-you-would-need-to-undo-a-rebase&quot; tabindex=&quot;-1&quot;&gt;When You Would Need to Undo a Rebase &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/undo-git-rebase/#when-you-would-need-to-undo-a-rebase&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While git rebase can be a powerful tool, there are several scenarios where you might need to undo a rebase:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mistakenly Rebasing the Wrong Branch: If you accidentally rebase the wrong branch, it can lead to unintended changes and potential loss of work. Undoing the rebase becomes necessary to revert to the original state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unforeseen Issues in the Rebased Commits: Sometimes, after completing a rebase, you might realize that the changes introduced are problematic or introduce bugs. In such cases, you would want to undo the rebase and revert to the previous state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collaborative Workflows: When working collaboratively on a shared branch, if others have already based their work on the rebased branch, undoing the rebase can help avoid conflicts and maintain a consistent history.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;how-to-undo-a-git-rebase&quot; tabindex=&quot;-1&quot;&gt;How to Undo a Git Rebase &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/undo-git-rebase/#how-to-undo-a-git-rebase&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Depending on the stage of your Git rebase you will have to run different commands to undo or stop a rebase.&lt;/p&gt;
&lt;p&gt;If you started a git rebase with &lt;code&gt;git rebase &amp;lt;branch-name&amp;gt;&lt;/code&gt; like &lt;code&gt;git rebase main&lt;/code&gt; and you encountered a conflict and don’t want to solve the conflict, the easiest way to undo it at this point will be with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; rebase abort&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above command will abort the git rebase and you will go back to the original branch.&lt;/p&gt;
&lt;p&gt;In case you have successfully done a git rebase with the main branch running &lt;code&gt;git rebase main&lt;/code&gt;, then you will need to run a different set of commands. To switch the state of the branch back to before the rebase you can run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset &lt;span class=&quot;token parameter variable&quot;&gt;--hard&lt;/span&gt; ORIG_HEAD&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is always advisable to make a backup of your branch before you do such commands with &lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;-backup&lt;/code&gt; to be safe if things do not go as expected. A more detailed way of doing it will be by using &lt;a href=&quot;https://www.atlassian.com/git/tutorials/rewriting-history/git-reflog&quot;&gt;git reflog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&#39;s walk through the process in a bit more detail :&lt;/p&gt;
&lt;p&gt;You can check out the &lt;code&gt;readme&lt;/code&gt; branch after cloning the repository with &lt;code&gt;git checkout -b readme origin/readme&lt;/code&gt;. The &lt;code&gt;readme&lt;/code&gt; branch in this Nextjs weather app &lt;a href=&quot;https://github.com/geshan/nextjs-weather-geo&quot;&gt;repo&lt;/a&gt; is behind the master branch. You can see the following view with &lt;a href=&quot;https://www.atlassian.com/git/tutorials/git&quot;&gt;gitk&lt;/a&gt; or git log too.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/undo-git-rebase/02before-git-rebase.jpg&quot; title=&quot;Readme branch before the git rebase&quot; alt=&quot;Readme branch before the git rebase&quot; /&gt;
&lt;p&gt;Now to rebase with the master branch you will run &lt;code&gt;git rebate master&lt;/code&gt; on the &lt;code&gt;readme&lt;/code&gt; branch.&lt;br /&gt;
It will show the following output&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; rebase master&lt;br /&gt;Successfully rebased and updated refs/heads/readme.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you look at the commit history with &lt;code&gt;gitk&lt;/code&gt;, it will show the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/undo-git-rebase/03after-git-rebase.jpg&quot; title=&quot;Readme branch after the git rebase with the master branch&quot; alt=&quot;Readme branch after the git rebase with the master branch&quot; /&gt;
&lt;p&gt;The &lt;code&gt;readme&lt;/code&gt; branch has been rebased with the &lt;code&gt;master&lt;/code&gt; branch, if you want to undo the rebase you should run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset &lt;span class=&quot;token parameter variable&quot;&gt;--hard&lt;/span&gt; ORIG_HEAD&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above command will result in:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;HEAD is now at 2ea1674 Better readme&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you see the commit history now, you will see it the same as the previous git commit history which looks like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/undo-git-rebase/04after-undoing-git-rebase.jpg&quot; title=&quot;Readme branch after undoing the git rebase&quot; alt=&quot;Readme branch after undoing the git rebase&quot; /&gt;
&lt;p&gt;Another way to rewrite the git commit history is by using &lt;a href=&quot;https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/&quot;&gt;git reflog&lt;/a&gt; which is a very powerful tool to undo almost anything in Git. You can try &lt;code&gt;git reflog&lt;/code&gt; on this branch and it will show all the changes including the rebase and undoing the rebase. In the next section, you will learn about some important considerations for undoing a git rebase.&lt;/p&gt;
&lt;h2 id=&quot;important-considerations&quot; tabindex=&quot;-1&quot;&gt;Important Considerations &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/undo-git-rebase/#important-considerations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While the steps outlined above will help you undo a git rebase, it&#39;s important to keep the following considerations in mind:&lt;/p&gt;
&lt;p&gt;Collaboration and Shared Repositories: If you&#39;ve pushed the rebased commits to a remote repository and others have based their work on it, undoing the rebase can lead to conflicts. Communicate with your team members and ensure everyone is aware of the changes you&#39;re making to maintain a consistent workflow.&lt;/p&gt;
&lt;p&gt;Backup and Safety Measures: Creating a backup branch before undoing a rebase is crucial. It allows you to easily revert to the rebased state if needed. Additionally, consider creating a backup of your entire repository to have an extra layer of safety in case anything goes wrong during the undo process.&lt;/p&gt;
&lt;p&gt;Review and Testing: After undoing a rebase, thoroughly review and test your code to ensure it functions as expected. It&#39;s possible that reverting the rebase might introduce other issues or conflicts that need to be addressed.&lt;/p&gt;
&lt;p&gt;You can read about more &lt;a href=&quot;https://geshan.com.np/blog/2014/07/4-git-tips-beyond-basics/&quot;&gt;git tips&lt;/a&gt; and also follow some simple rules to not encounter &lt;a href=&quot;https://geshan.com.np/blog/2016/04/3-simple-rules-for-less-or-no-git-conflicts/&quot;&gt;git conflicts&lt;/a&gt;. Read both these posts and save yourself from common git related issues.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2023/07/undo-git-rebase/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Git rebase is a powerful feature that allows you to organize your commit history and create a cleaner workflow. However, there are situations where you might need to undo a git rebase. In this blog post, we explored what git rebase is, discussed scenarios where undoing a rebase becomes necessary, and provided a step-by-step guide on how to undo a git rebase effectively.&lt;/p&gt;
&lt;p&gt;By incorporating the git reflog command into the process, you can easily identify the commit or reference to revert to, providing more flexibility and accuracy when undoing a rebase.&lt;/p&gt;
&lt;p&gt;Remember, it&#39;s essential to carefully consider the implications of undoing a rebase, especially when collaborating with others or when the rebase has already been pushed to a remote repository. Always communicate with your team members and ensure a shared understanding of the Git workflow.&lt;/p&gt;
&lt;p&gt;By understanding the process of undoing a git rebase, and utilizing the git reflog command, you can confidently manage your Git history and maintain a clean and organized repository. Happy coding and version controlling!&lt;/p&gt;
</content>
	</entry>
</feed>
